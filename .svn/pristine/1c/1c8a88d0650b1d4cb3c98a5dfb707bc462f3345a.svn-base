using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using System.Text;
using System.Web.Services;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Xml;

using Aspose.Cells;
using Newtonsoft.Json;
using WTS.Util;

/// <summary>
/// When RQMTs are displayed in the grid, we are always displaying the base requirement itself. In other words, we are displaying RQMT.RQMT or RQMT.RQMTID, or RQMT COMPLEXITY, or RQMT CRITICALITY (via joins). 
/// The only exception occurs when a user adds RQMT PRIMARY (or RQMT PRIMARY #) to the column list. There are two levels of RQMTS, top level or child level (e.g. 1.0, 1.1, 2.0, 2.1, 2.2, 2.3, 3.0, 4.0).
/// 
/// There are 4 patterns of RQMTs a user can create with the level designer:
/// 1) RQMT (show bottom level RQMTs, which are any RQMT without children - L1 without children and any L2)
/// 2) RQMT PRIMARY (all L1)
/// 3) RQMT PRIMARY (all L1)
///       RQMT (children of the L1 item)
/// 4) RQMT PRIMARY + RQMT (ALL RQMTs - in this case, we show the RQMT row, and if it has a parent, we show the parent #, and if not, we show the RQMT # itself)
/// 
/// Because the behaviors of the above structures differ from each other, as well as when they are needed in the WHERE clauses, as well as when they are needed in ROW COUNT queries, we use different
/// names for the breakouts when sending into the database. This is done by modifying the Level XML before it gets sent to the database, and it allows us to know the context of a column many levels
/// deep after being passed in on the query string (so we know where the column originated from, which we can't do if we always send RQMT_ID to child framesets). The naming convention is as follows:
/// 1) RQMT / RQMT #
/// 2) RQMT PRIMARY / RQMT PRIMARY #
/// 3) RQMTPRIMARYNESTED + RQMTPRIMARYNESTEDNUMBER
///        RQMTNESTED + RQMTNESTEDNUMBER
/// 4) RQMTPRIMARYCOMBINEDNAME / RQMTPRIMARYCOMBINEDNUMBER + RQMT / RQMT #
/// 
/// If we have a drilldown after #1, the where clause will point to the RQMTID column, not to the parent column. For example, if we drilldown on RQMT 50 to see all the Descriptions under it, we pull
/// back all description rows where RQMTID = 50. We do the same thing in the where clauses for #2. Even though the column is called RQMT PRIMARY, we are still looking at RQMT 50 if it is a L1 RQMT. When
/// we drilldown, we still want to find rows where RQMTID = 50.
/// 
/// If we have a drilldown after RQMT PRIMARY in #3 (lets say PARENT=50 and CHILD=65), we instead are looking at all RQMTs that have a PARENTID = 50. After the second level, are looking at 
/// PARENTID = 50 and RQMTID = 65.
/// 
/// If we have a drilldown after #4, we are looking at PARENTID = 50 and RQMTID = 65. HOWEVER, note that if there is NO parent, a RQMT will list itself as BOTH PRIMARY RQMT and RQMT. For example, the
/// column list would show 50 + 65 if there is an actual parent, or 75 75 if there is not. In the no-parent case, we ignore the fake primary value (e.g. we make
/// sure the where clause doesn't show PARENTID = 75 and RQMTID = 75 since the RQMT PRIMARY value is just a copy of the RQMT VALUE).
/// 
/// The last major concept to understand with the RQMT queries is the RQMTMODE value. This RQMTMODE value allows us to tailor the WHERE clause of the main query to pull back the rows we need. 
/// The values are:
/// For #1, the RQMT mode is "rqmtbottoms". Whether the query is at a level before RQMT or on or after RQMT, it always shows bottom level RQMTs only.
/// For #2, the RQMT mode is "rqmttops". This mode tells the query to always show L1's.
/// For #3, we use multiple modes. Prior to reaching RQMT PRIMARY, we use "rqmttops". This restricts all queries to showing L1's only, and only L1 data will show up in the drilldowns up to that point.
/// For all queries beyond the RQMT PRIMARY level, we use "rqmtbottomsexclusive", which is different than "rqmtbottoms" in that the RQMT's are filtered to only RQMT's with a parent (and the column
/// where clause will be adding a rparent.RQMTID = RQMTPRIMARYID anyway).
/// For #4, we use a RQMT mode of "combined", which basically means show everything possible.
/// 
/// Lastly, we have one minor exception to the RQMTMode. Normally, when we have a parent/child structure, we enforce that only parent rqmts are counted in
/// counts and drilldowns. However, when a user includes the RQMTSetUsage column, we want to roll up all children of a set, not just top level RQMTs in that set. So if a user
/// adds the RQMTSetUsage column on a row with system, workarea, and rqmt type, and they have a #3 structure below it, we manually force RQMTMode="combined". This allows the main set row
/// to see "everything", rather than just parent values.
/// </summary>
public partial class RQMT_Grid : System.Web.UI.Page
{
    #region Variables
    protected bool ReadOnly = false; // if true, this overrides normal settings to provide a read-only view
    protected string PageType = string.Empty;
    private bool MyData = true;
    protected bool CanEditRQMT = false;
    protected bool CanViewRQMT = false;
    protected string View = string.Empty;
    protected int CurrentLevel = 1;
    protected string Filter = string.Empty;
    protected bool NeedsWhereExt = false;
    protected string WhereExt = string.Empty;
    protected bool IsConfigured = false;
    private XmlDocument Levels = new XmlDocument();
    protected DataColumnCollection DCC;
    protected int LevelCount = 0;
    protected int GridPageIndex = 0;
    
    protected int SystemSuiteID = 0;
    protected int WTS_SYSTEMID = 0;
    protected int RQMTTypeID = 0;
    protected int WorkAreaID = 0;

    protected bool Export = false;
    protected bool HidePlusSignInHeader = false;
    protected bool HideBuilderButton = false;

    protected bool RQMTIDDrilldownReferencesParent = false;
    protected bool NextLevelRQMTIDDrilldownReferencesParent = false;
    protected bool CountColumnsRQMTDrilldownReferencesParent = false;

    protected int SystemLevel = -1;
    protected int WorkAreaLevel = -1;
    protected int RQMTTypeLevel = -1;
    protected int RQMTSetUsageLevel = -1;
    protected int RQMTSetComplexityLevel = -1;
    protected int RQMTSetComplexityJustificationLevel = -1;
    protected int RQMTComplexityLevel = -1;
    protected int RQMTComplexityJustificationLevel = -1;

    protected int RQMTLevel = -1;
    protected int PrimaryRQMTLevel = -1;

    protected int RQMTNumberLevel = -1;
    protected int PrimaryRQMTNumberLevel = -1;

    protected string RQMTMode = "";
    protected string NextLevelRQMTMode = "";
    protected string CountColumnsRQMTMode = "";

    protected int rowCount = 0;
    protected int dtRowCount = 0;
    protected int dtColumnCnt = 0;
    protected int uniA = (int)'A';
    protected int gridRowCnt = 0;

    protected DataTable dtRQMTAttribute;
    protected DataTable dtRQMTComplexity;
    protected bool CanEditRQMSystemOrSet = false;

    #endregion

    #region Page
    private void Page_Load(object sender, EventArgs e)
    {
        ReadQueryString();
        LoadLookupData();

        string errors = ParseViewXML(Export, false);
        InitializeEvents();        

        this.CanEditRQMT = UserManagement.UserCanEdit(WTSModuleOption.RQMT) && !ReadOnly;
        this.CanViewRQMT = this.CanEditRQMT || UserManagement.UserCanView(WTSModuleOption.RQMT);

        if (Export)
        {
            if (string.IsNullOrWhiteSpace(errors))
            {
                errors = ParseViewXML(Export,true);
                DataTable dt = LoadData(this.CurrentLevel, this.Levels, this.Filter); // comment out this line when we start doing the new export since we load data differently for it

                errors = ParseViewXML(Export,false);
                ExportExcel(dt, this.Filter);
                
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add("Results", typeof(string));
                dt.Rows.Add(new string[] { errors });
                ExportData(dt);
            }
        }
        else
        {
            DataTable dt = null;

            if (string.IsNullOrWhiteSpace(errors))
            {
                dt = LoadData(this.CurrentLevel, this.Levels, this.Filter);

                if (dt.Rows.Count == 0)
                {
                    dt = new DataTable();
                    dt.Columns.Add("Results", typeof(string));
                    dt.Columns.Add("Z", typeof(string));
                    dt.Rows.Add(new string[] { "No data found.", "" });
                }
            }
            else
            {
                dt = new DataTable();
                dt.Columns.Add("Results", typeof(string));
                dt.Columns.Add("Z", typeof(string));
                dt.Rows.Add(new string[] { errors, "" });
            }

            if (dt != null)
            {
                this.DCC = dt.Columns;
            }

            PreProcessData(dt);
            grdData.DataSource = dt;

            if (!Page.IsPostBack && this.GridPageIndex > 0 && this.GridPageIndex < ((decimal)dt.Rows.Count / (decimal)25)) grdData.PageIndex = this.GridPageIndex;

            grdData.DataBind();

            if (Session["RQMT_Parameter_Page_Displayed"] == null)
            {
                IsConfigured = false;
                Session["RQMT_Parameter_Page_Displayed"] = "displayed";
            }
            else
            {                
                IsConfigured = true;
            }

            if (CurrentLevel > 1)
            {
                var headerDiv = (System.Web.UI.HtmlControls.HtmlControl)Page.Master.FindControl("pageContentHeader");
                headerDiv.Style.Add("display", "none"); // setting this server-side to avoid flickering (we hide it after document.read)
                IsConfigured = true; // we never show the configuration popup on drilldowns
            }
        }
    }

    private void ReadQueryString()
    {
        if (Request.QueryString["PageType"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["PageType"]))
        {
            this.PageType = Request.QueryString["PageType"];

            if (this.PageType == "Task") {
                this.ReadOnly = true;
                this.HideBuilderButton = true;
            }
        }

        if (Request.QueryString["MyData"] == null || string.IsNullOrWhiteSpace(Request.QueryString["MyData"])
            || Request.QueryString["MyData"].Trim() == "1" || Request.QueryString["MyData"].Trim().ToUpper() == "TRUE")
        {
            this.MyData = true;
        }
        else
        {
            this.MyData = false;
        }

        if (Request.QueryString["IsConfigured"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["IsConfigured"]))
        {
            bool.TryParse(Request.QueryString["IsConfigured"], out IsConfigured);
        }

        if (Request.QueryString["View"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["View"]))
        {
            this.View = Request.QueryString["View"];
        }

        if (Request.QueryString["CurrentLevel"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["CurrentLevel"]))
        {
            int.TryParse(Request.QueryString["CurrentLevel"], out this.CurrentLevel);
        }

        if (Request.QueryString["Filter"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["Filter"]))
        {
            string uriFilters = Uri.UnescapeDataString(Request.QueryString["Filter"]);
            
            this.Filter = uriFilters;
        }

        if (Request.QueryString["WhereExt"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["WhereExt"]))
        {
            this.WhereExt = Uri.UnescapeDataString(Request.QueryString["WhereExt"]);
        }

        if (Request.QueryString["GridPageIndex"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["GridPageIndex"]))
        {
            int.TryParse(Request.QueryString["GridPageIndex"], out this.GridPageIndex);
        }
        
        if (Request.QueryString["Export"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["Export"]))
        {
            this.Export = Request.QueryString["Export"].ToUpper() == "TRUE";
        }
    }

    private string ParseViewXML(bool Export, bool RawData)
    {
        string errors = "";

        XmlDocument nDoc = new XmlDocument();
        string gridViewName = string.Empty;
        string sessionXML = string.Empty;

        // get layout from session
        gridViewName = (string)Session["RQMT_GridView"];
        sessionXML = (string)Session["RQMT_CurrentXML"];

        // if session doesn't have a layout, load the user's last view
        if (string.IsNullOrWhiteSpace(sessionXML))
        {
            if (gridViewName != null)
            {
                ListItem item = ddlGridview.Items.FindByText(gridViewName);

                if (item != null)
                {
                    sessionXML = item.Attributes["SectionsXML"];
                }
            }
            
            if (string.IsNullOrWhiteSpace(sessionXML))
            {
                gridViewName = WTSData.GetDefaultGridViewName((int)WTSGridName.RQMT_Grid, UserManagement.GetUserId_FromUsername());
                ListItem item = ddlGridview.Items.FindByText(gridViewName);
                sessionXML = item.Attributes["SectionsXML"];
            }
        }

        // if there is no default view, make one
        if (string.IsNullOrWhiteSpace(sessionXML) || sessionXML == "Default")
        {
            sessionXML = "<crosswalkparameters>";

            sessionXML += "<level>";
            sessionXML += "  <breakout><column>SYSTEM SUITE</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>System</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>Work Area</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>Workload Group</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>RQMT Type</column><sort>Ascending</sort></breakout>";
            sessionXML += "</level>";

            sessionXML += "<level>";
            //sessionXML += "  <breakout><column>Outline Index</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>RQMT Primary #</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>RQMT Primary</column><sort>Ascending</sort></breakout>";            
            sessionXML += "</level>";

            sessionXML += "<level>";
            //sessionXML += "  <breakout><column>Outline Index</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>RQMT #</column><sort>Ascending</sort></breakout>";
            sessionXML += "  <breakout><column>RQMT</column><sort>Ascending</sort></breakout>";
            sessionXML += "</level>";

            sessionXML += "</crosswalkparameters>";
        }

        if (RawData) // do this if we are flattening the data (comment out if we are doing a recursive export)
        {
            
            string[] columns = sessionXML.Split(new string[] { "<column>" }, StringSplitOptions.RemoveEmptyEntries);

            StringBuilder newXML = new StringBuilder();
            newXML.Append("<crosswalkparameters><level>");

            List<string> columnsAdded = new List<string>();

            for (int i = 0; i < columns.Length; i++)
            {
                int idx = columns[i].IndexOf("</column>");

                if (idx != -1)
                {
                    string col = columns[i].Substring(0, idx);

                    if (columnsAdded.Contains(col))
                    {
                        continue;
                    }
                    else
                    {
                        columnsAdded.Add(col);
                    }

                    newXML.Append("<breakout>");
                    newXML.Append("<column>" + col + "</column>");
                    newXML.Append("<sort>Ascending</sort>");
                    newXML.Append("</breakout>");
                }
            }

            newXML.Append("</level></crosswalkparameters>");

            sessionXML = newXML.ToString();
            
        }

        string[] levels = sessionXML.Split(new string[] { "</level>" }, StringSplitOptions.RemoveEmptyEntries);

        for (int i = 0; i < levels.Length; i++)
        {
            if (levels[i].Contains("<column>RQMT</column>"))
            {
                RQMTLevel = i + 1;
            }

            if (levels[i].Contains("<column>RQMT #</column>"))
            {
                RQMTNumberLevel = i + 1;
            }

            if (levels[i].Contains("<column>RQMT Primary</column>"))
            {
                PrimaryRQMTLevel = i + 1;
            }

            if (levels[i].Contains("<column>RQMT Primary #</column>"))
            {
                PrimaryRQMTNumberLevel = i + 1;
            }

            if (levels[i].Contains("<column>RQMT Set Usage</column>"))
            {
                RQMTSetUsageLevel = i + 1;
            }

            if (levels[i].Contains("<column>System</column>"))
            {
                SystemLevel = i + 1;
            }

            if (levels[i].Contains("<column>Work Area</column>"))
            {
                WorkAreaLevel = i + 1;
            }

            if (levels[i].Contains("<column>RQMT Type</column>"))
            {
                RQMTTypeLevel = i + 1;
            }

            if (levels[i].Contains("<column>RQMT Set Complexity</column>"))
            {
                RQMTSetComplexityLevel = i + 1;
            }

            if (levels[i].Contains("<column>RQMT Set Complexity Justification</column>"))
            {
                RQMTSetComplexityJustificationLevel = i + 1;
            }

            if (levels[i].Contains("<column>Complexity</column>"))
            {
                RQMTComplexityLevel = i + 1;
            }

            if (levels[i].Contains("<column>Justification</column>"))
            {
                RQMTComplexityJustificationLevel = i + 1;
            }
        }

        if (sessionXML.Split(new string[] { "<column>RQMT</column>" }, StringSplitOptions.RemoveEmptyEntries).Length > 2)
        {
            errors += " RQMT column cannot be specified more than once.";
        }

        if (sessionXML.Split(new string[] { "<column>RQMT Primary</column>" }, StringSplitOptions.RemoveEmptyEntries).Length > 2)
        {
            errors += " RQMT Primary column cannot be specified more than once.";
        }

        if (sessionXML.Split(new string[] { "<column>RQMT #</column>" }, StringSplitOptions.RemoveEmptyEntries).Length > 2)
        {
            errors += " RQMT # column cannot be specified more than once.";
        }

        if (sessionXML.Split(new string[] { "<column>RQMT Primary #</column>" }, StringSplitOptions.RemoveEmptyEntries).Length > 2)
        {
            errors += " RQMT Primary # column cannot be specified more than once.";
        }

        if (RQMTNumberLevel != -1 && RQMTNumberLevel != RQMTLevel)
        {
            errors += " RQMT # must be on the same level as RQMT.";
        }

        if (PrimaryRQMTNumberLevel != -1 && PrimaryRQMTNumberLevel != PrimaryRQMTLevel)
        {
            errors += " RQMT Primary # must be on the same level as RQMT Primary.";
        }

        if (RQMTLevel != -1 && PrimaryRQMTLevel != -1 && RQMTLevel != PrimaryRQMTLevel && RQMTLevel != (PrimaryRQMTLevel + 1))
        {
            errors += " RQMT Primary must be on the level prior to RQMT.";
        }

        if (RQMTSetUsageLevel != -1 && (RQMTSetUsageLevel != SystemLevel || RQMTSetUsageLevel != WorkAreaLevel || RQMTSetUsageLevel != RQMTTypeLevel))
        {
            errors += " RQMT Set Usage must be on the same level as System, Work Area, and Purpose.";
        }

        if (RQMTComplexityLevel != -1 && (RQMTComplexityLevel == RQMTSetComplexityLevel || RQMTComplexityLevel == RQMTSetComplexityJustificationLevel))
        {
            errors += " RQMT Complexity must be on a different row than RQMT Set Complexity or Justification.";
        }

        if (RQMTComplexityJustificationLevel != -1 && (RQMTComplexityJustificationLevel == RQMTSetComplexityLevel || RQMTComplexityJustificationLevel == RQMTSetComplexityJustificationLevel))
        {
            errors += " RQMT Complexity Justification must be on a different row than RQMT Set Complexity or Justification.";
        }

        int nextLevel = CurrentLevel + 1;

        /*  
            The options for RQMT's in the grid configuration are:
            1) RQMT (show any rqmt that is bottom level, so level 1's without children and all level 2's)
            2) RQMT PRIMARY (show any rqmt that is level 1)
            3) RQMT PRIMARY (show rqmts with children)
                  RQMT (show rqmts with parents in previous level)
            4) RQMT PRIMARY + RQMT (show all rqmts; for rqmt primary, show the rqmt itself if the rqmt doesn't have a parent)
                        
            In Options 1, 2, and 4, we are always referring to the RQMT itself. When we drilldown, count, or otherwise use the RQMT/RQMT PRIMARY fields, we are always referring to the
            rqmt.[COLUMNNAME] table. Option 3 is the ONLY option that actually uses rparent in where clauses in the RQMT query, and that only happens
            when we are at the child RQMT level (and beyond).

            To handle the special display rules, we rename RQMT and RQMT PRIMARY to distinguish their behavior for Options 3 and 4.
        */

        Dictionary<string, string> replacements = new Dictionary<string, string>();

        if (RQMTLevel != -1 && PrimaryRQMTLevel != -1 && RQMTLevel == PrimaryRQMTLevel) // #4
        {
            // for this mode. we show all rqmts regardless of level
            RQMTMode = "combined";
            NextLevelRQMTMode = "combined";

            replacements.Add("RQMT Primary", "RQMTPRIMARYCOMBINEDNAME");
            replacements.Add("RQMT Primary #", "RQMTPRIMARYCOMBINEDNUMBER");
        }
        else if (PrimaryRQMTLevel != -1 && RQMTLevel != -1 && PrimaryRQMTLevel < RQMTLevel) // #3
        {
            // THESE ARE THE 4 PLACES THE ITEMS CAN APPEAR (EACH MAY REQUIRE DIFFERENT COLUMN TYPES):
            // 1
            // 2 RQMT PRIMARY
            // 4 RQMT
            // 5

            // NOTE THAT PRIMARY AND NON-PRIMARY WILL NEVER APPEAR ON THE SAME LINE TOGETHER IN OPTION #3
            // WHEN PRIMARY APPEARS IN THE FILTER LIST, IT WILL ALWAYS
            replacements.Add("RQMT Primary", "RQMTPRIMARYNESTED"); // still refers to RQMTID in select list and column counts until it hits child level, in which case it is converted to parent-only
            replacements.Add("RQMT Primary #", "RQMTPRIMARYNESTEDNUMBER");
            replacements.Add("RQMT", "RQMTNESTED");
            replacements.Add("RQMT #", "RQMTNESTEDNUMBER");

            if (CurrentLevel <= PrimaryRQMTLevel)
            {
                // here we only care about rqmttops
                RQMTMode = "rqmttops";
            }
            else {
                RQMTMode = "rqmtbottomsexclusive";
            }

            if (nextLevel <= PrimaryRQMTLevel)
            {
                // here we only care about rqmttops
                NextLevelRQMTMode = "rqmttops";
            }
            else
            {
                // from here on, we only care about requirements that are children of the primary
                NextLevelRQMTMode = "rqmtbottomsexclusive";
            }

        }
        else if (PrimaryRQMTLevel != -1 && RQMTLevel == -1) // #2 RQMT PRIMARY (top level rqmts, which includes anything at level 1)
        {
            RQMTMode = "rqmttops";
            NextLevelRQMTMode = "rqmttops";
        }
        else if (RQMTLevel != -1 && PrimaryRQMTLevel == -1) // 1 RQMT (bottom level rqmts, includes level 2 and level 1's without children since those are considered bottom as well)
        {
            RQMTMode = "rqmtbottoms";
            NextLevelRQMTMode = "rqmtbottoms";
        }

        if (RQMTSetUsageLevel == CurrentLevel)
        {
            // this is a hack to ensure set usage comes back with parent/child data counts (which would otherwise not include children if there is a parent -> child level structure)
            // to make sure this hack is called into play as little as possible, we enforce the rqmtsetusage columns be at the same level as system/wa/purpose
            RQMTMode = "combined";
        }

        foreach (string key in replacements.Keys)
        {
            sessionXML = sessionXML.Replace(">" + key + "<", ">" + replacements[key] + "<");
        }

        nDoc.InnerXml = sessionXML;
        
        this.Levels = nDoc;
        this.LevelCount = this.Levels.SelectNodes("crosswalkparameters/level").Count;

        if (errors != "")
        {
            errors = "Invalid grid configuration. " + errors;
        }
        return errors;
    }
    
    private void InitializeEvents()
    {
        grdData.GridHeaderRowDataBound += grdData_GridHeaderRowDataBound;
        grdData.GridRowDataBound += grdData_GridRowDataBound;
        grdData.GridPageIndexChanging += grdData_GridPageIndexChanging;
    }

    private void grdData_GridPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        grdData.PageIndex = e.NewPageIndex;
    }

    private void LoadLookupData()
    {
        int UserId = UserManagement.GetUserId_FromUsername();
        WTS_User u = new WTS_User(UserId);
        u.Load();
        DataTable dt = WTSData.GetViewOptions(userId: UserId, gridName: "RQMT Grid");

        if (dt != null && dt.Rows.Count > 0)
        {
            ddlGridview.Items.Clear();

            ListItem item = null;
            foreach (DataRow row in dt.Rows)
            {
                if (row["ViewName"].ToString() != "-- New Gridview --")
                {
                    var tempVal = row["WTS_RESOURCEID"].ToString();
                    item = new ListItem();
                    item.Text = row["ViewName"].ToString();
                    item.Value = row["GridViewID"].ToString();
                    item.Attributes.Add("OptionGroup", row["WTS_RESOURCEID"].ToString() != "" ? "Custom Views" : "Process Views");
                    item.Attributes.Add("MyView", row["MyView"].ToString());
                    item.Attributes.Add("Tier1RollupGroup", row["Tier1RollupGroup"].ToString());
                    item.Attributes.Add("Tier1ColumnOrder", row["Tier1ColumnOrder"].ToString());
                    item.Attributes.Add("Tier2ColumnOrder", row["Tier2ColumnOrder"].ToString());
                    item.Attributes.Add("DefaultSortType", row["Tier2SortOrder"].ToString());
                    item.Attributes.Add("SectionsXML", row["SectionsXML"].ToString());

                    ddlGridview.Items.Add(item);
                }
            }
        }

        if (ddlGridview.Items.FindByText("Default") == null)
        {            
            GridView gv = new GridView();
            gv.ViewName = "Default";
            gv.GridNameID = (int)WTSGridName.RQMT_Grid;
            gv.Load();

            ListItem item = new ListItem();
            item.Text = gv.ViewName;
            item.Value = gv.ID.ToString();
            item.Attributes.Add("OptionGroup", gv.UserID != 0 ? "Custom Views" : "Process Views");
            item.Attributes.Add("MyView", gv.UserID == UserId ? "1" : "0");
            item.Attributes.Add("Tier1RollupGroup", "");
            item.Attributes.Add("Tier1ColumnOrder", "");
            item.Attributes.Add("Tier2ColumnOrder", "");
            item.Attributes.Add("DefaultSortType", "");
            item.Attributes.Add("SectionsXML", gv.SectionsXML.InnerXml);

            ddlGridview.Items.Add(item);
        }

        if (CurrentLevel > 1) IsConfigured = true;

        if (Session["RQMT_GridView_Default"] != null && !string.IsNullOrWhiteSpace(Session["RQMT_GridView_Default"].ToString()))
        {
            ListItem itemGridView = ddlGridview.Items.FindByText(Session["RQMT_GridView_Default"].ToString());
            if (itemGridView != null)
            {
                itemGridView.Selected = true;
                itisettings.Value = Session["RQMT_GridView_Default"].ToString();
            }
            IsConfigured = true;
        }

        //Gather RQMTAttribute data for dropdown(s)
        if (Session["RQMTAttribute_Get"] == null)
        {
            dtRQMTAttribute = RQMT.RQMTAttribute_Get();
            Session["RQMTAttribute_Get"] = dtRQMTAttribute;
        }
        else
        {
            dtRQMTAttribute = (DataTable)Session["RQMTAttribute_Get"];
        }

        if (Session["RQMTComplexity_Get"] == null)
        {
            dtRQMTComplexity = RQMT.RQMTComplexityList_Get();
            Session["RQMTComplexity_Get"] = dtRQMTComplexity;
        }
        else
        {
            dtRQMTComplexity = (DataTable)Session["RQMTComplexity_Get"];
        }
    }

    private void GetRQMTSystemValuesFromFiltersOrRow(DataRow row, ref int sysid, ref int waid, ref int rtid)
    {
        sysid = 0;
        waid = 0;
        rtid = 0;

        string[] filters = this.Filter != null ? this.Filter.Split('|') : null;
        for (int i = 0; filters != null && i < filters.Length; i++)
        {
            string[] farr = filters[i].Split('=');

            if (farr[0] == "SYSTEM_ID")
            {
                sysid = Int32.Parse(farr[1]);
            }
            else if (farr[0] == "WORKAREA_ID")
            {
                waid = Int32.Parse(farr[1]);
            }
            else if (farr[0] == "RQMTTYPE_ID")
            {
                rtid = Int32.Parse(farr[1]);
            }
        }

        if (row != null)
        {
            if (row.Table.Columns.Contains("SYSTEM_ID"))
            {
                sysid = row["SYSTEM_ID"] != DBNull.Value ? Int32.Parse(row["SYSTEM_ID"].ToString()) : 0;
            }

            if (row.Table.Columns.Contains("WORKAREA_ID"))
            {
                waid = row["WORKAREA_ID"] != DBNull.Value ? Int32.Parse(row["WORKAREA_ID"].ToString()) : 0;
            }

            if (row.Table.Columns.Contains("RQMTTYPE_ID"))
            {
                rtid = row["RQMTTYPE_ID"] != DBNull.Value ? Int32.Parse(row["RQMTTYPE_ID"].ToString()) : 0;
            }
        }
    }

    private void GetRQMTValuesFromRow(DataRow row, ref int rid, ref int rpid)
    {
        rid = 0;
        rpid = 0;

        if (row != null)
        {
            if (row.Table.Columns.Contains("RQMT #"))
            {
                rid = row["RQMT #"] != DBNull.Value ? Int32.Parse(row["RQMT #"].ToString()) : 0;
            }

            if (row.Table.Columns.Contains("RQMT PRIMARY #"))
            {
                rpid = row["RQMT PRIMARY #"] != DBNull.Value ? Int32.Parse(row["RQMT PRIMARY #"].ToString()) : 0;
            }
        }
    }

    #endregion

    #region Data
    private DataTable LoadData(int currentLevel, XmlDocument levels, string filters)
    {
        DataTable dt = new DataTable();

        if (IsPostBack && currentLevel == 1 && Session["dtRQMT" + currentLevel] != null)
        {
            dt = (DataTable)Session["dtRQMT" + currentLevel];
        }
        else
        {
            XmlDocument docLevel = new XmlDocument();
            XmlElement rootLevel = (XmlElement)docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
            XmlNode nodeLevel = levels.SelectNodes("crosswalkparameters/level")[currentLevel - 1];
            XmlNode nodeImport = docLevel.ImportNode(nodeLevel, true);
            rootLevel.AppendChild(nodeImport);

            XmlDocument docFilters = new XmlDocument();
            XmlElement rootFilters = (XmlElement)docFilters.AppendChild(docFilters.CreateElement("filters"));

            XmlDocument docWhereExts = new XmlDocument();
            XmlElement rootWhereExts = (XmlElement)docWhereExts.AppendChild(docWhereExts.CreateElement("whereexts"));

            if (filters != string.Empty)
            {
                string[] arrFilter = filters.Split('|');

                for (int j = 0; j < arrFilter.Length; j++)
                {
                    XmlElement filter = docFilters.CreateElement("filter");                    
                    XmlElement field = docFilters.CreateElement("field");
                    XmlElement value = docFilters.CreateElement("id");
                    string[] arrValues = arrFilter[j].Split('=');

                    field.InnerText = arrValues[0].ToString();
                    value.InnerText = (arrValues[1].ToString().Trim() == "" ? "0" : arrValues[1].ToString().Trim());

                    filter.AppendChild(field);
                    filter.AppendChild(value);
                    rootFilters.AppendChild(filter);
                }
            }

            if (this.WhereExt != string.Empty)
            {
                string[] arrFilter = this.WhereExt.Split('|');

                for (int j = 0; j < arrFilter.Length; j++)
                {
                    XmlElement whereExt = docWhereExts.CreateElement("whereext");
                    XmlElement field = docWhereExts.CreateElement("field");
                    XmlElement value = docWhereExts.CreateElement("id");
                    string[] arrValues = arrFilter[j].Split('=');

                    field.InnerText = arrValues[0].ToString();
                    value.InnerText = (arrValues[1].ToString().Trim() == "" ? "0" : arrValues[1].ToString().Trim());

                    whereExt.AppendChild(field);
                    whereExt.AppendChild(value);
                    rootWhereExts.AppendChild(whereExt);
                }
            }

            dt = RQMT.RQMT_Crosswalk_Multi_Level_Grid(level: docLevel, filter: docFilters, whereExts: docWhereExts, RQMTMode: RQMTMode, CountColumns:null);

            if (currentLevel < LevelCount) // we need child counts
            {
                // we get a full export of the next level, passing in the filters that applied to the current level
                // we also add the _ID columns for the current level into the child dt so we can count by them and match them up to the current level dt
                // there are a few exceptions to columns we don't pass  down to "counts":
                //   ROW_ID
                //   RQMTPRIMARYNESTEDNUMBER_ID, RQMTPRIMARYNESTEDNAME_ID (these columns are used for parent/child grids, and refer to the RQMTID - but for drilldowns, we need the PARENTRQMTID so we use those columns instead)
                //   ANY RQMT ATTRIBUTE COLUMNS THAT ARE ON A RQMT ROW (if we are showing a grid by criticality, we'll pass it down, but if we are just showing a rqmt row with criticality attribute, we ignore the attribute and pass the rqmt only)
                bool rqmtRow = false;
                for (int x = 0; x < dt.Columns.Count; x++)
                {
                    string col = dt.Columns[x].ColumnName.ToLower();

                    if (col == "rqmt_id" || col == "rqmtname_id" || col.IndexOf("rqmtprimary") != -1 || col.IndexOf("rqmtnested") != -1)
                    {
                        rqmtRow = true;
                        break;
                    }
                }

                string[] ignoreColumns = new string[] { "ROW_ID", "RQMTPRIMARYNESTEDNUMBER_ID", "RQMTPRIMARYNESTEDNAME_ID" };
                if (rqmtRow)
                {
                    ignoreColumns = new string[] { "ROW_ID", "RQMTPRIMARYNESTEDNUMBER_ID", "RQMTPRIMARYNESTEDNAME_ID", "RQMTCRITICALITY_ID", "RQMTSTAGE_ID", "RQMTSTATUS_ID", "RQMTACCEPTED_ID" };
                }                

                List<string> idColumns = new List<string>();
                StringBuilder childBreakout = new StringBuilder();
                for (int x = 0; x < dt.Columns.Count; x++)
                {
                    string col = dt.Columns[x].ColumnName;

                    if (col.EndsWith("_ID") && !ignoreColumns.Contains(col))
                    {
                        idColumns.Add(col);
                        // to separate count columns from normal columns, we add _COUNTCOLUMN to the end (this helps us prevent "column has been specificed twice in query" if the user has added the same column name on the child level)
                        childBreakout.Append("<breakout><column>" + col + "_COUNTCOLUMN</column><sort>Ascending</sort></breakout>");
                    }
                }

                XmlDocument countColumnsDoc = new XmlDocument();
                countColumnsDoc.InnerXml = "<countcolumns>" + childBreakout.ToString() + "</countcolumns>";

                if (idColumns.Count > 0) // we don't do child counts if the parent columns aren't groupable (like plain text)
                {
                    XmlDocument childDocLevel = new XmlDocument();
                    XmlElement childRootLevel = (XmlElement)childDocLevel.AppendChild(childDocLevel.CreateElement("crosswalkparameters"));
                    XmlNode childNodeLevel = levels.SelectNodes("crosswalkparameters/level")[currentLevel];

                    // remove columns that should not be in the count mode

                    childNodeLevel.InnerXml = childBreakout.ToString() + childNodeLevel.InnerXml;


                    XmlNode childNodeImport = childDocLevel.ImportNode(childNodeLevel, true);
                    childRootLevel.AppendChild(childNodeImport);

                    DataTable childdt = RQMT.RQMT_Crosswalk_Multi_Level_Grid(level: childDocLevel, filter: docFilters, whereExts: docWhereExts, RQMTMode: NextLevelRQMTMode, CountColumns: countColumnsDoc);

                    if (childdt.Columns.Contains("Column1"))
                    {
                        dt.Columns.Add("Column1");
                        if (dt.Rows.Count > 0)
                        {
                            dt.Rows[0]["Column1"] = childdt.Rows[0][0];
                        }
                    }
                    else
                    {
                        // now that we have the child counts, insert them into the main dt
                        dt.Columns.Add("ChildCount");

                        // because the parameters may be different than the actual columns (WTS_SYSTEM MIGHT RETURN SYSTEM_ID), we need to get the actual columns in the data sets to compare to 
                        // (which will be all columns other than ChildCount in the childdt table)
                        List<string> columnsToCompare = new List<string>();
                        foreach (DataColumn col in childdt.Columns)
                        {
                            if (col.ColumnName != "ChildCount")
                            {
                                columnsToCompare.Add(col.ColumnName);
                            }
                        }

                        // we build a dictionary of results so that we don't have to loop through the childdt every row we look for
                        Dictionary<string, int> countsByKey = new Dictionary<string, int>();
                        foreach (DataRow childRow in childdt.Rows)
                        {
                            StringBuilder key = new StringBuilder();

                            foreach (string col in columnsToCompare)
                            {
                                key.Append(childRow[col] + "_");
                            }

                            countsByKey.Add(key.ToString(), childRow["ChildCount"] != null && childRow["ChildCount"] != DBNull.Value ? (int)childRow["ChildCount"] : 0);
                        }

                        // finally, insert the counts into each row!
                        foreach (DataRow dr in dt.Rows)
                        {
                            StringBuilder key = new StringBuilder();

                            foreach (string col in columnsToCompare)
                            {
                                string colNameToFind = col.Replace("_COUNTCOLUMN", "");
                                colNameToFind = colNameToFind.Replace("_COUNT_ID", "_ID");

                                key.Append(dr[colNameToFind] + "_");
                            }

                            if (countsByKey.ContainsKey(key.ToString()))
                            {
                                dr["ChildCount"] = countsByKey[key.ToString()];
                            }
                            else
                            {
                                dr["ChildCount"] = 0;
                            }
                        }
                    }
                }
            }

            Session["dtRQMT" + currentLevel] = dt;
        }

        return dt;
    }

    private void PreProcessData(DataTable dt)
    {        
        if (DCC.Contains("ChildCount"))
        {
            HidePlusSignInHeader = true;

            foreach (DataRow row in dt.Rows)
            {
                int cnt = Convert.ToInt32(row["ChildCount"]);

                if (cnt > 0)
                {
                    HidePlusSignInHeader = false;
                    break;
                }
            }
        }
    }

    public bool ExportData(DataTable dt) // normally, dt is empty, but we can send in a pre-processed dt as well
    {
        bool success = false;
        string errorMsg = string.Empty;

        try
        {
            if (dt != null) // we sent in a pre-generated data table
            {
                FormatExportColumns(dt);

                ExcelUtil.WriteDataTableToResponse(dt, Response);

                success = true;
            }
            else // we are doing a rescursive export of the data, with groups
            {
                // step 1, get ALL the data from the server using this custom crosswalk
                string allExportXML = "<crosswalkparameters>";

                allExportXML += "<level>";
                allExportXML += "  <breakout><column>RQMT Set Name</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>SYSTEM SUITE</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>System</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>Work Area</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>RQMT Type</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>RQMT Primary #</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>RQMT Primary</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>RQMT #</column><sort>Ascending</sort></breakout>";
                allExportXML += "  <breakout><column>RQMT</column><sort>Ascending</sort></breakout>";
                allExportXML += "</level>";
                allExportXML += "</crosswalkparameters>";

                RQMTMode = "";
                PrimaryRQMTLevel = 1;
                PrimaryRQMTNumberLevel = 1;

                XmlDocument levels = new XmlDocument();
                levels.InnerXml = allExportXML;

                DataTable allData = LoadData(1, levels, "");

                ExcelWorkbook wb = ExcelUtil.CreateExcelWorkbook();
                
                Worksheet ws = wb.GetWorksheet(0);


                success = true;
            }
        }
        catch (Exception ex)
        {
            success = false;
            errorMsg += Environment.NewLine + ex.Message;
        }

        return success;
    }

    private void ExportLevel(int currentLevel, XmlDocument levels, DataTable allData, Worksheet ws)
    {
    }

    private void FormatExportColumns(DataTable dt)
    {
        for (var i = dt.Columns.Count - 1; i >= 0; i--)
        {
            DataColumn col = dt.Columns[i];

            string name = col.ColumnName;

            if (name.EndsWith("_ID") || name.EndsWith("_EXCLUDEID") || name.EndsWith("_HDN") || name == "X" || name == "Y" || name == "Z")
            {
                dt.Columns.Remove(col);
            }

            if (name == "Outline Index")
            {
                col.ColumnName = "IDX";
            }

            if (name.EndsWith("_Number"))
            {
                col.ColumnName = col.ColumnName.Replace("_Number", " #");
            }

            if (name == "RQMT Type")
            {
                col.ColumnName = "Purpose";
            }
        }
    }
    #endregion

    #region Grid
    private void FormatHeaderRowDisplay(ref GridViewRow row, bool headerRow = true)
    {
        for (int i = 0; i < row.Cells.Count; i++)
        {
            if (DCC[i].ColumnName.EndsWith("_ID") || DCC[i].ColumnName.EndsWith("_EXCLUDEID"))
            {
                row.Cells[i].Style["display"] = "none";                
            }
        }

        if (DCC.Contains("X"))
        {
            row.Cells[DCC.IndexOf("X")].Text = "";
            row.Cells[DCC.IndexOf("X")].Style["width"] = "15px";
            row.Cells[DCC.IndexOf("X")].Style["text-align"] = "center";
            row.Cells[DCC.IndexOf("X")].Style["white-space"] = "nowrap";

            if (this.CurrentLevel > 1) row.Cells[DCC.IndexOf("X")].Style["border-left"] = "1px solid grey";
        }

        if (DCC.Contains("Y"))
        {
            if (DCC.Contains("RQMTSET_RQMTSYSTEM_ID") || DCC.Contains("PARENTRQMTSET_RQMTSYSTEM_ID"))
            {
                row.Cells[DCC.IndexOf("Y")].Text = "";
                row.Cells[DCC.IndexOf("Y")].Style["width"] = "15px";
            }
            else
            {
                row.Cells[DCC.IndexOf("Y")].Style["display"] = "none";
            }
        }


        if (DCC.Contains("Z")) row.Cells[DCC.IndexOf("Z")].Text = "";

        if (DCC.Contains("ChildCount")) row.Cells[DCC.IndexOf("ChildCount")].Style["display"] = "none";

        Dictionary<string, string> columns = new Dictionary<string, string>();
        columns["System Suite"] = "250px,left";
        columns["System"] = "250px,left";
        columns["Work Area"] = "250px,left";
        columns["Functionality"] = "150px,left";
        columns["RQMT Set Name"] = "250px,left";
        columns["RQMT Type"] = "250px,left";
        columns["Complexity"] = "50px,center";
        columns["Justification"] = "200px,left";
        columns["Set Complexity"] = "50px,center";
        columns["Set Justification"] = "200px,left";

        columns["RQMT Primary"] = "250px,left";
        columns["RQMT Primary #"] = "50px,center";

        columns["RQMT"] = "250px,left";
        columns["RQMT #"] = "50px,center";

        columns["Results"] = "80%,left";        

        columns["RQMT Status"] = "100px,left";
        columns["Criticality"] = "100px,left";
        columns["RQMT Stage"] = "100px,left";
        columns["Accepted"] = "50px,center";
        columns["Defects"] = "50px,center";
        columns["Outline Index"] = "50px,center";

        for (int m = 1; m <= 12; m++)
        {
            columns["Month_" + m] = "35px,center";
        }

        columns["Description"] = "500px,center";
        foreach (string colName in columns.Keys)
        {
            string[] dispArr = columns[colName].Split(',');

            if (DCC.Contains(colName))
            {
                TableCell cell = row.Cells[DCC.IndexOf(colName)];

                cell.Style["width"] = dispArr[0];
                cell.Style["text-align"] = dispArr[1];                
            }
        }

        for (int i = 0; i < DCC.Count; i++)
        {
            string col = DCC[i].ColumnName;

            if (col.ToLower().EndsWith("_hdn"))
            {
                row.Cells[i].Style["display"] = "none";
            }

            if (headerRow)
            {
                row.Cells[i].Style["white-space"] = "nowrap";
            }
        }
    }

    private void FormatRowDisplay(ref GridViewRow row)
    {
        FormatHeaderRowDisplay(ref row, false);
    }

    private void grdData_GridHeaderRowDataBound(object sender, GridViewRowEventArgs e)
    {
        GridViewRow row = e.Row;

        FormatHeaderRowDisplay(ref row);

        // HidePlusSignInHeader is TRUE if none of the elements have a child drilldown (we only check this for parent/child RQMTs)
        // We show the plus sign on individual rows EXCEPT except for breakouts showing a child rqmt or an uncategorized rqmt

        if (!HidePlusSignInHeader && CurrentLevel < LevelCount) {
            if (DCC.Contains("X")) row.Cells[DCC.IndexOf("X")].Controls.Add(CreateImage(true));
        }

        string[] columns = "Outline Index=IDX,RQMT Type=Purpose,Month_1=JAN,Month_2=FEB,Month_3=MAR,Month_4=APR,Month_5=MAY,Month_6=JUN,Month_7=JUL,Month_8=AUG,Month_9=SEP,Month_10=OCT,Month_11=NOV,Month_12=DEC".Split(',');
        for (int i = 0; i < columns.Length; i++)
        {
            string[] col = columns[i].Split('=');

            if (DCC.Contains(col[0].Trim())) {
                row.Cells[DCC.IndexOf(col[0].Trim())].Text = col[1].Trim();
            }
        }
    }

    private void grdData_GridRowDataBound(object sender, GridViewRowEventArgs e)
    {
        GridViewRow row = e.Row;
        DataRow dr = ((System.Data.DataRowView)row.DataItem).Row;

        int sysid = 0;
        int waid = 0;
        int rtid = 0;
        int rid = 0;
        int rpid = 0;
        // if we have rqmt by itself, or primary rqmt by itself, we use the one that is specified
        // if we have both on the same line, we are going to use the child rqmt
        int rqmtid = 0;

        GetRQMTValuesFromRow(dr, ref rid, ref rpid);
        GetRQMTSystemValuesFromFiltersOrRow(dr, ref sysid, ref waid, ref rtid);

        if (rid > 0)
        {
            rqmtid = rid;
        }
        else if (rpid > 0)
        {
            rqmtid = rpid;
        }

        FormatRowDisplay(ref row);

        // + image
        if (DCC.Contains("X"))
        {
            // show + img for most rows EXCEPT for rows where we are showing RQMTs and the RQMTs are not part of a set yet (there are no child items of these RQMTs)
            if (CurrentLevel < LevelCount)
            {
                row.Cells[DCC.IndexOf("X")].Controls.Add(CreateLiteral("&nbsp;"));
                
                if (DCC.Contains("ChildCount"))
                {
                    int cnt = 0;
                    Int32.TryParse(row.Cells[DCC.IndexOf("ChildCount")].Text, out cnt);

                    if (cnt > 0)
                    {
                        row.Cells[DCC.IndexOf("X")].Controls.Add(CreateImage(false));
                        row.Cells[DCC.IndexOf("X")].Controls.Add(CreateLiteral("&nbsp;(" + cnt.ToString() + ")"));
                    }
                }

                row.Cells[DCC.IndexOf("X")].Controls.Add(CreateLiteral("&nbsp;"));
            }
        }

        if (DCC.Contains("RQMT #"))
        {
            if (row.Cells[DCC.IndexOf("RQMT #")].Text == "0") row.Cells[DCC.IndexOf("RQMT #")].Text = "&nbsp;";
        }

        if (DCC.Contains("RQMT Primary #"))
        {
            if (row.Cells[DCC.IndexOf("RQMT Primary #")].Text == "0") row.Cells[DCC.IndexOf("RQMT Primary #")].Text = "&nbsp;";
        }

        if (DCC.Contains("RQMT #"))
        {
            if (row.Cells[DCC.IndexOf("RQMT #")].Text == "0") row.Cells[DCC.IndexOf("RQMT #")].Text = "&nbsp;";
        }

        if (DCC.Contains("Accepted"))
        {
            row.Cells[DCC.IndexOf("Accepted")].Text = row.Cells[DCC.IndexOf("Accepted")].Text == "1" ? "Yes" : "No";
        }

        // also note that the block below shows controls if sysid is > 0, which is good enough for RQMTSystem attributes, but NOT good enough for RQMTSet_RQMTSystem attributes (we need sys,wa,rt for that, which we handle in the following block)
        if ((rid > 0 || rpid > 0) && sysid > 0)
        {
            //Gather the ID's needed to save to RQMTSystem table
            string rplusysid = rqmtid + "_" + sysid;

            //Create dropdown for RQMT Status
            if (DCC.Contains("RQMTSTATUS_ID"))
            {
                row.Cells[DCC.IndexOf("RQMT Status")].Controls.Add(CreateDropDownList(dtRQMTAttribute, "RQMT Status", "RQMTAttribute", "RQMTAttributeID", row.Cells[DCC.IndexOf("RQMTSTATUS_ID")].Text, 80, "RQMT", false, "", rqmtid, sysid, waid, rtid));
                CanEditRQMSystemOrSet = true;
            }

            //Create dropdown for RQMT Status
            if (DCC.Contains("RQMTCRITICALITY_ID"))
            {
                row.Cells[DCC.IndexOf("Criticality")].Controls.Add(CreateDropDownList(dtRQMTAttribute, "Criticality", "RQMTAttribute", "RQMTAttributeID", row.Cells[DCC.IndexOf("RQMTCRITICALITY_ID")].Text, 80, "RQMT", false, "", rqmtid, sysid, waid, rtid));
                CanEditRQMSystemOrSet = true;
            }

            if (DCC.Contains("RQMTSTAGE_ID"))
            {
                row.Cells[DCC.IndexOf("RQMT Stage")].Controls.Add(CreateDropDownList(dtRQMTAttribute, "RQMT Stage", "RQMTAttribute", "RQMTAttributeID", row.Cells[DCC.IndexOf("RQMTSTAGE_ID")].Text, 80, "RQMT", false, "", rqmtid, sysid, waid, rtid));
                CanEditRQMSystemOrSet = true;
            }

            //Create Checkbox for Accepted
            if (DCC.Contains("Accepted"))
            {
                row.Cells[DCC.IndexOf("Accepted")].Controls.Add(CreateCheckBox("RQMT", "RQMTAccepted_ID", "RQMT Accepted", "RQMTAccepted_ID", row.Cells[DCC.IndexOf("Accepted")].Text, rqmtid, sysid, waid, rtid));
                CanEditRQMSystemOrSet = true;
            }

            //Create Link for Defects/Impacts
            if (DCC.Contains("Defects"))
            {
                row.Cells[DCC.IndexOf("Defects")].Controls.Add(createHTMLLink("RQMTDefects", rplusysid, row.Cells[DCC.IndexOf("Defects")].Text));
                CanEditRQMSystemOrSet = true;
            }
        }

        // this block is suitable for attributes that need a full rqmtset_rqmtsystemid
        if ((rid > 0 || rpid > 0) && sysid > 0 && waid > 0 && rtid > 0)
        {
            //Gather the ID's needed to save to RQMTSystem table
            string rplusyswartid = rqmtid + "_" + sysid + "_" + waid + "_" + rtid;

            if (DCC.Contains("Month_1"))
            {
                CanEditRQMSystemOrSet = true;
                for (int m = 1; m <= 12; m++)
                {
                    if (DCC.Contains("Month_" + m))
                    {
                        bool monthChecked = dr["Month_" + m] != DBNull.Value && dr["Month_" + m].ToString().ToUpper() == "TRUE";

                        row.Cells[DCC.IndexOf("Month_" + m)].Controls.Clear();
                        row.Cells[DCC.IndexOf("Month_" + m)].Controls.Add(CreateCheckBox("RQMT", "Month_" + m, "Month_" + m, "Month_" + m, monthChecked.ToString().ToUpper(), rqmtid, sysid, waid, rtid));
                    }
                }
            }
        }

        // the items below could only happen on non-rqmt rows, or possibly rqmt set rows (we generally don't allow editing at these levels)
        if ((rid == 0 && rpid == 0))
        {
            if (sysid > 0 && waid > 0 && rtid > 0)
            {
                if (DCC.Contains("Month_1"))
                {
                    for (int m = 1; m <= 12; m++)
                    {
                        if (DCC.Contains("Month_" + m))
                        {
                            bool monthChecked = dr["Month_" + m] != DBNull.Value && (dr["Month_" + m].ToString().ToUpper() == "TRUE" || dr["Month_" + m].ToString().ToUpper() == "YES" || dr["Month_" + m].ToString().ToUpper() == "1");

                            row.Cells[DCC.IndexOf("Month_" + m)].Controls.Clear();
                            row.Cells[DCC.IndexOf("Month_" + m)].Controls.Add(CreateCheckBox("Other", "Month_" + m, "Month_" + m, "Month_" + m, monthChecked.ToString().ToUpper(), 0, sysid, waid, rtid));
                        }
                    }
                }

                if (DCC.Contains("RQMTSETCOMPLEXITY_ID"))
                {
                    CanEditRQMSystemOrSet = true;
                    row.Cells[DCC.IndexOf("Set Complexity")].Controls.Clear();
                    row.Cells[DCC.IndexOf("Set Complexity")].Controls.Add(CreateDropDownList(dtRQMTComplexity, "RQMTSetComplexity", "RQMTComplexity", "RQMTComplexityID", row.Cells[DCC.IndexOf("RQMTSETCOMPLEXITY_ID")].Text, 80, "RQMT", false, "", rqmtid, sysid, waid, rtid));
                }

                if (DCC.Contains("RQMTSETCOMPLEXITYJUSTIFICATION_ID"))
                {
                    CanEditRQMSystemOrSet = true;
                    string text = row.Cells[DCC.IndexOf("Set Justification")].Text;
                    row.Cells[DCC.IndexOf("Set Justification")].Controls.Clear();
                    row.Cells[DCC.IndexOf("Set Justification")].Controls.Add(CreateTextBox("RQMT", "RQMTSetJustification", "RQMTSetJustification", text, false, rqmtid, sysid, waid, rtid));
                }
            }
        }
        
        for (int i = 0; i < row.Cells.Count; i++)
        {
            if (DCC[i].ColumnName.EndsWith("_ID"))
            {
                string txt = row.Cells[i].Text;

                if (string.IsNullOrWhiteSpace(txt) || txt == "&nbsp;")
                {
                    txt = "0";
                }

                row.Attributes[DCC[i].ColumnName] = txt;
            }
        }

        row.Attributes["systemid"] = sysid.ToString();
        row.Attributes["workareaid"] = waid.ToString();
        row.Attributes["rqmttypeid"] = rtid.ToString();
        row.Attributes["rqmtid"] = rqmtid.ToString();
    }

    private HtmlInputCheckBox CreateCheckBox(string typeName, string valueColumn, string field, string attrName, string attrValue, int rqmtid, int sysid, int waid, int rtid)
    {
        HtmlInputCheckBox chk = new HtmlInputCheckBox();

        chk.Attributes["typeName"] = typeName;
        chk.Attributes["typeID"] = valueColumn;
        chk.Attributes["field"] = field;
        
        chk.Attributes["rqmtid"] = rqmtid.ToString();
        chk.Attributes["systemid"] = sysid.ToString();
        chk.Attributes["workareaid"] = waid.ToString();
        chk.Attributes["rqmttypeid"] = rtid.ToString();

        if (typeName == "Other")
        {
            chk.Attributes["onchange"] = "";
            chk.Disabled = true;
        }
        else
        {
            chk.Attributes["onchange"] = "input_change(this);";
        }

        var isChecked = false;
        if (attrValue != null) {
            attrValue = attrValue.ToUpper();
            if (attrValue == "YES" || attrValue == "TRUE" || attrValue == "1")
            {
                isChecked = true;
            }
        }
        chk.Checked = isChecked;

        return chk;
    }

    private Image CreateImage(bool isHeader)
    {
        Image img = new Image();

        if (isHeader)
        {
            img.Attributes["src"] = "Images/Icons/add_blue.png";
            img.Attributes["title"] = "Expand";
            img.Attributes["alt"] = "Expand";
            img.Attributes["onclick"] = "displayAllRows(this);";
        }
        else {
            img.Attributes["src"] = "Images/Icons/add_blue.png";
            img.Attributes["title"] = "Expand";
            img.Attributes["alt"] = "Expand";
            img.Attributes["onclick"] = "displayNextRow(this);";
        }

        img.Attributes["height"] = "12";
        img.Attributes["width"] = "12";
        img.Style["cursor"] = "pointer";

        return img;
    }

    private TextBox CreateTextBox(string typeName, string typeID, string field, string value, bool isNumber, int rqmtid, int sysid, int waid, int rtid)
    {
        string txtValue = Server.HtmlDecode(Uri.UnescapeDataString(value)).Trim();
        TextBox txt = new TextBox();

        txt.Text = txtValue;
        txt.MaxLength = 50;
        txt.Width = new Unit(field == "Sort" ? 90 : 95, UnitType.Percentage);
        txt.Attributes["class"] = "saveable";
        txt.Attributes["onkeyup"] = "input_change(this);";
        txt.Attributes["onpaste"] = "input_change(this);";
        txt.Attributes["onblur"] = "txtBox_blur(this);";
        txt.Attributes.Add("typeName", typeName);
        txt.Attributes.Add("typeID", typeID);
        txt.Attributes.Add("field", field);
        txt.Attributes.Add("original_value", txtValue);
        txt.Attributes["rqmtid"] = rqmtid.ToString();
        txt.Attributes["systemid"] = sysid.ToString();
        txt.Attributes["workareaid"] = waid.ToString();
        txt.Attributes["rqmttypeid"] = rtid.ToString();

        if (isNumber)
        {
            txt.MaxLength = 5;
            txt.Style["text-align"] = "center";
        }

        return txt;
    }

    private Literal CreateLiteral(string str)
    {
        Literal literal = new Literal();
        literal.Text = str;

        return literal;
    }

    private DropDownList CreateDropDownList(DataTable dt, string field, string textColumn, string valueColumn, string selectedValue, int maxWidth, 
        string typeName, bool allowBlankValue, string onChange, int rqmtid, int sysid, int waid, int rtid)
    {
        DropDownList ddl = new DropDownList();
        ddl.Attributes.Add("field", field);
        ddl.Attributes.Add("typeID", valueColumn);
        ddl.Attributes.Add("typeName", typeName);

        ddl.Attributes["rqmtid"] = rqmtid.ToString();
        ddl.Attributes["systemid"] = sysid.ToString();
        ddl.Attributes["workareaid"] = waid.ToString();
        ddl.Attributes["rqmttypeid"] = rtid.ToString();

        ListItem liBlank = new ListItem();
        liBlank.Text = "";
        liBlank.Value = "-1";
        ddl.Items.Add(liBlank);
        
        if (maxWidth > 0)
        {
            ddl.Style["width"] = maxWidth + "px";
        }

        if (!string.IsNullOrWhiteSpace(onChange))
        {
            ddl.Attributes["onchange"] = onChange;
        }

        if (textColumn == "RQMTAttribute")
        {
            dt.DefaultView.RowFilter = "RQMTAttributeType = '" + field + "'";
            dt = dt.DefaultView.ToTable();
        }

        foreach (DataRow row in dt.Rows)
        {
            string rowText = row[textColumn] != DBNull.Value ? Convert.ToString(row[textColumn]) : "";
            string rowValue = row[valueColumn] != DBNull.Value ? Convert.ToString(row[valueColumn]) : "";

            ListItem li = new ListItem();

            if (string.IsNullOrWhiteSpace(rowValue) || rowValue == "0" || rowValue == "-1")
            {
                if (allowBlankValue)
                {
                    li.Text = rowText;
                    li.Value = rowValue;

                    if (string.IsNullOrWhiteSpace(selectedValue) || selectedValue == "0" || selectedValue == "-1")
                    {
                        li.Selected = true;
                    }

                    ddl.Items.Add(li);
                }
            }
            else
            {
                li.Text = rowText;
                li.Value = rowValue;

                if (rowValue == selectedValue)
                {
                    li.Selected = true;
                }

                ddl.Items.Add(li);
            }            
        }

        //If column has no value, set dropdown selected value to the liBlank
        if (selectedValue == "&nbsp;" || string.IsNullOrWhiteSpace(selectedValue))
        {
            ddl.SelectedValue = "-1";
        }

        //Add onChange event for saving
        ddl.Attributes["onchange"] = "input_change(this);";

        return ddl;
    }

    private LinkButton createHTMLLink(string columnName, string id, string name)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendFormat("lblEdit_click('{0}', '{1}');return false;", id, name);

        LinkButton lb = new LinkButton();
        lb.ID = string.Format("lblEdit_{0}", id);
        lb.Attributes["name"] = string.Format("lblEdit_{0}", id);
        lb.Text = name;
        lb.Attributes.Add("Onclick", sb.ToString());

        return lb;
    }
    #endregion

    #region Excel

    private void ExportExcel(DataTable dtRaw, string filters)
    {
        DataTable dt = new DataTable();
        DataSet ds = new DataSet();
        DataSet dsCopy = new DataSet();
        DataTable dtCopy = new DataTable();
        
        LevelCount = Levels.SelectNodes("crosswalkparameters/level").Count;
        Workbook wb = new Workbook(FileFormatType.Xlsx);
        Worksheet ws = wb.Worksheets[0];
        wb.Worksheets.Add();
        Worksheet wsRaw = wb.Worksheets[1];
        XmlDocument docLevel = new XmlDocument();
        XmlElement rootLevel = (XmlElement)docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
        var myLevels = Levels.SelectNodes("crosswalkparameters/level");
        int tblCnt = 0;
        int level = 0;
        foreach (XmlNode nodeLevel in myLevels)
        {
            level++;

            if (RQMTLevel != -1 && PrimaryRQMTLevel != -1 && RQMTLevel == PrimaryRQMTLevel) // #4
            {
                RQMTMode = "combined";
            }
            else if (PrimaryRQMTLevel != -1 && RQMTLevel != -1 && PrimaryRQMTLevel < RQMTLevel) // #3
            {
                if (level <= PrimaryRQMTLevel)
                {
                    RQMTMode = "rqmttops";
                }
                else
                {
                    RQMTMode = "rqmtbottomsexclusive";
                }
            }
            else if (PrimaryRQMTLevel != -1 && RQMTLevel == -1) // #2 RQMT PRIMARY (top level rqmts, which includes anything at level 1)
            {
                RQMTMode = "rqmttops";
            }
            else if (RQMTLevel != -1 && PrimaryRQMTLevel == -1) // 1 RQMT (bottom level rqmts, includes level 2 and level 1's without children since those are considered bottom as well)
            {
                RQMTMode = "rqmtbottoms";
            }

            if (RQMTSetUsageLevel == level)
            {
                RQMTMode = "combined";
            }

            XmlNode nodeImport = docLevel.ImportNode(nodeLevel, true);
            rootLevel.AppendChild(nodeImport);

            XmlDocument docFilters = new XmlDocument();
            XmlElement rootFilters = (XmlElement)docFilters.AppendChild(docFilters.CreateElement("filters"));

            XmlDocument docWhereExts = new XmlDocument();
            XmlElement rootWhereExts = (XmlElement)docWhereExts.AppendChild(docWhereExts.CreateElement("whereexts"));

            if (filters != string.Empty)
            {
                string[] arrFilter = filters.Split('|');

                for (int j = 0; j < arrFilter.Length; j++)
                {
                    XmlElement filter = docFilters.CreateElement("filter");
                    XmlElement field = docFilters.CreateElement("field");
                    XmlElement value = docFilters.CreateElement("id");
                    string[] arrValues = arrFilter[j].Split('=');

                    field.InnerText = arrValues[0].ToString();
                    value.InnerText = (arrValues[1].ToString().Trim() == "" ? "0" : arrValues[1].ToString().Trim());

                    filter.AppendChild(field);
                    filter.AppendChild(value);
                    rootFilters.AppendChild(filter);
                }
            }

            if (this.WhereExt != string.Empty)
            {
                string[] arrFilter = this.WhereExt.Split('|');

                for (int j = 0; j < arrFilter.Length; j++)
                {
                    XmlElement whereExt = docWhereExts.CreateElement("whereext");
                    XmlElement field = docWhereExts.CreateElement("field");
                    XmlElement value = docWhereExts.CreateElement("id");
                    string[] arrValues = arrFilter[j].Split('=');

                    field.InnerText = arrValues[0].ToString();
                    value.InnerText = (arrValues[1].ToString().Trim() == "" ? "0" : arrValues[1].ToString().Trim());

                    whereExt.AppendChild(field);
                    whereExt.AppendChild(value);
                    rootWhereExts.AppendChild(whereExt);
                }
            }

            XDocument xDoc = XDocument.Parse(docLevel.InnerXml);
            // Remove all duplicate XML elements
            xDoc.Descendants("breakout")
                            .GroupBy(g => (string)g.Element("column"))
                            .SelectMany(g => g.Skip(1))
                            .Remove();

            XmlDocument docLevel2 = new XmlDocument();

            docLevel2.InnerXml = xDoc.ToString();

            dt = RQMT.RQMT_Crosswalk_Multi_Level_Grid(level: docLevel2, filter: docFilters, whereExts: docWhereExts, RQMTMode: RQMTMode, CountColumns: null);
            
            foreach (DataColumn c in dt.Columns.Cast<DataColumn>().ToList())
            {
                //c.ColumnName.ToString().Contains("_ID") || 
                if (c.ColumnName.ToString() == "X" || c.ColumnName.ToString() == "Y" || c.ColumnName.ToString() == "Z" || c.ColumnName.ToString().Contains("_HDN"))
                {
                    dt.Columns.Remove(c.ColumnName);
                }
            }

            var colNames = (from dc in dt.Columns.Cast<DataColumn>() select dc.ColumnName).Where(x => x != "X" && x != "Y" && x != "Z" && x.IndexOf("_ID", StringComparison.Ordinal) == -1).ToList();

            tblCnt += 1;

            string tblName = "'" + tblCnt;
            dt.TableName = tblName;
            ds.Tables.Add(dt);


        }

        //int dtRowCount = 0;
        int count = ds.Tables.Count;
        object[] filterCols = new object[0];
        object[] curfilterCols = new object[0];

        dtColumnCnt = 0;
        int colCnt = 0;
        for (int k = 0; k < ds.Tables.Count; k++)
        {
            if (colCnt > dtColumnCnt)
            {
                dtColumnCnt = colCnt;
            }
            colCnt = 0;
            if (k > 0)
            {
                foreach (DataColumn column in ds.Tables[k].Columns)
                {

                    if (column.ToString().EndsWith("_ID") || column.ToString().EndsWith("_HDN"))
                    {

                    }
                    else
                    {
                        int blnKeep = 1;
                        for (int n = 0; n < ds.Tables[k - 1].Columns.Count; n++)
                        {
                            if (ds.Tables[k - 1].Columns[n] != null)
                            {
                                if (ds.Tables[k - 1].Columns[n].ToString() == column.ToString())
                                {
                                    blnKeep = 0;
                                }
                            }
                        }
                        if (blnKeep == 1)
                        {
                            colCnt++;
                        }
                    }
                }
            }
        }
        //ws.AutoFitColumns();
        AddRowsColumns(ws, 0, 0, filterCols, curfilterCols, ds.Tables[0], ds, 0);

        wsRaw.Cells.ImportDataTable(dtRaw, true, 0, 0, false, false);

        MemoryStream ms = new MemoryStream();
        wb.Save(ms, SaveFormat.Xlsx);

        Response.ContentType = "application/xlsx";
        Response.AddHeader("content-disposition", "attachment; filename=" + "RQMT Grid" + ".xlsx");
        Response.BinaryWrite(ms.ToArray());

        Response.End();
    }

    private void AddRowsColumns(Worksheet ws, int startRow, int endRow, object[] remFilterCols, object[] curfilterCols, DataTable dt, DataSet ds, int count)
    {
        count++;
        string curCell = "";
        int curP = 0;
        Aspose.Cells.Style curStyle = new Aspose.Cells.Style();
        StyleFlag flag = new StyleFlag() { All = true };
        if (count > ds.Tables.Count)
        {

        }
        else
        {
            DataSet newDS = ds.Copy();
            DataTable dtFiltered = dt.Copy();
            string rowFilter = "";
            for (int j = 0; j < curfilterCols.Length; j++)
            {
                if (rowFilter == "")
                {
                    rowFilter = curfilterCols[j].ToString();
                }
                else
                {
                    if (curfilterCols[j].ToString() != "")
                    {
                        rowFilter = rowFilter + " and " + curfilterCols[j];
                    }
                }
            }
            DataView dv = dt.DefaultView;
            dv.RowFilter = rowFilter;
            dtFiltered = dv.ToTable();

            object[] removeFilterCols = new object[dtFiltered.Columns.Count];
            foreach (DataColumn column in dtFiltered.Columns)
            {
                if (column.ToString().EndsWith("_ID") || column.ToString().EndsWith("_HDN"))
                {

                }
                else
                {
                    removeFilterCols[column.Ordinal] = column.ToString();
                }
            }

            for (int n = 0; n < remFilterCols.Length; n++)
            {
                if (remFilterCols[n] != null)
                {
                    if (dtFiltered.Columns.Contains(remFilterCols[n].ToString()))
                    {
                        dtFiltered.Columns.Remove(remFilterCols[n].ToString());
                    }

                }
            }

            if (count != 2)
            {
                rowCount++;
            }
            int m = 0;
            int curColCnt = 0;
            foreach (DataColumn column in dtFiltered.Columns)
            {

                if (column.ToString().EndsWith("_ID") || column.ToString().EndsWith("_HDN"))
                {

                }
                else
                {
                    //int blnKeep = 1;
                    //for (int n = 0; n < remFilterCols.Length; n++)
                    //{
                    //    if (remFilterCols[n] != null)
                    //    {
                    //        if (remFilterCols[n].ToString() == column.ToString())
                    //        {
                    //            blnKeep = 0;
                    //        }
                    //    }
                    //}
                    //if (blnKeep == 1)
                    //{
                    curColCnt++;
                    if (count != 2)
                    {
                        string cellName = "";
                        char uniSel = (char)(uniA + m);
                        cellName = (char)uniSel + "";
                        if (m > 26)
                        {
                            cellName = (char)(uniA + 0) + "" + (char)uniSel;
                        }
                        if (m > 52)
                        {
                            cellName = (char)(uniA + 1) + "" + (char)uniSel;
                        }
                        cellName = cellName + (rowCount).ToString();
                        curCell = cellName;
                        curP = m;

                        string val = column.ToString();
                        if (val == "RQMT Type")
                        {
                            val = "Purpose";
                        }
                        else if (val == "Workload Group")
                        {
                            val = "Functionality";
                        }
                        else if (val.StartsWith("Month_"))
                        {
                            int month = Int32.Parse(val.Substring(6));
                            DateTime monthDT = DateTime.Now;
                            DateTime.TryParse(month + "/1/2018", out monthDT);
                            val = monthDT.ToString("MMM").Substring(0, 3).ToUpper();
                        }
                        ws.Cells[cellName].PutValue(val);
                        // Getting the Style object for the cell
                        Aspose.Cells.Style headerStyle = new Aspose.Cells.Style();

                        // Setting Style properties like border, alignment etc.
                        headerStyle.SetBorder(BorderType.TopBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        headerStyle.SetBorder(BorderType.BottomBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        headerStyle.SetBorder(BorderType.LeftBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        headerStyle.SetBorder(BorderType.RightBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        headerStyle.Pattern = BackgroundType.Solid;
                        headerStyle.Font.Name = "Calibri";
                        headerStyle.Font.Size = 11;
                        switch (count)
                        {
                            case 1:
                                headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#F4B084");
                                headerStyle.Font.IsBold = true;
                                break;
                            case 2:
                                headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#0070C0");
                                headerStyle.Font.Color = System.Drawing.Color.White;
                                headerStyle.Font.IsBold = true;
                                break;
                            case 3:
                                headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#C9C9C9");
                                break;
                            case 4:
                                headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#BDD7EE");
                                break;
                            default:
                                headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#EDEDED");
                                break;
                        }
                        // Setting the style of the cell with the customized Style object
                        curStyle = headerStyle;
                        ws.Cells[cellName].SetStyle(headerStyle);
                        m++;
                    }
                    //}

                }
            }
            if (count != 2)
            {
                if (curColCnt == 1)
                {

                    string cellName = "";
                    char uniSel = (char)(uniA + dtColumnCnt - 1);
                    cellName = (char)uniSel + "";
                    if (dtColumnCnt - 1 > 26)
                    {
                        cellName = (char)(uniA + 0) + "" + (char)uniSel;
                    }
                    if (dtColumnCnt - 1 > 52)
                    {
                        cellName = (char)(uniA + 1) + "" + (char)uniSel;
                    }
                    cellName = cellName + (rowCount).ToString();
                    // Create a range
                    Range range = ws.Cells.CreateRange(curCell + ":" + cellName);
                    range.ApplyStyle(curStyle, flag);

                    // Merge range into a single cell
                    range.Merge();
                }
            }

            dtRowCount += endRow;
            foreach (DataRow row in dtFiltered.Rows)
            {
                int startCnt = 0;

                object[] newfilterCols = new object[dtFiltered.Columns.Count];
                //object[] removeFilterCols = new object[dtFiltered.Columns.Count];
                //filterCols = curfilterCols;
                if (count == 2)
                {
                    rowCount++;
                    int p = 0;
                    foreach (DataColumn column in dtFiltered.Columns)
                    {

                        if (column.ToString().EndsWith("_ID") || column.ToString().EndsWith("_HDN"))
                        {

                        }
                        else
                        {
                            //    int blnKeep = 1;
                            //    for (int q = 0; q < remFilterCols.Length; q++)
                            //    {
                            //        if (remFilterCols[q] != null)
                            //        {
                            //            if (remFilterCols[q].ToString() == column.ToString())
                            //            {
                            //                blnKeep = 0;
                            //            }
                            //        }
                            //    }
                            //    if (blnKeep == 1)
                            //    {
                            string cellName = "";
                            char uniSel = (char)(uniA + p);
                            cellName = (char)uniSel + "";
                            if (p > 26)
                            {
                                cellName = (char)(uniA + 0) + "" + (char)uniSel;
                            }
                            if (p > 52)
                            {
                                cellName = (char)(uniA + 1) + "" + (char)uniSel;
                            }
                            cellName = cellName + (rowCount).ToString();
                            curCell = cellName;
                            curP = p;

                            string val = column.ToString();

                            if (val.StartsWith("Month_"))
                            {
                                int month = Int32.Parse(column.ToString().Substring(6));
                                DateTime monthDT = DateTime.Now;
                                DateTime.TryParse(month + "/1/2018", out monthDT);
                                val = monthDT.ToString("MMM").Substring(0, 3).ToUpper();
                            }                            

                            ws.Cells[cellName].PutValue(val);
                            // Getting the Style object for the cell
                            Aspose.Cells.Style headerStyle = new Aspose.Cells.Style();

                            // Setting Style properties like border, alignment etc.
                            headerStyle.SetBorder(BorderType.TopBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.SetBorder(BorderType.BottomBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.SetBorder(BorderType.LeftBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.SetBorder(BorderType.RightBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.Pattern = BackgroundType.Solid;
                            headerStyle.Font.Name = "Calibri";
                            headerStyle.Font.Size = 11;
                            switch (count)
                            {
                                case 1:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#F4B084");
                                    headerStyle.Font.IsBold = true;
                                    break;
                                case 2:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#0070C0");
                                    headerStyle.Font.Color = System.Drawing.Color.White;
                                    headerStyle.Font.IsBold = true;
                                    break;
                                case 3:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#C9C9C9");
                                    break;
                                case 4:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#BDD7EE");
                                    break;
                                default:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#EDEDED");
                                    break;
                            }
                            curStyle = headerStyle;
                            // Setting the style of the cell with the customized Style object
                            ws.Cells[cellName].SetStyle(headerStyle);
                            p++;
                        }
                        //    }
                    }
                }
                if (count == 2)
                {
                    if (curColCnt == 1)
                    {

                        string cellName = "";
                        char uniSel = (char)(uniA + dtColumnCnt - 1);
                        cellName = (char)uniSel + "";
                        if (dtColumnCnt - 1 > 26)
                        {
                            cellName = (char)(uniA + 0) + "" + (char)uniSel;
                        }
                        if (dtColumnCnt - 1 > 52)
                        {
                            cellName = (char)(uniA + 1) + "" + (char)uniSel;
                        }
                        cellName = cellName + (rowCount).ToString();
                        // Create a range
                        Range range = ws.Cells.CreateRange(curCell + ":" + cellName);
                        range.ApplyStyle(curStyle, flag);

                        // Merge range into a single cell
                        range.Merge();
                    }
                }
                startCnt = rowCount;
                rowCount++;
                int i = 0;
                foreach (DataColumn column in dtFiltered.Columns)
                {
                    object item = row[column];

                    if (column.ToString().EndsWith("_ID"))
                    {
                        //if (count > 1)
                        //{
                        var colObj = " isnull([" + column.ToString() + "], 0) =  '" + (item.ToString() == "" ? "0" : item.ToString()) + "'";
                        newfilterCols[column.Ordinal] = colObj;
                        //}
                    }
                    else
                    {
                        //removeFilterCols[column.Ordinal] = column.ToString();
                        newfilterCols[column.Ordinal] = "";
                        //int blnKeepThis = 1;
                        //for (int n = 0; n < remFilterCols.Length; n++)
                        //{
                        //    if (remFilterCols[n] != null)
                        //    {
                        //        if (remFilterCols[n].ToString() == column.ToString())
                        //        {
                        //            blnKeepThis = 0;
                        //        }
                        //    }
                        //}
                        //if (blnKeepThis == 1)
                        //{
                        //string cellName = (char)(uniA + i) + (rowCount).ToString();
                        //ws.Cells[cellName].PutValue(item.ToString());
                        string cellName = "";
                        char uniSel = (char)(uniA + i);
                        cellName = (char)uniSel + "";
                        if (i > 26)
                        {
                            cellName = (char)(uniA + 0) + "" + (char)uniSel;
                        }
                        if (i > 52)
                        {
                            cellName = (char)(uniA + 1) + "" + (char)uniSel;
                        }
                        cellName = cellName + (rowCount).ToString();
                        curCell = cellName;
                        curP = i;

                        string itemVal = item.ToString();

                        if (itemVal != null && itemVal.ToUpper() == "TRUE" || itemVal.ToUpper() == "FALSE")
                        {
                            itemVal = itemVal != null && itemVal.ToString().ToUpper() == "TRUE" ? "1" : "";
                        }

                        ws.Cells[cellName].PutValue(Uri.UnescapeDataString(itemVal));
                        // Getting the Style object for the cell
                        Aspose.Cells.Style style = new Aspose.Cells.Style();
                        style.SetBorder(BorderType.TopBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        style.SetBorder(BorderType.BottomBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        style.SetBorder(BorderType.LeftBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        style.SetBorder(BorderType.RightBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                        style.Pattern = BackgroundType.Solid;
                        style.Font.Name = "Calibri";
                        style.Font.Size = 11;
                        style.VerticalAlignment = TextAlignmentType.Top;
                        switch (count)
                        {
                            case 1:
                                style.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#F4B084");
                                style.Font.IsBold = true;
                                break;
                            case 3:
                                style.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#EDEDED");
                                break;
                        }
                        //if (column.ToString().Contains("Description") || column.ToString().Contains("Title") || column.ToString().Contains("Notes") || column.ToString().Contains("Rationale") || column.ToString().Contains("Customer Impact"))
                        if (Uri.UnescapeDataString(item.ToString()).Length > 50)
                        {
                            // Setting Style properties like border, alignment etc.
                            style.IsTextWrapped = true;
                            // Setting the style of the cell with the customized Style object
                            ws.Cells.SetColumnWidth(i, 50);
                        }
                        else
                        {
                            //ws.AutoFitColumn(i);
                        }
                        curStyle = style;
                        ws.Cells[cellName].SetStyle(style);
                        i++;
                        //}
                    }


                }
                if (curColCnt == 1)
                {
                    string cellName = "";
                    char uniSel = (char)(uniA + dtColumnCnt - 1);
                    cellName = (char)uniSel + "";
                    if (dtColumnCnt - 1 > 26)
                    {
                        cellName = (char)(uniA + 0) + "" + (char)uniSel;
                    }
                    if (dtColumnCnt - 1 > 52)
                    {
                        cellName = (char)(uniA + 1) + "" + (char)uniSel;
                    }
                    cellName = cellName + (rowCount).ToString();
                    // Create a range
                    Range range = ws.Cells.CreateRange(curCell + ":" + cellName);
                    range.ApplyStyle(curStyle, flag);

                    // Merge range into a single cell
                    range.Merge();
                }
                if (count < ds.Tables.Count)
                {
                    AddRowsColumns(ws, startCnt, dtFiltered.Rows.Count + 1, removeFilterCols, newfilterCols, ds.Tables[count], newDS, count);

                }
                if (startCnt > 0)
                {
                    if (count != ds.Tables.Count)
                    {
                        if (ws.Cells.MaxDataRow >= startCnt + 1 && ws.Cells.MaxDataRow >= rowCount - 1)
                        {
                            ws.Cells.GroupRows(startCnt + 1, rowCount - 1, false);
                        }
                    }
                }
            }

            // Setting SummaryRowBelow property to false
            ws.Outline.SummaryRowBelow = false;
            // ws.Cells.SetColumnWidth(5, 255);
        }

        //}
    }
    #endregion

    #region AJAX
    [WebMethod()]
    public static string DeleteRQMTs(string rqmts)
    {
        Dictionary<string, string> result = new Dictionary<string, string>() { { "deleted", "" }, { "error", "" } };
        bool deleted = false;
        string errorMsg = string.Empty;

        string lastDeleteID = "";

        try
        {
            string[] rqmtArr = rqmts.Split(',');

            foreach (string id in rqmtArr)
            {
                lastDeleteID = id;
                deleted = RQMT.RQMTSet_DeleteRQMT(0, 0, Int32.Parse(id), true);
            }
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);

            deleted = false;
            errorMsg = "Error deleting RQMT " + lastDeleteID + ". " + ex.Message;
        }

        result["deleted"] = deleted.ToString();
        result["error"] = errorMsg;

        return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
    }

    [WebMethod()]
    public static string SaveChanges(string changes)
    {
        Dictionary<string, string> result = new Dictionary<string, string>() { { "saved", "" }, { "error", "" } };
        bool saved = false;
        string errorMsg = string.Empty;
        StringBuilder output = new StringBuilder();

        try
        {
            XmlDocument docChanges = (XmlDocument)JsonConvert.DeserializeXmlNode(changes, "changes");            

            saved = RQMT.RQMT_Update(Changes: docChanges, Output: output);
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);

            saved = false;
            errorMsg = ex.Message;            
        }

        result["saved"] = saved.ToString();
        result["error"] = errorMsg;
        result["output"] = output.ToString();

        return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
    }

    [WebMethod(EnableSession = true)]
    public static bool UpdateSession(string ddlIndex, string ddlText, string sectionsXml)
    {
        var sessionMethods = new SessionMethods();
        sessionMethods.Session["RQMT_CurrentXML"] = sectionsXml;
        sessionMethods.Session["RQMT_CurrentDropDown"] = ddlIndex;
        sessionMethods.Session["RQMT_GridView"] = ddlText;
        sessionMethods.Session["RQMT_GridView_Default"] = ddlText;

        if (sectionsXml != "")
        {
            XmlDocument xml = new XmlDocument();
            xml.LoadXml(sectionsXml);
            sessionMethods.Session["RQMT_Levels"] = xml;
        }
        return true;
    }
    #endregion
}