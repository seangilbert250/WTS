using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Web;
using System.Web.Script.Services;
using System.Web.Script.Serialization;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

using Newtonsoft.Json;
using Aspose.Cells;
using System.IO;
using WTS.Util;
using System.Xml;

public partial class RQMTDefectsImpact_Grid : System.Web.UI.Page
{
    #region "Variables"
    protected int RQMT_ID = -1;
    protected int SYSTEM_ID = -1;

    protected DataColumnCollection DCC;
    protected GridCols columnData = new GridCols();

    protected bool _refreshData = false;
    protected bool _export = false;

    protected string SortableColumns;
    protected string SortOrder;
    protected string DefaultColumnOrder;
    protected string SelectedColumnOrder;
    protected string ColumnOrder;

    protected bool CanView = false;
    protected bool CanEdit = false;
    protected bool IsAdmin = false;

    protected DataTable dtRQMTAttribute;

    #endregion

    #region "Page Methods"
    [WebMethod(true)]
    public static string SaveChanges(string changes, string strRQMT_ID, string strSYSTEM_ID)
    {
        Dictionary<string, string> result = new Dictionary<string, string>() { { "saved", "" }, { "ids", "" }, { "error", "" } };
        bool exists = false, saved = false;
        string ids = string.Empty, errorMsg = string.Empty, tempMsg = string.Empty;

        try
        {
            int intRQMT_ID = 0;
            int intSYSTEM_ID = 0;

            int.TryParse(strRQMT_ID, out intRQMT_ID);
            int.TryParse(strSYSTEM_ID, out intSYSTEM_ID);

            DataTable dtjson = (DataTable)JsonConvert.DeserializeObject(changes, (typeof(DataTable)));
            foreach (DataRow dr in dtjson.Rows)
            {
                int drRQMTSystemDefectID = 0;
                int drVerified = 0;
                int drResolved = 0;
                int drContinueToReview = 0;
                int drRQMTAttributeID = 0;

                int.TryParse(dr["RQMTSystemDefectID"].ToString(), out drRQMTSystemDefectID);
                int.TryParse(dr["Verified"].ToString(), out drVerified);
                int.TryParse(dr["Resolved"].ToString(), out drResolved);
                int.TryParse(dr["ContinueToReview"].ToString(), out drContinueToReview);
                int.TryParse(dr["RQMTAttribute"].ToString(), out drRQMTAttributeID);

                saved = RQMT.RQMTDefectsImpact_Save(intRQMTID: intRQMT_ID, intSYSTEMID: intSYSTEM_ID, intRQMTSystemDefectID: drRQMTSystemDefectID, strDescription: dr["Description"].ToString(), intVerified: drVerified, intResolved: drResolved, intContinueToReview: drContinueToReview, intRQMTAttributeID: drRQMTAttributeID);
            }
                //saved = RQMT.RQMTDefectsImpact_Save(Changes: docChanges);
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);
            saved = false;
            errorMsg = ex.Message;
        }

        result["saved"] = saved.ToString();
        result["error"] = errorMsg;

        return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
    }

    [WebMethod(true)]
    public static string DeleteItem(string strRQMTSystemDefectID)
    {
        Dictionary<string, string> result = new Dictionary<string, string>() { { "saved", "" }, { "ids", "" }, { "error", "" } };
        bool exists = false, deleted = false;
        string ids = string.Empty, errorMsg = string.Empty, tempMsg = string.Empty;

        try
        {
            int rqmtSystemDefectID = 0;
            int.TryParse(strRQMTSystemDefectID, out rqmtSystemDefectID);

            deleted = RQMT.RQMTDefectsImpact_Delete(intRQMTSystemDefectID: rqmtSystemDefectID);
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);
            deleted = false;
            errorMsg = ex.Message;
        }

        result["deleted"] = deleted.ToString();
        result["error"] = errorMsg;

        return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
    }
    #endregion

    #region "Page_Load"
    protected void Page_Load(object sender, EventArgs e)
    {
        this.IsAdmin = UserManagement.UserIsInRole("Admin");
        this.CanEdit = UserManagement.UserCanEdit(WTSModuleOption.MasterData);
        this.CanView = (CanEdit || UserManagement.UserCanView(WTSModuleOption.MasterData));

        ReadQueryString();
        initControls();

        //Gather RQMTAttribute data for dropdown(s)
        if (Session["RQMTAttribute_Get"] == null)
        {
            dtRQMTAttribute = RQMT.RQMTAttribute_Get();
            Session["RQMTAttribute_Get"] = dtRQMTAttribute;
        }
        else
        {
            dtRQMTAttribute = (DataTable)Session["RQMTAttribute_Get"];
        }

        DataTable dt = new DataTable();
        dt = LoadData();

        grdData.DataSource = dt;
        grdData.DataBind();
    }

    private void ReadQueryString()
    {
        if (Request.QueryString["RQMT_ID"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["RQMT_ID"]))
        {
            int.TryParse(Request.QueryString["RQMT_ID"], out this.RQMT_ID);
        }
        if (Request.QueryString["SYSTEM_ID"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["SYSTEM_ID"]))
        {
            int.TryParse(Request.QueryString["SYSTEM_ID"], out this.SYSTEM_ID);
        }
    }

    private void initControls()
    {
        grdData.GridHeaderRowDataBound += grdData_GridHeaderRowDataBound;
        grdData.GridRowDataBound += grdData_GridRowDataBound;
        grdData.GridPageIndexChanging += grdData_GridPageIndexChanging;
    }
    #endregion

    #region "Load Data"
    private DataTable LoadData()
    {
        DataTable dt = new DataTable();
        dt = RQMT.RQMTDefectsImpact_Get(intRQMT_ID: RQMT_ID, intSYSTEM_ID: SYSTEM_ID);
        
        this.DCC = dt.Columns;
        Page.ClientScript.RegisterArrayDeclaration("_dcc", JsonConvert.SerializeObject(DCC, Newtonsoft.Json.Formatting.None));

        InitializeColumnData(ref dt);
        dt.AcceptChanges();

        return dt;
    }

    protected void InitializeColumnData(ref DataTable dt)
    {
        try
        {
            string displayName = string.Empty, groupName = string.Empty;
            bool blnVisible = false, blnSortable = false, blnOrderable = false;

            foreach (DataColumn gridColumn in dt.Columns)
            {
                displayName = gridColumn.ColumnName;
                blnVisible = false;
                blnSortable = false;
                blnOrderable = false;
                groupName = string.Empty;

                switch (gridColumn.ColumnName)
                {
                    case "X":
                        displayName = "&nbsp;";
                        blnVisible = true;
                        break;
                    case "RQMTSystemDefectID":
                        displayName = "RQMTSystemDefectID";
                        blnVisible = false;
                        blnSortable = false;
                        break;
                    case "RQMTSystemID":
                        displayName = "RQMTSystemID";
                        blnVisible = false;
                        blnSortable = false;
                        break;
                    case "Description":
                        displayName = "Description";
                        blnVisible = true;
                        break;
                    case "Verified":
                        displayName = "Verified";
                        blnVisible = true;
                        break;
                    case "Resolved":
                        displayName = "Resolved";
                        blnVisible = true;
                        break;
                    case "ContinueToReview":
                        displayName = "Continue To Review";
                        blnVisible = true;
                        break;
                    case "ImpactID":
                        displayName = "ImpactID";
                        blnVisible = false;
                        break;
                    case "RQMTAttribute":
                        displayName = "Impact";
                        blnVisible = true;
                        blnSortable = true;
                        break;
                    case "CreatedBy":
                        displayName = "Created By";
                        blnVisible = true;
                        break;
                    case "CreatedDate":
                        displayName = "Created Date";
                        blnVisible = true;
                        break;
                    case "UpdatedBy":
                        displayName = "Updated By";
                        blnVisible = true;
                        break;
                    case "UpdatedDate":
                        displayName = "Updated Date";
                        blnVisible = true;
                        break;
                    case "Y":
                        displayName = "&nbsp;";
                        blnVisible = true;
                        break;
                }

                columnData.Columns.Add(gridColumn.ColumnName, displayName, blnVisible, blnSortable);
                columnData.Columns.Item(columnData.Columns.Count - 1).CanReorder = blnOrderable;
            }

            //Initialize the columnData
            columnData.Initialize(ref dt, ";", "~", "|");

            //Get sortable columns and default column order
            SortableColumns = columnData.SortableColumnsToString();
            DefaultColumnOrder = columnData.DefaultColumnOrderToString();
            //Sort and Reorder Columns
            columnData.ReorderDataTable(ref dt, ColumnOrder);
            columnData.SortDataTable(ref dt, SortOrder);
            SelectedColumnOrder = columnData.CurrentColumnOrderToString();

        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);
        }
    }

    #endregion

    #region Grid

    void grdData_GridHeaderRowDataBound(object sender, GridViewRowEventArgs e)
    {
        columnData.SetupGridHeader(e.Row);
        GridViewRow row = e.Row;
        formatColumnDisplay(ref row);
    }

    void grdData_GridRowDataBound(object sender, GridViewRowEventArgs e)
    {
        columnData.SetupGridBody(e.Row);
        GridViewRow row = e.Row;
        formatColumnDisplay(ref row);

        string itemId = row.Cells[DCC.IndexOf("RQMTSystemDefectID")].Text.Trim();
        //if (itemId == "0" || itemId == "&nbsp;")
        //{
        //    row.Style["display"] = "none";
        //}
        row.Attributes.Add("itemID", itemId);

        row.Cells[DCC["X"].Ordinal].Controls.Add(CreateGridDeleteButton(row.Cells[DCC.IndexOf("RQMTSystemDefectID")].Text));

        row.Cells[DCC["Description"].Ordinal].Controls.Add(CreateGridTextBox("Description", itemId, Server.HtmlDecode(row.Cells[DCC.IndexOf("Description")].Text.Trim()), false, true));

        //Create Checkbox for Verified, Resolved, Continue To Review
        if (DCC.Contains("Verified"))
        {
            row.Cells[DCC.IndexOf("Verified")].Controls.Add(CreateCheckBox("Verified", row.Cells[DCC.IndexOf("Verified")].Text, itemId));
        }
        if (DCC.Contains("Resolved"))
        {
            row.Cells[DCC.IndexOf("Resolved")].Controls.Add(CreateCheckBox("Resolved", row.Cells[DCC.IndexOf("Resolved")].Text, itemId));
        }
        if (DCC.Contains("ContinueToReview"))
        {
            row.Cells[DCC.IndexOf("ContinueToReview")].Controls.Add(CreateCheckBox("ContinueToReview", row.Cells[DCC.IndexOf("ContinueToReview")].Text, itemId));
        }

        //Create dropdown for Impact
        if (DCC.Contains("ImpactID"))
        {
            row.Cells[DCC.IndexOf("RQMTAttribute")].Controls.Add(CreateDropDownList(dtRQMTAttribute, "Impact", "RQMTAttribute", "RQMTAttributeID", row.Cells[DCC.IndexOf("ImpactID")].Text, 80, itemId, "RQMTSystemDefect"));
        }
    }

    void grdData_GridPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        grdData.PageIndex = e.NewPageIndex;
        if (HttpContext.Current.Session["dtDefectsImpact"] == null)
        {
            LoadData();
        }
        else
        {
            grdData.DataSource = (DataTable)HttpContext.Current.Session["dtDefectsImpact"];
        }
    }

    void formatColumnDisplay(ref GridViewRow row)
    {
        //for (int i = 0; i < row.Cells.Count; i++)
        //{
        //    if (i != DCC.IndexOf("X")
        //        && i != DCC.IndexOf("PriorityID")
        //        && i != DCC.IndexOf("WorkRequest_Count")
        //        && i != DCC.IndexOf("WorkItem_Count")
        //        && i != DCC.IndexOf("SORT_ORDER")
        //        && i != DCC.IndexOf("ARCHIVE"))
        //    {
        //        row.Cells[i].Style["text-align"] = "left";
        //        row.Cells[i].Style["padding-left"] = "5px";
        //    }
        //    else
        //    {
        //        row.Cells[i].Style["text-align"] = "center";
        //        row.Cells[i].Style["padding-left"] = "0px";
        //    }
        //}

        ////more column formatting
        //row.Cells[DCC.IndexOf("X")].Style["width"] = "12px";
        //row.Cells[DCC.IndexOf("PriorityType")].Style["width"] = "95px";
        //row.Cells[DCC.IndexOf("Priority")].Style["width"] = "75px";
        //row.Cells[DCC.IndexOf("WorkRequest_Count")].Style["width"] = "75px";
        //row.Cells[DCC.IndexOf("WorkItem_Count")].Style["width"] = "75px";
        //row.Cells[DCC.IndexOf("SORT_ORDER")].Style["width"] = "75px";
        //row.Cells[DCC.IndexOf("ARCHIVE")].Style["width"] = "55px";
    }
    Image CreateGridDeleteButton(string itemId)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendFormat("imgDelete_click('{0}');return false;", itemId);

        string imgUrl = "";
        imgUrl += "Images/Icons/delete.png";

        Image imgDelete = new Image();
        imgDelete.Style["cursor"] = "pointer";
        imgDelete.Height = 12;
        imgDelete.Width = 12;
        imgDelete.ImageUrl = imgUrl;
        imgDelete.ID = string.Format("imgDelete_{0}", itemId);
        imgDelete.Attributes["name"] = string.Format("imgDelete_{0}", itemId);
        imgDelete.Attributes.Add("itemId", itemId.ToString());
        imgDelete.AlternateText = "Delete Item";
        imgDelete.Attributes.Add("Onclick", sb.ToString());

        return imgDelete;
    }
    LinkButton createEditLink(string itemId = "", string item = "")
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendFormat("lbEdit_click('{0}');return false;", itemId);

        LinkButton lb = new LinkButton();
        lb.ID = string.Format("lbEdit_{0}", itemId);
        lb.Attributes["name"] = string.Format("lbEdit_{0}", itemId);
        lb.ToolTip = string.Format("Edit Item [{0}]", item);
        lb.Text = item;
        lb.Attributes.Add("Onclick", sb.ToString());

        return lb;
    }
    TextBox CreateGridTextBox(string field, string itemId, string text, bool isNumber = false, bool multiLine = false)
    {
        TextBox txt = new TextBox();

        if (multiLine)
        {
            txt.Wrap = true;
            txt.TextMode = TextBoxMode.MultiLine;
        }

        txt.ID = string.Format("txt{0}_{1}", field.Trim().Replace(" ", ""), itemId);
        txt.Text = HttpUtility.HtmlDecode(Uri.UnescapeDataString(text));
        txt.Attributes.Add("field", field);
        txt.Attributes.Add("RQMTSystemDefectID", itemId);
        txt.Attributes.Add("original_value", text);
        //txt.Attributes.Add("onblur", "txtDescr_onblur(this);");
        txt.Attributes["name"] = txt.ID;
        txt.Style["width"] = "300px";
        txt.Style["background-color"] = "#F5F6CE";
        txt.Style["font-family"] = "arial";
        txt.Style["font-size"] = "12px";
        if (isNumber)
        {
            txt.Style["text-align"] = "right";
            txt.TextMode = TextBoxMode.Number;
            txt.Style["width"] = "90%";
        }

        return txt;
    }
    HtmlInputCheckBox CreateCheckBox(string columnName, string columnValue, string rqmtSystemDefectID = "")
    {
        HtmlInputCheckBox chk = new HtmlInputCheckBox();

        chk.Attributes["columnName"] = columnName;
        chk.Attributes["RQMTSystemDefectID"] = rqmtSystemDefectID;
        //chk.Attributes["onchange"] = "input_change(this);";
        chk.Attributes["field"] = columnName;
        var isChecked = false;
        if (columnValue != "")
        {
            if ((Convert.ToInt16(columnValue) == 1)) { isChecked = true; }
            chk.Checked = isChecked;
        }
        return chk;
    }

    private DropDownList CreateDropDownList(DataTable dt, string field, string textColumn, string valueColumn, string selectedValue, int maxWidth, string rqmtSystemDefectID = "",
        string typeName = "", bool allowBlankValue = true, string onChange = "")
    {
        DropDownList ddl = new DropDownList();
        ddl.Attributes.Add("field", field);
        ddl.Attributes.Add("typeID", valueColumn);
        ddl.Attributes.Add("typeName", typeName);

        ddl.Attributes.Add("RQMTSystemDefectID", rqmtSystemDefectID);

        ListItem liBlank = new ListItem();
        liBlank.Text = "";
        liBlank.Value = "-1";
        ddl.Items.Add(liBlank);

        if (maxWidth > 0)
        {
            ddl.Style["width"] = maxWidth + "px";
        }

        dt.DefaultView.RowFilter = "RQMTAttributeType = '" + field + "'";
        dt = dt.DefaultView.ToTable();

        foreach (DataRow row in dt.Rows)
        {
            string rowText = row[textColumn] != DBNull.Value ? Convert.ToString(row[textColumn]) : "";
            string rowValue = row[valueColumn] != DBNull.Value ? Convert.ToString(row[valueColumn]) : "";

            ListItem li = new ListItem();

            if (string.IsNullOrWhiteSpace(rowValue) || rowValue == "0" || rowValue == "-1")
            {
                if (allowBlankValue)
                {
                    li.Text = rowText;
                    li.Value = rowValue;

                    if (string.IsNullOrWhiteSpace(selectedValue) || selectedValue == "0" || selectedValue == "-1")
                    {
                        li.Selected = true;
                    }

                    ddl.Items.Add(li);
                }
            }
            else
            {
                li.Text = rowText;
                li.Value = rowValue;

                if (rowValue == selectedValue)
                {
                    li.Selected = true;
                }

                ddl.Items.Add(li);
            }
        }

        //If column has no value, set dropdown selected value to the liBlank
        if (selectedValue == "&nbsp;" || string.IsNullOrWhiteSpace(selectedValue))
        {
            ddl.SelectedValue = "-1";
        }

        return ddl;
    }
    #endregion Grid
}