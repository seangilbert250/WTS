using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Web;
using System.Data.SqlTypes;
using System.Xml;

/// <summary>
/// Summary description for MasterData
/// </summary>
public sealed class MasterData
{

    #region System Suite
    public static DataTable SystemSuiteList_Get(int includeArchive = 1)
    {
        DataSet ds = new DataSet();
        string procName = "WTS_SYSTEM_SUITELIST_Get";

        using (DataTable dt = new DataTable("SystemSuite"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@IncludeArchive", SqlDbType.NVarChar).Value = includeArchive;
                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }
    public static bool systemSuite_Add(
        string systemSuite
        , string description
        , int sortOrder
        , bool archive
        , out bool exists
        , out int newID
        , out string errorMsg)
    {
        exists = false;
        newID = 0;
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "WTS_SYSTEM_SUITE_ADD";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@Suite", SqlDbType.NVarChar).Value = systemSuite;
                cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

                try
                {
                    cmd.ExecuteNonQuery();

                    SqlParameter paramExists = cmd.Parameters["@exists"];
                    if (paramExists != null)
                    {
                        bool.TryParse(paramExists.Value.ToString(), out exists);
                        saved = false;
                    }
                    SqlParameter paramNewID = cmd.Parameters["@newID"];
                    if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
                    {
                        saved = true;
                    }
                }
                catch (Exception ex)
                {
                    saved = false;
                    errorMsg = ex.Message;
                    LogUtility.LogException(ex);
                }
            }
        }

        return saved;
    }

    public static bool SystemSuite_Update(int WTS_SYSTEM_SUITEID
        , string systemSuite
        , string description
        , int sortOrder
        , bool archive
        , out string errorMsg)
    {
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "WTS_SYSTEM_SUITE_UPDATE";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEM_SUITEID", SqlDbType.Int).Value = WTS_SYSTEM_SUITEID;
                cmd.Parameters.Add("@WTS_SYSTEM_SUITE", SqlDbType.NVarChar).Value = systemSuite;
                cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                try
                {
                    cmd.ExecuteNonQuery();

                    SqlParameter paramSaved = cmd.Parameters["@saved"];
                    if (paramSaved != null)
                    {
                        bool.TryParse(paramSaved.Value.ToString(), out saved);
                    }
                }
                catch (Exception ex)
                {
                    saved = false;
                    errorMsg = ex.Message;
                    LogUtility.LogException(ex);
                }
            }
        }

        return saved;
    }

    public static bool SystemSuite_Delete(int WTS_SYSTEM_SUITEID
        , out bool exists
        , out bool hasDependencies
        , out bool archived
        , out string errorMsg)
    {
        exists = false;
        hasDependencies = false;
        archived = false;
        errorMsg = string.Empty;
        bool deleted = false;

        string procName = "WTS_SYSTEM_SUITE_DELETE";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEM_SUITEID", SqlDbType.Int).Value = WTS_SYSTEM_SUITEID;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    if (!exists)
                    {
                        hasDependencies = false;
                        archived = false;
                        errorMsg = "System Suite record could not be found.";
                        return false;
                    }
                }
                SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
                if (paramHasDependencies != null)
                {
                    bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
                    if (hasDependencies)
                    {
                        errorMsg = "System Suite record has dependencies and could not be permanently deleted. It has been archived instead.";
                        deleted = false;
                    }
                }
                SqlParameter paramDeleted = cmd.Parameters["@deleted"];
                if (paramDeleted != null)
                {
                    bool.TryParse(paramDeleted.Value.ToString(), out deleted);
                }
                SqlParameter paramArchived = cmd.Parameters["@archived"];
                if (paramArchived != null)
                {
                    bool.TryParse(paramArchived.Value.ToString(), out archived);
                    if (archived)
                    {
                        deleted = false;
                    }
                }
            }
        }

        return deleted;
    }
    #endregion

    #region Item Type
    public static DataTable ItemTypeList_Get()
    {
        DataSet ds = new DataSet();
        string procName = "ItemTypeList_Get";

        using (DataTable dt = new DataTable("ItemType"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    public static bool ItemType_Add(
        string itemType
        , string description
        , int sortOrder
        , bool archive
        , out bool exists
        , out int newID
        , out string errorMsg)
    {
        exists = false;
        newID = 0;
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "ItemType_Add";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ItemType", SqlDbType.NVarChar).Value = itemType;
                cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@SortOrder", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

                try
                {
                    cmd.ExecuteNonQuery();

                    SqlParameter paramExists = cmd.Parameters["@exists"];
                    if (paramExists != null)
                    {
                        bool.TryParse(paramExists.Value.ToString(), out exists);
                        saved = false;
                    }
                    SqlParameter paramNewID = cmd.Parameters["@newID"];
                    if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
                    {
                        saved = true;
                    }
                }
                catch (Exception ex)
                {
                    saved = false;
                    errorMsg = ex.Message;
                    LogUtility.LogException(ex);
                }
            }
        }

        return saved;
    }
    public static bool ItemType_Update(int WORKITEMTYPEID
    , string itemType
    , string description
    , int sortOrder
    , bool archive
    , out string errorMsg)
    {
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "ItemType_Update";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ItemTypeID", SqlDbType.Int).Value = WORKITEMTYPEID;
                cmd.Parameters.Add("@ItemType", SqlDbType.NVarChar).Value = itemType;
                cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@SortOrder", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                try
                {
                    cmd.ExecuteNonQuery();

                    SqlParameter paramSaved = cmd.Parameters["@saved"];
                    if (paramSaved != null)
                    {
                        bool.TryParse(paramSaved.Value.ToString(), out saved);
                    }
                }
                catch (Exception ex)
                {
                    saved = false;
                    errorMsg = ex.Message;
                    LogUtility.LogException(ex);
                }
            }
        }

        return saved;
    }
    public static bool ItemType_Delete(int WORKITEMTYPEID
    , out bool exists
    , out bool hasDependencies
    , out bool archived
    , out string errorMsg)
    {
        exists = false;
        hasDependencies = false;
        archived = false;
        errorMsg = string.Empty;
        bool deleted = false;

        string procName = "ItemType_Delete";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@TypeID", SqlDbType.Int).Value = WORKITEMTYPEID;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    if (!exists)
                    {
                        hasDependencies = false;
                        archived = false;
                        errorMsg = "Work Activity record could not be found.";
                        return false;
                    }
                }
                SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
                if (paramHasDependencies != null)
                {
                    bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
                    if (hasDependencies)
                    {
                        errorMsg = "Work Activity record has dependencies and could not be permanently deleted. It has been archived instead.";
                        deleted = false;
                    }
                }
                SqlParameter paramDeleted = cmd.Parameters["@deleted"];
                if (paramDeleted != null)
                {
                    bool.TryParse(paramDeleted.Value.ToString(), out deleted);
                }
                SqlParameter paramArchived = cmd.Parameters["@archived"];
                if (paramArchived != null)
                {
                    bool.TryParse(paramArchived.Value.ToString(), out archived);
                    if (archived)
                    {
                        deleted = false;
                    }
                }
            }
        }

        return deleted;
    }
    #endregion Item Type
    #region Allocation Category

    /// <summary>
    /// Load Allocation Category Items
    /// </summary>
    /// <returns>Datatable of Allocation Items</returns>
    public static DataTable AllocationCategoryList_Get(bool includeArchive = false)
	{
		DataSet ds = new DataSet();
		string procName = "AllocationCategoryList_Get";

		using (DataTable dt = new DataTable("AllocationCategory"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Allocation Category record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool AllocationCategory_Add(
		string category
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "AllocationCategory_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@AllocationCategory", SqlDbType.NVarChar).Value = category;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramExists = cmd.Parameters["@exists"];
					if (paramExists != null)
					{
						bool.TryParse(paramExists.Value.ToString(), out exists);
						saved = false;
					}
					SqlParameter paramNewID = cmd.Parameters["@newID"];
					if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
					{
						saved = true;
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Allocation Category record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool AllocationCategory_Update(int allocationCategoryID
		, string category
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "AllocationCategory_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@AllocationCategoryID", SqlDbType.Int).Value = allocationCategoryID;
				cmd.Parameters.Add("@AllocationCategory", SqlDbType.NVarChar).Value = category;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramSaved = cmd.Parameters["@saved"];
					if (paramSaved != null)
					{
						bool.TryParse(paramSaved.Value.ToString(), out saved);
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Allocation Category record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool AllocationCategory_Delete(int allocationCategoryID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "AllocationCategory_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@AllocationCategoryID", SqlDbType.Int).Value = allocationCategoryID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Allocation record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Allocation record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Allocation Category


	#region Allocation

	/// <summary>
	/// Load Allocation Items
	/// </summary>
	/// <returns>Datatable of Allocation Items</returns>
	public static DataSet AllocationList_Get(bool includeArchive = false)
	{
		DataSet ds = new DataSet();
		string procName = "AllocationList_Get";

		using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			cn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, cn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

				SqlDataAdapter da = new SqlDataAdapter(cmd);
				da.TableMappings.Add("Table", "Allocation");
				da.TableMappings.Add("Table1", "Category");
                da.TableMappings.Add("Table2", "Group");

                da.Fill(ds);
			}
		}

		return ds;
	}

    public static DataTable WTS_Resource_Get(bool includeArchive = false)
    {
        DataSet ds = new DataSet();
        string procName = "WTS_Resource_Get";

        using (DataTable dt = new DataTable("Resources"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    try
                    {
                        cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }

    }

    public static DataTable WTS_ResourceDevelopers_Get(int IsDeveloper = 2, int IsBusAnalyst = 2, int IsAMCGEO = 2, int IsCASUser = 2, int IsALODUser = 2)
    {
        DataSet ds = new DataSet();
        string procName = "WTS_ResourceDevelopers_Get";

        using (DataTable dt = new DataTable("Resources"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@IsDeveloper", SqlDbType.Int).Value = IsDeveloper; 
                    cmd.Parameters.Add("@IsBusAnalyst", SqlDbType.Int).Value = IsBusAnalyst;
                    cmd.Parameters.Add("@IsAMCGEO", SqlDbType.Int).Value = IsAMCGEO;
                    cmd.Parameters.Add("@IsCASUser", SqlDbType.Int).Value = IsCASUser;
                    cmd.Parameters.Add("@IsALODUser", SqlDbType.Int).Value = IsALODUser;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }

    }

    /// <summary>
    /// Update specified Allocation record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool AllocationGroup_Assignment_Update(
        int allocationID
        , string allocation
        , string description
        , int sortOrder
        , bool archive
        , int defaultSMEID
        , int defaultAssignedToID
        , int defaultBusinessResourceID
        , int defaultTechnicalResourceID
        , out string errorMsg)
    {
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "AllocationGroup_Assignment_Update";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ALLOCATIONID", SqlDbType.Int).Value = allocationID;
                cmd.Parameters.Add("@ALLOCATION", SqlDbType.NVarChar).Value = allocation;
                cmd.Parameters.Add("@DESCRIPTION", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@SORT_ORDER", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@ARCHIVE", SqlDbType.Bit).Value = archive ? 1 : 0;
                cmd.Parameters.Add("@UPDATEDBY", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
                cmd.Parameters.Add("@DefaultSMEID", SqlDbType.Int).Value = defaultSMEID == 0 ? (object)DBNull.Value : defaultSMEID;
                cmd.Parameters.Add("@DefaultAssignedToID", SqlDbType.Int).Value = defaultAssignedToID == 0 ? (object)DBNull.Value : defaultAssignedToID;
                cmd.Parameters.Add("@DefaultBusinessResourceID", SqlDbType.Int).Value = defaultBusinessResourceID == 0 ? (object)DBNull.Value : defaultBusinessResourceID;
                cmd.Parameters.Add("@DefaultTechnicalResourceID", SqlDbType.Int).Value = defaultTechnicalResourceID == 0 ? (object)DBNull.Value : defaultTechnicalResourceID;
                

                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                try
                {
                    cmd.ExecuteNonQuery();

                    SqlParameter paramSaved = cmd.Parameters["@saved"];
                    if (paramSaved != null)
                    {
                        bool.TryParse(paramSaved.Value.ToString(), out saved);
                    }
                }
                catch (Exception ex)
                {
                    saved = false;
                    errorMsg = ex.Message;
                    LogUtility.LogException(ex);
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Add new Allocation record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool AllocationGroup_Assignment_Add(
        string allocationID
        , string description
        , int sortOrder
        , bool archive
        , int defaultSMEID
        , int defaultBusinessResourceID
        , int defaultTechnicalResourceID
        , int defaultAssignedToID
        , int AllocationGroupID
        , out bool exists
        , out int newID
        , out string errorMsg)
    {
        exists = false;
        newID = 0;
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "WTS_AllocationGroup_Assignment_Add";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ALLOCATIONID", SqlDbType.NVarChar).Value = allocationID;
                cmd.Parameters.Add("@DESCRIPTION", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@SORT_ORDER", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@ARCHIVE", SqlDbType.Bit).Value = archive ? 1 : 0;
                cmd.Parameters.Add("@UPDATEDBY", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
                cmd.Parameters.Add("@DefaultSMEID", SqlDbType.Int).Value = defaultSMEID == 0 ? (object)DBNull.Value : defaultSMEID;
                cmd.Parameters.Add("@DefaultBusinessResourceID", SqlDbType.Int).Value = defaultBusinessResourceID == 0 ? (object)DBNull.Value : defaultBusinessResourceID;
                cmd.Parameters.Add("@DefaultTechnicalResourceID", SqlDbType.Int).Value = defaultTechnicalResourceID == 0 ? (object)DBNull.Value : defaultTechnicalResourceID;
                cmd.Parameters.Add("@DefaultAssignedToID", SqlDbType.Int).Value = defaultAssignedToID == 0 ? (object)DBNull.Value : defaultAssignedToID;
                cmd.Parameters.Add("@ALLOCATIONGROUPID", SqlDbType.Int).Value = AllocationGroupID;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

                try
                {
                    cmd.ExecuteNonQuery();

                    SqlParameter paramExists = cmd.Parameters["@exists"];
                    if (paramExists != null)
                    {
                        bool.TryParse(paramExists.Value.ToString(), out exists);
                        saved = false;
                    }
                    SqlParameter paramNewID = cmd.Parameters["@newID"];
                    if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
                    {
                        saved = true;
                    }
                }
                catch (Exception ex)
                {
                    saved = false;
                    errorMsg = ex.Message;
                    LogUtility.LogException(ex);
                }
            }
        }

        return saved;
    }

    public static bool WTS_System_Add(
    string WTS_System
    , string description
    , int sortOrder
    , out bool exists
    , out int newID)
    {
        exists = false;
        newID = 0;
        bool saved = false;

        string procName = "WTS_System_Add";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_System", SqlDbType.NVarChar).Value = WTS_System;
                cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

                try
                {
                    cmd.ExecuteNonQuery();

                    SqlParameter paramExists = cmd.Parameters["@exists"];
                    if (paramExists != null)
                    {
                        bool.TryParse(paramExists.Value.ToString(), out exists);
                        saved = false;
                    }
                    SqlParameter paramNewID = cmd.Parameters["@newID"];
                    if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
                    {
                        saved = true;
                    }
                }
                catch (Exception ex)
                {
                    saved = false;
                    LogUtility.LogException(ex);
                }
            }
        }

        return saved;
    }


    /// <summary>
    /// Add new Allocation record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool Allocation_Add(
		int categoryID
        , int groupID
		, string allocation
		, string description
		, int defaultAssignedToID
		, int defaultSMEID
		, int defaultBusinessResourceID
		, int defaultTechnicalResourceID
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Allocation_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@AllocationCategoryID", SqlDbType.Int).Value = categoryID == 0 ? (object)DBNull.Value : categoryID;
                cmd.Parameters.Add("@AllocationGroupID", SqlDbType.Int).Value = groupID == 0 ? (object)DBNull.Value : groupID;
                cmd.Parameters.Add("@Allocation", SqlDbType.NVarChar).Value = allocation;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@DefaultAssignedToID", SqlDbType.Int).Value = defaultAssignedToID == 0 ? (object)DBNull.Value : defaultAssignedToID;
				cmd.Parameters.Add("@DefaultSMEID", SqlDbType.Int).Value = defaultSMEID == 0 ? (object)DBNull.Value : defaultSMEID;
				cmd.Parameters.Add("@DefaultBusinessResourceID", SqlDbType.Int).Value = defaultBusinessResourceID == 0 ? (object)DBNull.Value : defaultBusinessResourceID;
				cmd.Parameters.Add("@DefaultTechnicalResourceID", SqlDbType.Int).Value = defaultTechnicalResourceID == 0 ? (object)DBNull.Value : defaultTechnicalResourceID;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramExists = cmd.Parameters["@exists"];
					if (paramExists != null)
					{
						bool.TryParse(paramExists.Value.ToString(), out exists);
						saved = false;
					}
					SqlParameter paramNewID = cmd.Parameters["@newID"];
					if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
					{
						saved = true;
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Allocation record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Allocation_Update(int allocationID
		, int categoryID
        , int groupID
        , string allocation
		, string description
		, int defaultAssignedToID
		, int defaultSMEID
		, int defaultBusinessResourceID
		, int defaultTechnicalResourceID
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Allocation_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@AllocationCategoryID", SqlDbType.Int).Value = categoryID == 0 ? (object)DBNull.Value : categoryID;
                cmd.Parameters.Add("@AllocationGroupID", SqlDbType.Int).Value = groupID == 0 ? (object)DBNull.Value : groupID;
                cmd.Parameters.Add("@AllocationID", SqlDbType.Int).Value = allocationID;
				cmd.Parameters.Add("@Allocation", SqlDbType.NVarChar).Value = allocation;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@DefaultAssignedToID", SqlDbType.Int).Value = defaultAssignedToID == 0 ? (object)DBNull.Value : defaultAssignedToID;
				cmd.Parameters.Add("@DefaultSMEID", SqlDbType.Int).Value = defaultSMEID == 0 ? (object)DBNull.Value : defaultSMEID;
				cmd.Parameters.Add("@DefaultBusinessResourceID", SqlDbType.Int).Value = defaultBusinessResourceID == 0 ? (object)DBNull.Value : defaultBusinessResourceID;
				cmd.Parameters.Add("@DefaultTechnicalResourceID", SqlDbType.Int).Value = defaultTechnicalResourceID == 0 ? (object)DBNull.Value : defaultTechnicalResourceID;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramSaved = cmd.Parameters["@saved"];
					if (paramSaved != null)
					{
						bool.TryParse(paramSaved.Value.ToString(), out saved);
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Allocation record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Allocation_Delete(int allocationID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "Allocation_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@AllocationID", SqlDbType.Int).Value = allocationID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Allocation record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Allocation record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Allocation

    /// <summary>
    /// Load Allocation Category Items
    /// </summary>
    /// <returns>Datatable of Allocation Items</returns>
    public static DataTable ALLOCATION_GETALL()
    {
        DataSet ds = new DataSet();
        string procName = "WTS_ALLOCATION_GETALL";

        using (DataTable dt = new DataTable("ALLOCATION"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }


    /// <summary>
    /// Load Allocation Get All Unused Items, 'Null values in WTS_SYSTEMID
    /// </summary>
    /// <returns>Datatable of Allocation Items</returns>
    public static DataTable Allocation_Get_All_Unused()
    {
        DataSet ds = new DataSet();
        string procName = "Allocation_Get_All_Unused";

        using (DataTable dt = new DataTable("Allocation_Get_All_Unused"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }


    /// <summary>
    /// Load Allocation Category Items
    /// </summary>
    /// <returns>Datatable of Allocation Items</returns>
    public static DataTable AllocationGroup_Assignment_Get(int parentID)
    {
        DataSet ds = new DataSet();
        string procName = "WTS_AllocationGroup_Assignment_Get";

        using (DataTable dt = new DataTable("AllocationGroup_Assignment"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@AllocationGroupID ", SqlDbType.Int).Value = parentID;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    #region Allocation - System

    /// <summary>
	/// Load Allocation_System Items
	/// </summary>
	/// <returns>Datatable of Allocation_System Items</returns>
	public static DataTable Allocation_SystemList_Get(int allocationID = 0
		, int systemID = 0)
	{
		string procName = "Allocation_SystemList_Get";

		using (DataTable dt = new DataTable("Allocation_System"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@ALLOCATIONID", SqlDbType.Int).Value = allocationID == 0 ? (object)DBNull.Value : allocationID;
					cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = systemID == 0 ? (object)DBNull.Value : systemID;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

    /// <summary>
	/// Update specified Allocation_System record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool AllocationGroup_DeleteChild(int AllocationID)
    {
        bool saved = false;

        string procName = "Allocation_Group_DeleteChild";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@AllocationID", SqlDbType.Int).Value = AllocationID;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramSaved = cmd.Parameters["@saved"];
                if (paramSaved != null)
                {
                    bool.TryParse(paramSaved.Value.ToString(), out saved);
                }
            }
        }

        return saved;
    }



    /// <summary>
    /// Add new Allocation_System record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool Allocation_System_Add(
		int allocationID
		, int systemID
		, string description
		, int proposedPriority
		, int approvedPriority
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Allocation_System_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ALLOCATIONID", SqlDbType.Int).Value = allocationID;
				cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.NVarChar).Value = systemID == 0 ? (object)DBNull.Value : systemID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriority", SqlDbType.Int).Value = proposedPriority;
				cmd.Parameters.Add("@ApprovedPriority", SqlDbType.Int).Value = approvedPriority;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Allocation_System record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Allocation_System_Update(int allocationSystemID
		, int allocationID
		, int systemID
		, string description
		, int proposedPriority
		, int approvedPriority
		, bool archive
		, out bool duplicate
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		duplicate = false;
		bool saved = false;

		string procName = "Allocation_System_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@Allocation_SystemID", SqlDbType.Int).Value = allocationSystemID;
				cmd.Parameters.Add("@ALLOCATIONID", SqlDbType.Int).Value = allocationID;
				cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = systemID == 0 ? (object)DBNull.Value : systemID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriority", SqlDbType.Int).Value = proposedPriority;
				cmd.Parameters.Add("@ApprovedPriority", SqlDbType.Int).Value = approvedPriority;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@duplicate", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramDuplicate = cmd.Parameters["@duplicate"];
				if (paramDuplicate != null)
				{
					bool.TryParse(paramDuplicate.Value.ToString(), out duplicate);
				}
				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Allocation_System record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Allocation_System_Delete(int allocationSystemID
		, out bool exists
		, out string errorMsg)
	{
		exists = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "Allocation_System_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@Allocation_SystemID", SqlDbType.Int).Value = allocationSystemID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						errorMsg = "Allocation_System record could not be found.";
						return false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
			}
		}

		return deleted;
	}

	#endregion Allocation - System


	#region ContractType

	/// <summary>
	/// Load Contract Type Items
	/// </summary>
	/// <returns>Datatable of Contract Type Items</returns>
	public static DataTable ContractTypeList_Get(bool includeArchive = false)
	{
		string procName = "ContractTypeList_Get";

		using (DataTable dt = new DataTable("ContractType"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Contract Type record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool ContractType_Add(
		string ContractType
		, string description
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "ContractType_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ContractType", SqlDbType.NVarChar).Value = ContractType;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Contract Type record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool ContractType_Update(int ContractTypeID
		, string ContractType
		, string description
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "ContractType_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ContractTypeID", SqlDbType.Int).Value = ContractTypeID;
				cmd.Parameters.Add("@ContractType", SqlDbType.NVarChar).Value = ContractType;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Contract Type record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool ContractType_Delete(int ContractTypeID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "ContractType_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ContractTypeID", SqlDbType.Int).Value = ContractTypeID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Contract Type record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Contract Type record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion ContractType


	#region Contract

	/// <summary>
	/// Load Contract Items
	/// </summary>
	/// <returns>Datatable of Contract Items</returns>
	public static DataTable ContractList_Get(bool includeArchive = false)
	{
		string procName = "ContractList_Get";

		using (DataTable dt = new DataTable("Contract"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Contract record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Contract_Add(
		int contractTypeID
		, string contract
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Contract_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ContractTypeID", SqlDbType.Int).Value = contractTypeID;
				cmd.Parameters.Add("@Contract", SqlDbType.NVarChar).Value = contract;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Contract record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Contract_Update(int contractID
		, int contractTypeID
		, string contract
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Contract_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ContractID", SqlDbType.Int).Value = contractID;
				cmd.Parameters.Add("@ContractTypeID", SqlDbType.Int).Value = contractTypeID;
				cmd.Parameters.Add("@Contract", SqlDbType.NVarChar).Value = contract;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Contract record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Contract_Delete(int contractID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "Contract_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ContractID", SqlDbType.Int).Value = contractID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Contract record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Contract record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Contract


	#region Priority

	/// <summary>
	/// Load Priority Items
	/// </summary>
	/// <returns>Datatable of Priority Items</returns>
	public static DataTable PriorityList_Get(bool includeArchive = false)
	{
		string procName = "PriorityList_Get";

		using (DataTable dt = new DataTable("Priority"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Priority record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Priority_Add(
		int priorityTypeID
		, string priority
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Priority_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@PriorityTypeID", SqlDbType.Int).Value = priorityTypeID;
				cmd.Parameters.Add("@Priority", SqlDbType.NVarChar).Value = priority;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Priority record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Priority_Update(int priorityID
		, int priorityTypeID
		, string priority
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Priority_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@PriorityID", SqlDbType.Int).Value = priorityID;
				cmd.Parameters.Add("@PriorityTypeID", SqlDbType.Int).Value = priorityTypeID;
				cmd.Parameters.Add("@Priority", SqlDbType.NVarChar).Value = priority;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Priority record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Priority_Delete(int priorityID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "Priority_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@PriorityID", SqlDbType.Int).Value = priorityID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Priority record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Priority record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Priority


	#region Status

	/// <summary>
	/// Load Status Type Items
	/// </summary>
	/// <returns>Datatable of Status Type Items</returns>
	public static DataTable StatusTypeList_Get(bool includeArchive = true)
	{
		string procName = "StatusTypeList_Get";

		using (DataTable dt = new DataTable("Status"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Load Status Items
	/// </summary>
	/// <returns>Datatable of Status Items</returns>
	public static DataTable StatusList_Get(bool includeArchive = false)
	{
		string procName = "StatusList_Get";

		using (DataTable dt = new DataTable("Status"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

    public static DataTable MetricsGridHeaderCounts_Get(int includeArchive = 0
        , string selectedStatus = ""
        , string selectedAssigned = ""
        , bool myData = false)
    {
        string procName = "MetricsGridHeaderCounts_Get";

        using (DataTable dt = new DataTable("Status"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@SessionID", SqlDbType.NVarChar).Value = HttpContext.Current.Session.SessionID;
                    cmd.Parameters.Add("@UserName", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                    cmd.Parameters.Add("@IncludeArchive", SqlDbType.Int).Value = includeArchive;   // ? 1 : 0;
                    cmd.Parameters.Add("@OwnedBy", SqlDbType.NVarChar).Value = myData ? UserManagement.GetUserId_FromUsername().ToString() : "";
                    cmd.Parameters.Add("@SelectedStatus", SqlDbType.NVarChar).Value = selectedStatus;
                    cmd.Parameters.Add("@SelectedAssigned", SqlDbType.NVarChar).Value = selectedAssigned;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    public static DataTable MetricsGridHeaderSubCounts_Get(int includeArchive = 0
    , string selectedStatus = ""
    , string selectedAssigned = ""
    , bool myData = false)
    {
        string procName = "MetricsGridHeaderSubCounts_Get";

        using (DataTable dt = new DataTable("Status"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@SessionID", SqlDbType.NVarChar).Value = HttpContext.Current.Session.SessionID;
                    cmd.Parameters.Add("@UserName", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                    cmd.Parameters.Add("@IncludeArchive", SqlDbType.Int).Value = includeArchive;   // ? 1 : 0;
                    cmd.Parameters.Add("@OwnedBy", SqlDbType.NVarChar).Value = myData ? UserManagement.GetUserId_FromUsername().ToString() : "";
                    cmd.Parameters.Add("@SelectedStatus", SqlDbType.NVarChar).Value = selectedStatus;
                    cmd.Parameters.Add("@SelectedAssigned", SqlDbType.NVarChar).Value = selectedAssigned;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    /// <summary>
    /// Add new Status record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool Status_Add(
		int statusTypeID
		, string status
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Status_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@StatusTypeID", SqlDbType.Int).Value = statusTypeID;
				cmd.Parameters.Add("@Status", SqlDbType.NVarChar).Value = status;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Status record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Status_Update(int statusID
		, int statusTypeID
		, string Status
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "Status_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID;
				cmd.Parameters.Add("@StatusTypeID", SqlDbType.Int).Value = statusTypeID;
				cmd.Parameters.Add("@Status", SqlDbType.NVarChar).Value = Status;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Status record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Status_Delete(int statusID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "Status_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Status record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Status record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Status


	#region Phase

	/// <summary>
	/// Load Phase Items
	/// </summary>
	/// <returns>Datatable of Phase Items</returns>
	public static DataTable PhaseList_Get(bool includeArchive = false)
	{
		string procName = "PDDTDR_PhaseList_Get";

		using (DataTable dt = new DataTable("Phase"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Phase record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Phase_Add(
		string phase
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "PDDTDR_Phase_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@PDDTDR_Phase", SqlDbType.NVarChar).Value = phase;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Phase record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Phase_Update(int phaseID
		, string phase
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "PDDTDR_Phase_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@PDDTDR_PhaseID", SqlDbType.Int).Value = phaseID;
				cmd.Parameters.Add("@PDDTDR_Phase", SqlDbType.NVarChar).Value = phase;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Phase record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Phase_Delete(int phaseID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "PDDTDR_Phase_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@PDDTDR_PhaseID", SqlDbType.Int).Value = phaseID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Phase record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Phase record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Phase


	#region WorkloadGroup

	/// <summary>
	/// Load WorkloadGroup Items
	/// </summary>
	/// <returns>Datatable of WorkloadGroup Items</returns>
	public static DataTable WorkloadGroupList_Get(bool includeArchive = false)
	{
		string procName = "WorkloadGroupList_Get";

		using (DataTable dt = new DataTable("WorkloadGroup"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new WorkloadGroup record
	/// - Can only set ProposedPriorityRank here
	///   - ActualPriorityRank must be signed off by "Admin"
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkloadGroup_Add(
		string workloadGroup
		, string description
		, int proposedPriorityRank
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkloadGroup_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkloadGroup", SqlDbType.NVarChar).Value = workloadGroup;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriorityRank", SqlDbType.Int).Value = proposedPriorityRank;
				//ActualPriorityRank must be approved, cannot be set by normal users
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramExists = cmd.Parameters["@exists"];
					if (paramExists != null)
					{
						bool.TryParse(paramExists.Value.ToString(), out exists);
						saved = false;
					}
					SqlParameter paramNewID = cmd.Parameters["@newID"];
					if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
					{
						saved = true;
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified WorkloadGroup record
	/// - Can only set ProposedPriorityRank here
	///   - ActualPriorityRank must be signed off by "Admin"
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkloadGroup_Update(int workloadGroupID
		, string workloadGroup
		, string description
		, int proposedPriorityRank
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkloadGroup_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkloadGroupID", SqlDbType.Int).Value = workloadGroupID;
				cmd.Parameters.Add("@WorkloadGroup", SqlDbType.NVarChar).Value = workloadGroup;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriorityRank", SqlDbType.Int).Value = proposedPriorityRank;
				//ActualPriorityRank must be approved, cannot be set by normal users
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramSaved = cmd.Parameters["@saved"];
					if (paramSaved != null)
					{
						bool.TryParse(paramSaved.Value.ToString(), out saved);
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete WorkloadGroup record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkloadGroup_Delete(int workloadGroupID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WorkloadGroup_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkloadGroupID", SqlDbType.Int).Value = workloadGroupID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "WorkloadGroup record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "WorkloadGroup record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion WorkloadGroup


	#region WorkArea

	/// <summary>
	/// Load WorkArea Items
	/// </summary>
	/// <returns>Datatable of WorkArea Items</returns>
	public static DataTable WorkAreaList_Get(bool includeArchive = false, string cv = "0")
	{
		string procName = "WorkAreaList_Get";

		using (DataTable dt = new DataTable("WorkArea"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;
                    cmd.Parameters.Add("@CV", SqlDbType.NVarChar).Value = cv;
                    try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new WorkArea record
	/// - Can only set ProposedPriorityRank here
	///   - ActualPriorityRank must be signed off by "Admin"
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkArea_Add(
		string WorkArea
		, string description
		, int proposedPriorityRank
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkArea_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkArea", SqlDbType.NVarChar).Value = WorkArea;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriorityRank", SqlDbType.Int).Value = proposedPriorityRank;
				//ActualPriorityRank must be approved, cannot be set by normal users
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramExists = cmd.Parameters["@exists"];
					if (paramExists != null)
					{
						bool.TryParse(paramExists.Value.ToString(), out exists);
						saved = false;
					}
					SqlParameter paramNewID = cmd.Parameters["@newID"];
					if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
					{
						saved = true;
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified WorkArea record
	/// - Can only set ProposedPriorityRank here
	///   - ActualPriorityRank must be signed off by "Admin"
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkArea_Update(int WorkAreaID
		, string WorkArea
		, string description
		, int proposedPriorityRank
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkArea_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkAreaID", SqlDbType.Int).Value = WorkAreaID;
				cmd.Parameters.Add("@WorkArea", SqlDbType.NVarChar).Value = WorkArea;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriorityRank", SqlDbType.Int).Value = proposedPriorityRank;
				//ActualPriorityRank must be approved, cannot be set by normal users
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramSaved = cmd.Parameters["@saved"];
					if (paramSaved != null)
					{
						bool.TryParse(paramSaved.Value.ToString(), out saved);
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete WorkArea record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkArea_Delete(int WorkAreaID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WorkArea_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkAreaID", SqlDbType.Int).Value = WorkAreaID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "WorkArea record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "WorkArea record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion WorkArea


	#region WorkArea - System

	/// <summary>
	/// Load WorkArea_System Items
	/// </summary>
	/// <returns>Datatable of WorkArea_System Items</returns>
	public static DataTable WorkArea_SystemList_Get(int workAreaID = 0
		, int systemID = 0
        , string cv = "0")
	{
		string procName = "WorkArea_SystemList_Get";

		using (DataTable dt = new DataTable("WorkArea_System"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@WorkAreaID", SqlDbType.Int).Value = workAreaID == 0 ? (object)DBNull.Value : workAreaID;
					cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = systemID == 0 ? (object)DBNull.Value : systemID;
                    cmd.Parameters.Add("@CV", SqlDbType.NVarChar).Value = cv;
                    
                    try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new WorkArea_System record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkArea_System_Add(
		int workAreaID
		, int systemID
		, string description
		, int proposedPriority
		, int approvedPriority
        , string cv
		, out bool exists
		, out int newID
		, out string errorMsg
/*        , int? ALLOCATIONGROUPID = null*/)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkArea_System_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkAreaID", SqlDbType.Int).Value = workAreaID;
				cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.NVarChar).Value = systemID == 0 ? (object)DBNull.Value : systemID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriority", SqlDbType.Int).Value = proposedPriority;
				cmd.Parameters.Add("@ApprovedPriority", SqlDbType.Int).Value = approvedPriority;
                cmd.Parameters.Add("@CV", SqlDbType.NVarChar).Value = cv;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified WorkArea_System record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkArea_System_Update(int workAreaSystemID
		, int workAreaID
		, int systemID
		, string description
		, int proposedPriority
		, int approvedPriority
        , string cv
        , bool archive
		, out bool duplicate
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		duplicate = false;
		bool saved = false;

		string procName = "WorkArea_System_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkArea_SystemID", SqlDbType.Int).Value = workAreaSystemID;
				cmd.Parameters.Add("@WorkAreaID", SqlDbType.Int).Value = workAreaID;
				cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = systemID == 0 ? (object)DBNull.Value : systemID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@ProposedPriority", SqlDbType.Int).Value = proposedPriority;
				cmd.Parameters.Add("@ApprovedPriority", SqlDbType.Int).Value = approvedPriority;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
                cmd.Parameters.Add("@CV", SqlDbType.NVarChar).Value = cv;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@duplicate", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramDuplicate = cmd.Parameters["@duplicate"];
				if (paramDuplicate != null)
				{
					bool.TryParse(paramDuplicate.Value.ToString(), out duplicate);
				}
				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete WorkArea_System record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkArea_System_Delete(int workAreaSystemID
        , string cv
		, out bool exists
		, out string errorMsg)
	{
		exists = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WorkArea_System_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkArea_SystemID", SqlDbType.Int).Value = workAreaSystemID;
                cmd.Parameters.Add("@CV", SqlDbType.NVarChar).Value = cv;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				
				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
                        if (cv == "0"){
                            errorMsg = "WorkArea_System record could not be found.";
                        }
                        else {
                            errorMsg = "Allocation_System record could not be found.";
                        }
						return false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
			}
		}

		return deleted;
	}

	#endregion WorkArea - System


	#region WorkItemType

	/// <summary>
	/// Load WorkItemType Items
	/// </summary>
	/// <returns>Datatable of WorkItemType Items</returns>
	public static DataTable WorkItemTypeList_Get(bool includeArchive = false)
	{
		string procName = "WorkItemTypeList_Get";

		using (DataTable dt = new DataTable("WorkItemType"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new WorkItemType record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkItemType_Add(
		string WorkItemType
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkItemType_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkItemType", SqlDbType.NVarChar).Value = WorkItemType;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified WorkItemType record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkItemType_Update(int WorkItemTypeID
		, string WorkItemType
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkItemType_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkItemTypeID", SqlDbType.Int).Value = WorkItemTypeID;
				cmd.Parameters.Add("@WorkItemType", SqlDbType.NVarChar).Value = WorkItemType;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete WorkItemType record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkItemType_Delete(int WorkItemTypeID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WorkItemType_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkItemTypeID", SqlDbType.Int).Value = WorkItemTypeID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "WorkItemType record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "WorkItemType record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion WorkItemType


	#region WorkType

	/// <summary>
	/// Load Progress Items
	/// </summary>
	/// <returns>Datatable of Progress Items</returns>
	public static DataTable WorkTypeList_Get(bool includeArchive = false)
	{
		string procName = "WorkTypeList_Get";

		using (DataTable dt = new DataTable("WorkType"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new WorkType record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Add(
		string workType
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkType_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkType", SqlDbType.NVarChar).Value = workType;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified WorkType record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Update(int workTypeID
		, string workType
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkType_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkTypeID", SqlDbType.Int).Value = workTypeID;
				cmd.Parameters.Add("@WorkType", SqlDbType.NVarChar).Value = workType;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete WorkType record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Delete(int workTypeID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WorkType_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkTypeID", SqlDbType.Int).Value = workTypeID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "WorkType record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "WorkType record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion WorkType


	#region WorkType - Phase

	/// <summary>
	/// Load WorkType - Phase Items
	/// </summary>
	/// <returns>Datatable of Phase Items</returns>
	public static DataTable WorkType_PhaseList_Get(int workTypeID = 0
		, int phaseID = 0)
	{
		string procName = "WorkType_PhaseList_Get";

		using (DataTable dt = new DataTable("WorkType_Phase"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@WorkTypeID", SqlDbType.Int).Value = workTypeID == 0 ? (object)DBNull.Value : workTypeID;
					cmd.Parameters.Add("@PhaseID", SqlDbType.Int).Value = phaseID == 0 ? (object)DBNull.Value : phaseID;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new WorkType_Phase record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Phase_Add(
		int phaseID
		, int workTypeID
		, string description
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkType_Phase_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@PhaseID", SqlDbType.Int).Value = phaseID;
				cmd.Parameters.Add("@WorkTypeID", SqlDbType.NVarChar).Value = workTypeID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified WorkType_Phase record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Phase_Update(int workTypePhaseID
		, int phaseID
		, int workTypeID
		, string description
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkType_Phase_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkTypePhaseID", SqlDbType.Int).Value = workTypePhaseID;
				cmd.Parameters.Add("@PhaseID", SqlDbType.Int).Value = phaseID;
				cmd.Parameters.Add("@WorkTypeID", SqlDbType.Int).Value = workTypeID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete WorkType_Phase record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Phase_Delete(int workType_PhaseID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WorkType_Phase_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WorkType_PhaseID", SqlDbType.Int).Value = workType_PhaseID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "WorkType-Phase record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "WorkType-Phase record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion WorkType - Phase


	#region WorkType - Status

	/// <summary>
	/// Load Work Type - Status Items
	/// </summary>
	/// <returns>Datatable of WorkType_Status Items</returns>
	public static DataTable WorkType_StatusList_Get(int workTypeID = 0
		, int statusID = 0)
	{
		string procName = "WorkType_StatusList_Get";

		using (DataTable dt = new DataTable("WorkType_Status"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@WorkTypeID", SqlDbType.Int).Value = workTypeID == 0 ? (object)DBNull.Value : workTypeID;
					cmd.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID == 0 ? (object)DBNull.Value : statusID;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new WorkType_Status record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Status_Add(
		int statusID
		, int workTypeID
		, string description
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkType_Status_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID;
				cmd.Parameters.Add("@WorkTypeID", SqlDbType.NVarChar).Value = workTypeID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified WorkType_Status record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Status_Update(int workTypeStatusID
		, int statusID
		, int workTypeID
		, string description
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WorkType_Status_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@StatusWorkTypeID", SqlDbType.Int).Value = workTypeStatusID;
				cmd.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID;
				cmd.Parameters.Add("@WorkTypeID", SqlDbType.Int).Value = workTypeID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete WorkType_Status record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool WorkType_Status_Delete(int workType_StatusID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WorkType_Status_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@Status_WorkTypeID", SqlDbType.Int).Value = workType_StatusID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "WorkType-Status record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "WorkType-Status record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion WorkType - Status


	#region Scope

	/// <summary>
	/// Load Scope Items
	/// </summary>
	/// <returns>Datatable of Scope Items</returns>
	public static DataTable ScopeList_Get(bool includeArchive = false)
	{
		string procName = "WTS_ScopeList_Get";

		using (DataTable dt = new DataTable("Scope"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

    /// <summary>
    /// Load Item Type
    /// </summary>
    /// <returns>Datatable of Allocation Group</returns>
    public static DataTable AllocationGroup_Get()
    {
        string procName = "WTS_AllocationGroup_Get";

        using (DataTable dt = new DataTable("AllocationGroup"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    /// <summary>
    /// Add new ItemType record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool AllocationGroup_Add(
        string ALLOCATIONGROUP
        , string DESCRIPTION
        , string NOTES
        , int PRIORTY
        , bool DAILYMEETINGS
        , bool ARCHIVE
        , out bool exists
        , out int newID
        , out string errorMsg)
    {
        exists = false;
        newID = 0;
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "WTS_AllocationGroup_Add";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ALLOCATIONGROUP", SqlDbType.NVarChar).Value = ALLOCATIONGROUP;
                cmd.Parameters.Add("@DESCRIPTION", SqlDbType.NVarChar).Value = DESCRIPTION;
                cmd.Parameters.Add("@NOTES", SqlDbType.NVarChar).Value = NOTES;
                cmd.Parameters.Add("@PRIORTY", SqlDbType.Int).Value = PRIORTY;
                cmd.Parameters.Add("@DAILYMEETINGS", SqlDbType.Bit).Value = DAILYMEETINGS ? 1 : 0;
                cmd.Parameters.Add("@ARCHIVE", SqlDbType.Bit).Value = ARCHIVE ? 1 : 0;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    saved = false;
                }
                SqlParameter paramNewID = cmd.Parameters["@newID"];
                if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
                {
                    saved = true;
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Update specified AllocationGroup record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool AllocationGroup_Update(
          int ALLOCATIONGROUPID
        , string ALLOCATIONGROUP
        , string DESCRIPTION
        , string NOTES
        , int PRIORTY
        , bool DAILYMEETINGS
        , bool ARCHIVE
        , out string errorMsg)
    {
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "AllocationGroup_Update";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ALLOCATIONGROUPID", SqlDbType.Int).Value = ALLOCATIONGROUPID;
                cmd.Parameters.Add("@ALLOCATIONGROUP", SqlDbType.NVarChar).Value = ALLOCATIONGROUP;
                cmd.Parameters.Add("@DESCRIPTION", SqlDbType.NVarChar).Value = DESCRIPTION;
                cmd.Parameters.Add("@NOTES", SqlDbType.NVarChar).Value = NOTES;
                cmd.Parameters.Add("@PRIORTY", SqlDbType.Int).Value = PRIORTY;
                cmd.Parameters.Add("@DAILYMEETINGS", SqlDbType.Bit).Value = DAILYMEETINGS ? 1 : 0;
                cmd.Parameters.Add("@ARCHIVE", SqlDbType.Bit).Value = ARCHIVE ? 1 : 0;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramSaved = cmd.Parameters["@saved"];
                if (paramSaved != null)
                {
                    bool.TryParse(paramSaved.Value.ToString(), out saved);
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Update specified AllocationGroup record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool Allocation_Set_GroupID(
          int ALLOCATIONID,
          int ALLOCATIONGROUPID,
          out string errorMsg)
    {
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "WTS_ALLOCATION_SET_GROUPID";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ALLOCATIONID", SqlDbType.Int).Value = ALLOCATIONID;
                cmd.Parameters.Add("@ALLOCATIONGROUPID", SqlDbType.Int).Value = ALLOCATIONGROUPID;

                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramSaved = cmd.Parameters["@saved"];
                if (paramSaved != null)
                {
                    bool.TryParse(paramSaved.Value.ToString(), out saved);
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Delete AllocationGroup record
    ///  - will archive if record is assigned to anything
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool AllocatonGroup_Delete(int AllocationGroupID
        , out bool exists
        , out bool archived
        , out string errorMsg)
    {
        exists = false;
        archived = false;
        errorMsg = string.Empty;
        bool deleted = false;

        string procName = "WTS_AllocationGroup_Delete";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ALLOCATIONGROUPID", SqlDbType.Int).Value = AllocationGroupID;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    if (!exists)
                    {
                        archived = false;
                        errorMsg = "Allocation Group record could not be found.";
                        return false;
                    }
                }
                SqlParameter paramDeleted = cmd.Parameters["@deleted"];
                if (paramDeleted != null)
                {
                    bool.TryParse(paramDeleted.Value.ToString(), out deleted);
                }
                SqlParameter paramArchived = cmd.Parameters["@archived"];
                if (paramArchived != null)
                {
                    bool.TryParse(paramArchived.Value.ToString(), out archived);
                    if (archived)
                    {
                        deleted = false;
                    }
                }
            }
        }

        return deleted;
    }

	/// <summary>
	/// Add new Scope record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Scope_Add(
		string scope
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WTS_Scope_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@Scope", SqlDbType.NVarChar).Value = scope;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Scope record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Scope_Update(int scopeID
		, string scope
		, string description
		, int sortOrder
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WTS_Scope_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WTS_ScopeID", SqlDbType.Int).Value = scopeID;
				cmd.Parameters.Add("@Scope", SqlDbType.NVarChar).Value = scope;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Scope record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool Scope_Delete(int scopeID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WTS_Scope_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WTS_ScopeID", SqlDbType.Int).Value = scopeID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Scope record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Scope record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

    #endregion Scope


    #region System

    /// <summary>
    /// Load System Items
    /// </summary>
    /// <returns>Datatable of System Items</returns>
    public static DataTable SystemList_Get(bool includeArchive = false, string cv = "0", int ProductVersionID = 0)
	{
		string procName = "WTS_SystemList_Get";

		using (DataTable dt = new DataTable("System"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;
                    cmd.Parameters.Add("@CV", SqlDbType.NVarChar).Value = cv;
                    cmd.Parameters.Add("@ProductVersionID", SqlDbType.Int).Value = ProductVersionID;

                    try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new System record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool System_Add(
		string system
		, string description
		, int sortOrder
        , int busWorkloadManagerID
        , int devWorkloadManagerID
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WTS_System_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WTS_System", SqlDbType.NVarChar).Value = system;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@BusWorkloadManagerID", SqlDbType.Int).Value = busWorkloadManagerID == 0 ? (object)DBNull.Value : busWorkloadManagerID;
                cmd.Parameters.Add("@DevWorkloadManagerID", SqlDbType.Int).Value = devWorkloadManagerID == 0 ? (object)DBNull.Value : devWorkloadManagerID;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

    /// <summary>
    /// Update specified System record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool System_Update(int systemID
        , string system
        , string description
        , int sortOrder
        , int busWorkloadManagerID
        , int devWorkloadManagerID
        , bool archive
        , out string errorMsg
        , int WTS_SYSTEM_SUITEID = 0)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "WTS_System_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WTS_SystemID", SqlDbType.Int).Value = systemID;
				cmd.Parameters.Add("@WTS_System", SqlDbType.NVarChar).Value = system;
                cmd.Parameters.Add("@WTS_System_SuiteID", SqlDbType.NVarChar).Value = WTS_SYSTEM_SUITEID;
                cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
                cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
                cmd.Parameters.Add("@BusWorkloadManagerID", SqlDbType.Int).Value = busWorkloadManagerID == 0 ? (object)DBNull.Value : busWorkloadManagerID;
                cmd.Parameters.Add("@DevWorkloadManagerID", SqlDbType.Int).Value = devWorkloadManagerID == 0 ? (object)DBNull.Value : devWorkloadManagerID;
                cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

    public static bool System_Remove_Suite(int systemID)
    {
        bool saved = false;

        string procName = "WTS_System_Remove_Suite";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SystemID", SqlDbType.Int).Value = systemID;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramSaved = cmd.Parameters["@saved"];
                if (paramSaved != null)
                {
                    bool.TryParse(paramSaved.Value.ToString(), out saved);
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Delete System record
    ///  - will archive if record is assigned to anything
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool System_Delete(int systemID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "WTS_System_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@WTS_SystemID", SqlDbType.Int).Value = systemID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "System record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "System record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

    #endregion System

    #region System - Resource

    /// <summary>
    /// Load System_Resource Items
    /// </summary>
    /// <returns>Datatable of System_Resource Items</returns>
    public static DataTable WTS_System_ResourceList_Get(int WTS_SYSTEMID
        , int ProductVersionID)
    {
        string procName = "WTS_System_ResourceList_Get";

        using (DataTable dt = new DataTable("System_Resource"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = WTS_SYSTEMID;
                    cmd.Parameters.Add("@ProductVersionID", SqlDbType.Int).Value = ProductVersionID;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    public static DataTable WTS_System_ResourceAltList_Get(int WTS_RESOURCEID
        , int ProductVersionID)
    {
        string procName = "WTS_System_ResourceAltList_Get";

        using (DataTable dt = new DataTable("System_Resource"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@WTS_RESOURCEID", SqlDbType.Int).Value = WTS_RESOURCEID;
                    cmd.Parameters.Add("@ProductVersionID", SqlDbType.Int).Value = ProductVersionID;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    /// <summary>
    /// Add new System_Resource record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool WTS_System_Resource_Add(
        int WTS_SYSTEMID
        , int ProductVersionID
        , int WTS_RESOURCEID
        , int AORRoleID
        , int Allocation
        , out bool exists
        , out int newID
        , out string errorMsg)
    {
        exists = false;
        newID = 0;
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "WTS_System_Resource_Add";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = WTS_SYSTEMID;
                cmd.Parameters.Add("@ProductVersionID", SqlDbType.Int).Value = ProductVersionID == 0 ? (object)DBNull.Value : ProductVersionID;
                cmd.Parameters.Add("@WTS_RESOURCEID", SqlDbType.Int).Value = WTS_RESOURCEID;
                cmd.Parameters.Add("@AORRoleID", SqlDbType.Int).Value = AORRoleID == 0 ? (object)DBNull.Value : AORRoleID;
                cmd.Parameters.Add("@Allocation", SqlDbType.Int).Value = Allocation;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    saved = false;
                }
                SqlParameter paramNewID = cmd.Parameters["@newID"];
                if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
                {
                    saved = true;
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Update specified System_Resource record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool WTS_System_Resource_Update(int WTS_SYSTEMID
        , int ProductVersionID
        , int WTS_SYSTEM_RESOURCEID
        , int WTS_RESOURCEID
        , int AORRoleID
        , int Allocation
        , bool archive
        , out bool duplicate
        , out string errorMsg)
    {
        errorMsg = string.Empty;
        duplicate = false;
        bool saved = false;

        string procName = "WTS_System_Resource_Update";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = WTS_SYSTEMID;
                cmd.Parameters.Add("@ProductVersionID", SqlDbType.Int).Value = ProductVersionID;
                cmd.Parameters.Add("@WTS_SYSTEM_RESOURCEID", SqlDbType.Int).Value = WTS_SYSTEM_RESOURCEID;
                cmd.Parameters.Add("@WTS_RESOURCEID", SqlDbType.Int).Value = WTS_RESOURCEID;
                cmd.Parameters.Add("@AORRoleID", SqlDbType.Int).Value = AORRoleID == 0 ? (object)DBNull.Value : AORRoleID;
                cmd.Parameters.Add("@Allocation", SqlDbType.Int).Value = Allocation;
                cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@duplicate", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramDuplicate = cmd.Parameters["@duplicate"];
                if (paramDuplicate != null)
                {
                    bool.TryParse(paramDuplicate.Value.ToString(), out duplicate);
                }
                SqlParameter paramSaved = cmd.Parameters["@saved"];
                if (paramSaved != null)
                {
                    bool.TryParse(paramSaved.Value.ToString(), out saved);
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Delete System_Resource record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool WTS_System_Resource_Delete(int WTS_SYSTEM_RESOURCEID
        , out bool exists
        , out string errorMsg)
    {
        exists = false;
        errorMsg = string.Empty;
        bool deleted = false;

        string procName = "WTS_System_Resource_Delete";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEM_RESOURCEID", SqlDbType.Int).Value = WTS_SYSTEM_RESOURCEID;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    if (!exists)
                    {
                        errorMsg = "System_Resource record could not be found.";

                        return false;
                    }
                }
                SqlParameter paramDeleted = cmd.Parameters["@deleted"];
                if (paramDeleted != null)
                {
                    bool.TryParse(paramDeleted.Value.ToString(), out deleted);
                }
            }
        }

        return deleted;
    }

    public static bool WTS_System_ResourceAlt_Save(XmlDocument Changes)
    {
        bool saved = false;
        string procName = "WTS_System_ResourceAlt_Save";

        using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            cn.Open();
            using (SqlCommand cmd = new SqlCommand(procName, cn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@Changes", SqlDbType.Xml).Value = new SqlXml(new XmlTextReader(Changes.InnerXml, XmlNodeType.Document, null));
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;
                cmd.Parameters.Add("@Saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramSaved = cmd.Parameters["@Saved"];

                if (paramSaved != null) bool.TryParse(paramSaved.Value.ToString(), out saved);
            }
        }

        return saved;
    }

    #endregion System - Resource

    #region System - Contract
    /// <summary>
    /// Load System_Contract Items
    /// </summary>
    /// <returns>Datatable of System_Contract Items</returns>
    public static DataTable WTS_System_ContractList_Get(int WTS_SYSTEMID)
    {
        string procName = "WTS_System_ContractList_Get";

        using (DataTable dt = new DataTable("System_Contract"))
        {
            using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
            {
                cn.Open();
                using (SqlCommand cmd = new SqlCommand(procName, cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = WTS_SYSTEMID;

                    try
                    {
                        using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
                        {
                            if (dr != null && dr.HasRows)
                            {
                                dt.Load(dr);
                                return dt;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        LogUtility.LogException(ex);
                        throw;
                    }
                }
            }
        }
    }

    /// <summary>
    /// Add new System_Contract record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool WTS_System_Contract_Add(
        int WTS_SYSTEMID
        , int CONTRACTID
        , bool primary
        , out bool exists
        , out int newID
        , out string errorMsg)
    {
        exists = false;
        newID = 0;
        errorMsg = string.Empty;
        bool saved = false;

        string procName = "WTS_System_Contract_Add";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = WTS_SYSTEMID;
                cmd.Parameters.Add("@CONTRACTID", SqlDbType.Int).Value = CONTRACTID;
                cmd.Parameters.Add("@Primary", SqlDbType.Bit).Value = primary ? 1 : 0;
                cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    saved = false;
                }
                SqlParameter paramNewID = cmd.Parameters["@newID"];
                if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
                {
                    saved = true;
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Update specified System_Contract record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool WTS_System_Contract_Update(int WTS_SYSTEMID
        , int WTS_SYSTEM_CONTRACTID
        , int CONTRACTID
        , bool primary
        , bool archive
        , out bool duplicate
        , out string errorMsg)
    {
        errorMsg = string.Empty;
        duplicate = false;
        bool saved = false;

        string procName = "WTS_System_Contract_Update";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEMID", SqlDbType.Int).Value = WTS_SYSTEMID;
                cmd.Parameters.Add("@WTS_SYSTEM_CONTRACTID", SqlDbType.Int).Value = WTS_SYSTEM_CONTRACTID;
                cmd.Parameters.Add("@CONTRACTID", SqlDbType.Int).Value = CONTRACTID;
                cmd.Parameters.Add("@Primary", SqlDbType.Bit).Value = primary ? 1 : 0;
                cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
                cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

                cmd.Parameters.Add("@duplicate", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramDuplicate = cmd.Parameters["@duplicate"];
                if (paramDuplicate != null)
                {
                    bool.TryParse(paramDuplicate.Value.ToString(), out duplicate);
                }
                SqlParameter paramSaved = cmd.Parameters["@saved"];
                if (paramSaved != null)
                {
                    bool.TryParse(paramSaved.Value.ToString(), out saved);
                }
            }
        }

        return saved;
    }

    /// <summary>
    /// Delete System_Contract record
    /// </summary>
    /// <param name="errorMsg"></param>
    /// <returns></returns>
    public static bool WTS_System_Contract_Delete(int WTS_SYSTEM_CONTRACTID
        , out bool exists
        , out string errorMsg)
    {
        exists = false;
        errorMsg = string.Empty;
        bool deleted = false;

        string procName = "WTS_System_Contract_Delete";
        using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(procName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@WTS_SYSTEM_CONTRACTID", SqlDbType.Int).Value = WTS_SYSTEM_CONTRACTID;

                cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();

                SqlParameter paramExists = cmd.Parameters["@exists"];
                if (paramExists != null)
                {
                    bool.TryParse(paramExists.Value.ToString(), out exists);
                    if (!exists)
                    {
                        errorMsg = "System_Contract record could not be found.";

                        return false;
                    }
                }
                SqlParameter paramDeleted = cmd.Parameters["@deleted"];
                if (paramDeleted != null)
                {
                    bool.TryParse(paramDeleted.Value.ToString(), out deleted);
                }
            }
        }

        return deleted;
    }
    #endregion

    #region Product Version

    /// <summary>
    /// Load Product Version Items
    /// </summary>
    /// <returns>Datatable of Product Version Items</returns>
    public static DataTable ProductVersionList_Get(bool includeArchive = false)
	{
		string procName = "ProductVersionList_Get";

		using (DataTable dt = new DataTable("ProductVersion"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new ProductVersion record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool ProductVersion_Add(
		string ProductVersion
		, string description
		, bool defaultSelection
		, int sortOrder
		, int statusID
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "ProductVersion_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ProductVersion", SqlDbType.NVarChar).Value = ProductVersion;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@DefaultSelection", SqlDbType.Bit).Value = defaultSelection ? 1 : 0;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID == 0 ? (object)DBNull.Value : statusID;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					saved = false;
				}
				SqlParameter paramNewID = cmd.Parameters["@newID"];
				if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
				{
					saved = true;
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified ProductVersion record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool ProductVersion_Update(int ProductVersionID
		, string ProductVersion
		, string description
		, bool defaultSelection
		, int sortOrder
		, int statusID
		, bool archive
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "ProductVersion_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ProductVersionID", SqlDbType.Int).Value = ProductVersionID;
				cmd.Parameters.Add("@ProductVersion", SqlDbType.NVarChar).Value = ProductVersion;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@DefaultSelection", SqlDbType.Bit).Value = defaultSelection ? 1 : 0;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID == 0 ? (object)DBNull.Value : statusID;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramSaved = cmd.Parameters["@saved"];
				if (paramSaved != null)
				{
					bool.TryParse(paramSaved.Value.ToString(), out saved);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete ProductVersion record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool ProductVersion_Delete(int productVersionID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "ProductVersion_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@ProductVersionID", SqlDbType.Int).Value = productVersionID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "ProductVersion record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "ProductVersion record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Product Version


	#region Effort Area

	/// <summary>
	/// Load Effort Area Items
	/// </summary>
	/// <returns>Datatable of Effort Area Items</returns>
	public static DataTable EffortAreaList_Get(bool includeArchive = false)
	{
		DataSet ds = new DataSet();
		string procName = "EffortAreaList_Get";

		using (DataTable dt = new DataTable("EffortArea"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Effort Area record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortArea_Add(
		string effortArea
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "EffortArea_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortArea", SqlDbType.NVarChar).Value = effortArea;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramExists = cmd.Parameters["@exists"];
					if (paramExists != null)
					{
						bool.TryParse(paramExists.Value.ToString(), out exists);
						saved = false;
					}
					SqlParameter paramNewID = cmd.Parameters["@newID"];
					if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
					{
						saved = true;
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Effort Area record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortArea_Update(int effortAreaID
		, string effortArea
		, string description
		, int sortOrder
		, bool archive
		, out bool duplicate
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		duplicate = false;
		bool saved = false;

		string procName = "EffortArea_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortAreaID", SqlDbType.Int).Value = effortAreaID;
				cmd.Parameters.Add("@EffortArea", SqlDbType.NVarChar).Value = effortArea;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@duplicate", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramDuplicate = cmd.Parameters["@duplicate"];
					if (paramDuplicate != null)
					{
						bool.TryParse(paramDuplicate.Value.ToString(), out duplicate);
					}
					SqlParameter paramSaved = cmd.Parameters["@saved"];
					if (paramSaved != null)
					{
						bool.TryParse(paramSaved.Value.ToString(), out saved);
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Effort Area record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortArea_Delete(int effortAreaID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "EffortArea_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortAreaID", SqlDbType.Int).Value = effortAreaID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Effort Area record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Effort Level record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Effort Area


	#region Effort Size

	/// <summary>
	/// Load Effort Size Items
	/// </summary>
	/// <returns>Datatable of Allocation Items</returns>
	public static DataTable EffortSizeList_Get(bool includeArchive = false)
	{
		DataSet ds = new DataSet();
		string procName = "EffortSizeList_Get";

		using (DataTable dt = new DataTable("EffortSize"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;

					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Effort Size record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortSize_Add(
		string Size
		, string description
		, int sortOrder
		, bool archive
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "EffortSize_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortSize", SqlDbType.NVarChar).Value = Size;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramExists = cmd.Parameters["@exists"];
					if (paramExists != null)
					{
						bool.TryParse(paramExists.Value.ToString(), out exists);
						saved = false;
					}
					SqlParameter paramNewID = cmd.Parameters["@newID"];
					if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
					{
						saved = true;
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Effort Size record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortSize_Update(int EffortSizeID
		, string Size
		, string description
		, int sortOrder
		, bool archive
		, out bool duplicate
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		duplicate = false;
		bool saved = false;

		string procName = "EffortSize_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortSizeID", SqlDbType.Int).Value = EffortSizeID;
				cmd.Parameters.Add("@EffortSize", SqlDbType.NVarChar).Value = Size;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@duplicate", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramDuplicate = cmd.Parameters["@duplicate"];
					if (paramDuplicate != null)
					{
						bool.TryParse(paramDuplicate.Value.ToString(), out duplicate);
					}
					SqlParameter paramSaved = cmd.Parameters["@saved"];
					if (paramSaved != null)
					{
						bool.TryParse(paramSaved.Value.ToString(), out saved);
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Effort Size record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortSize_Delete(int EffortSizeID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "EffortSize_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortSizeID", SqlDbType.Int).Value = EffortSizeID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Effort Size record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Effort Size record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Effort Size


	#region Effort Area-Size

	/// <summary>
	/// Load Effort Area-Size Items
	/// </summary>
	/// <returns>Datatable of Effort Area Items</returns>
	public static DataTable EffortArea_SizeList_Get(int effortAreaID = 0, int effortSizeID = 0, bool includeArchive = false)
	{
		DataSet ds = new DataSet();
		string procName = "EffortArea_SizeList_Get";

		using (DataTable dt = new DataTable("EffortArea_Size"))
		{
			using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
			{
				cn.Open();
				using (SqlCommand cmd = new SqlCommand(procName, cn))
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.Parameters.Add("@EffortAreaID", SqlDbType.Int).Value = effortAreaID == 0 ? (object)DBNull.Value : effortAreaID;
					cmd.Parameters.Add("@EffortSizeID", SqlDbType.Int).Value = effortSizeID == 0 ? (object)DBNull.Value : effortSizeID;
					cmd.Parameters.Add("@IncludeArchive", SqlDbType.Bit).Value = includeArchive ? 1 : 0;

					try
					{
						using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.Default))
						{
							if (dr != null && dr.HasRows)
							{
								dt.Load(dr);
								return dt;
							}
							else
							{
								return null;
							}
						}
					}
					catch (Exception ex)
					{
						LogUtility.LogException(ex);
						throw;
					}
				}
			}
		}
	}

	/// <summary>
	/// Add new Effort Area-Size record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortArea_Size_Add(
		int effortAreaID
		, int effortSizeID
		, int minValue
		, int maxValue
		, string units
		, string description
		, int sortOrder
		, out bool exists
		, out int newID
		, out string errorMsg)
	{
		exists = false;
		newID = 0;
		errorMsg = string.Empty;
		bool saved = false;

		string procName = "EffortArea_Size_Add";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortAreaID", SqlDbType.Int).Value = effortAreaID;
				cmd.Parameters.Add("@EffortSizeID", SqlDbType.Int).Value = effortSizeID;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@MinValue", SqlDbType.Int).Value = minValue;
				cmd.Parameters.Add("@MaxValue", SqlDbType.Int).Value = maxValue;
				cmd.Parameters.Add("@Unit", SqlDbType.NVarChar).Value = units;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@CreatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@newID", SqlDbType.Int).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramExists = cmd.Parameters["@exists"];
					if (paramExists != null)
					{
						bool.TryParse(paramExists.Value.ToString(), out exists);
						saved = false;
					}
					SqlParameter paramNewID = cmd.Parameters["@newID"];
					if (paramNewID != null && int.TryParse(paramNewID.Value.ToString(), out newID) && newID > 0)
					{
						saved = true;
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Update specified Effort Area-Size record
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortArea_Size_Update(int effortArea_SizeID
		, int effortAreaID
		, int effortSizeID
		, int minValue
		, int maxValue
		, string units
		, string description
		, int sortOrder
		, bool archive
		, out bool duplicate
		, out string errorMsg)
	{
		errorMsg = string.Empty;
		duplicate = false;
		bool saved = false;

		string procName = "EffortArea_Size_Update";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortArea_SizeID", SqlDbType.Int).Value = effortArea_SizeID;
				cmd.Parameters.Add("@EffortAreaID", SqlDbType.Int).Value = effortAreaID;
				cmd.Parameters.Add("@EffortSizeID", SqlDbType.Int).Value = effortSizeID;
				cmd.Parameters.Add("@MinValue", SqlDbType.Int).Value = minValue;
				cmd.Parameters.Add("@MaxValue", SqlDbType.Int).Value = maxValue;
				cmd.Parameters.Add("@Unit", SqlDbType.NVarChar).Value = units;
				cmd.Parameters.Add("@Description", SqlDbType.NVarChar).Value = description;
				cmd.Parameters.Add("@Sort_Order", SqlDbType.Int).Value = sortOrder;
				cmd.Parameters.Add("@Archive", SqlDbType.Bit).Value = archive ? 1 : 0;
				cmd.Parameters.Add("@UpdatedBy", SqlDbType.NVarChar).Value = HttpContext.Current.User.Identity.Name;

				cmd.Parameters.Add("@duplicate", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@saved", SqlDbType.Bit).Direction = ParameterDirection.Output;

				try
				{
					cmd.ExecuteNonQuery();

					SqlParameter paramDuplicate = cmd.Parameters["@duplicate"];
					if (paramDuplicate != null)
					{
						bool.TryParse(paramDuplicate.Value.ToString(), out duplicate);
					}
					SqlParameter paramSaved = cmd.Parameters["@saved"];
					if (paramSaved != null)
					{
						bool.TryParse(paramSaved.Value.ToString(), out saved);
					}
				}
				catch (Exception ex)
				{
					saved = false;
					errorMsg = ex.Message;
					LogUtility.LogException(ex);
				}
			}
		}

		return saved;
	}

	/// <summary>
	/// Delete Effort Area-Size record
	///  - will archive if record is assigned to anything
	/// </summary>
	/// <param name="errorMsg"></param>
	/// <returns></returns>
	public static bool EffortArea_Size_Delete(int EffortArea_SizeID
		, out bool exists
		, out bool hasDependencies
		, out bool archived
		, out string errorMsg)
	{
		exists = false;
		hasDependencies = false;
		archived = false;
		errorMsg = string.Empty;
		bool deleted = false;

		string procName = "EffortArea_Size_Delete";
		using (SqlConnection conn = new SqlConnection(WTSCommon.WTS_ConnectionString))
		{
			conn.Open();

			using (SqlCommand cmd = new SqlCommand(procName, conn))
			{
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@EffortArea_SizeID", SqlDbType.Int).Value = EffortArea_SizeID;

				cmd.Parameters.Add("@exists", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@hasDependencies", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@deleted", SqlDbType.Bit).Direction = ParameterDirection.Output;
				cmd.Parameters.Add("@archived", SqlDbType.Bit).Direction = ParameterDirection.Output;

				cmd.ExecuteNonQuery();

				SqlParameter paramExists = cmd.Parameters["@exists"];
				if (paramExists != null)
				{
					bool.TryParse(paramExists.Value.ToString(), out exists);
					if (!exists)
					{
						hasDependencies = false;
						archived = false;
						errorMsg = "Effort Area-Size record could not be found.";
						return false;
					}
				}
				SqlParameter paramHasDependencies = cmd.Parameters["@hasDependencies"];
				if (paramHasDependencies != null)
				{
					bool.TryParse(paramHasDependencies.Value.ToString(), out hasDependencies);
					if (hasDependencies)
					{
						errorMsg = "Effort Area-Size record has dependencies and could not be permanently deleted. It has been archived instead.";
						deleted = false;
					}
				}
				SqlParameter paramDeleted = cmd.Parameters["@deleted"];
				if (paramDeleted != null)
				{
					bool.TryParse(paramDeleted.Value.ToString(), out deleted);
				}
				SqlParameter paramArchived = cmd.Parameters["@archived"];
				if (paramArchived != null)
				{
					bool.TryParse(paramArchived.Value.ToString(), out archived);
					if (archived)
					{
						deleted = false;
					}
				}
			}
		}

		return deleted;
	}

	#endregion Effort Area-Size

}