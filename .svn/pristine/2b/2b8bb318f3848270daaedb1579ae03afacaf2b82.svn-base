//Javascript - shell.js
//Base functions for UI

//Page Variables
var currentX = 0;
var currentY = 0;
var mousePos = 0;
var mouseIsDown = '';
var pageOpener = '';
var activeBubbleMessages = [];
var defaultParentPage = this;
var pathNameLength = defaultParentPage.location.pathname.split("/").length;
if (pathNameLength > 1) {
    pathNameLength = 2;
}
var pageName = defaultParentPage.location.pathname.split("/")[pathNameLength - 1].toUpperCase();

//End Page Variables

//Default Parent Page
function setDefaultPage() {
    defaultParentPage = top;
}


setDefaultPage();
var popupManager = defaultParentPage.popupManager;
//End Default Parent Page

//Popup Windows
function PopupWindowManager(popupContainer) {
    this.PopupWindows = [];
    this.PopupCount = 0;
    this.ActivePopup = null;
    this.PopupDimmer = new PopupDimmer;
    this.PopupContainer = popupContainer;
    this.GetPopupByName = function (Name) {
        for (var i = 0; i <= this.PopupCount - 1; i++) {
            if (this.PopupWindows[i].Name.toUpperCase() == Name.toUpperCase()) {
                return this.PopupWindows[i];
            }
        }
        return null;
    }
    this.GetPopupByID = function (ID) {
        for (var i = 0; i <= this.PopupCount - 1; i++) {
            if (this.PopupWindows[i].id.toUpperCase() == ID.toUpperCase()) {
                return this.PopupWindows[i];
            }
        }
        return null;
    }
    this.GetPopupIndexByName = function (Name) {
        for (var i = 0; i <= this.PopupCount - 1; i++) {
            if (this.PopupWindows[i].Name.toUpperCase() == Name.toUpperCase()) {
                return i;
            }
        }
        return null;
    }
    this.GetPopupIndexByID = function (ID) {
        for (var i = 0; i <= this.PopupCount - 1; i++) {
            if (this.PopupWindows[i].id.toUpperCase() == ID.toUpperCase()) {
                return i;
            }
        }
        return null;
    }
    this.AddPopupWindow = function (Name, Title, Src, Height, Width, CssClass, openerPage, messageBox) {
        if (!this.GetPopupByName(Name)) {
            var nPopupWindow = new PopupWindow(Name, Title, Src, this.PopupContainer, this, Height, Width, CssClass, openerPage, messageBox);
            this.PopupWindows[this.PopupCount] = nPopupWindow;
            this.PopupCount++;
            return nPopupWindow;
        }
    };
    this.RemovePopupWindow = function (Name) {
        var currentPopups = this.PopupWindows;
        var newPopups = [];

        showActiveBubbleMessagesFromPopup();

        for (var i = 0; i <= currentPopups.length - 1; i++) {

            if (currentPopups[i].Name.toUpperCase() == Name.toUpperCase()) {
                //check if onclose exist
                try {
                    if (currentPopups[i].onClose) {
                        if (currentPopups[i].onClose() == false) {
                            return;
                        }
                    }
                }
                catch (e) {
                }

                if (currentPopups[i].Window) {

//                    if (navigator.appName == 'Microsoft Internet Explorer') {
//                        currentPopups[i].Frame.document.execCommand('Stop');
//                    }
//                    else {
//                        currentPopups[i].Frame.stop();
//                    }
                    currentPopups[i].Frame.src = "javascript:'';";
                    // delete currentPopups[i].Frame;
                    if (this.PopupCount > 0) {
                        currentPopups[i].ParentContainer.removeChild(currentPopups[i].Window);
                    }
                   // delete currentPopups[i];
                }
            }
            else {
                newPopups[newPopups.length] = currentPopups[i];
            }
        }
        this.PopupWindows = newPopups;
        this.PopupCount = this.PopupWindows.length;
        if (this.PopupCount == 0) {
            this.PopupDimmer.style.display = 'none';
            this.ActivePopup = null;
        }
        else {
            for (var i = this.PopupCount - 1; i >= 0; i--) {
                if (this.PopupWindows[i].isOpen) {
                    this.ActivePopup = this.PopupWindows[i];
                    break;
                }
            }
        }

        for (var i = 0; i <= this.PopupWindows.length - 1; i++) {
            if (this.ActivePopup != this.PopupWindows[i]) {
                this.PopupWindows[i].showDimmer();
            }
            else {
                this.PopupWindows[i].hideDimmer();
            }
        }
    };
    if (this.PopupContainer) {
        this.PopupContainer.appendChild(this.PopupDimmer);
    }
}

function PopupDimmer() {
    var dimmer = document.createElement('div');
    dimmer.style.position = 'absolute';
    dimmer.style.top = '0px';
    dimmer.style.left = '0px';
    dimmer.style.height = '100%';
    dimmer.style.width = '100%';
    dimmer.style.background = 'grey';
    dimmer.style.opacity = 0.6;
    dimmer.style.filter = 'alpha(opacity = 60)';
    dimmer.style.display = 'none';

    return dimmer;
}

function PopupWindowEscape(answer,popupName) {
    if (answer == 'Yes') {
        popupManager.RemovePopupWindow(popupName);
    }
}

function PopupWindow(Name,Title,Src,ParentContainer,PopupWindowManager,Height,Width,CssClass,openerPage,messageBox) {
    var nID = Name;
    while (nID.indexOf(' ') > -1) {
        nID = nID.replace(' ','_');
    }
    if (!openerPage) {
        openerPage = window.self;
    }
    this.id = 'PopupWindow_' + nID;
    this.Name = Name;
    this.Title = Title.toUpperCase();
    this.Src = Src;
    this.Height = parseInt(Height);
    this.Width = parseInt(Width);
    this.Opener = openerPage;
    this.CssClass = CssClass;
    this.Window = '';
    this.Dimmer = '';
    this.MessageBox = messageBox;
    this.ParentContainer = ParentContainer;
    this.PopupWindowManager = PopupWindowManager;
    this.isOpen = false;
    this.Open = function () {
        var container = document.createElement('div');
        var header = document.createElement('div');
        var body = document.createElement('div');
        var frame = document.createElement('iframe');
        var messageDiv = document.createElement('div');
        var footer = document.createElement('div');
        var dimmer = document.createElement('div');
        var movingDiv = document.createElement('div');

        var wManager = new WindowManager();

        closeActiveBubbleMessagesFromPopup();

        //Create Header
        var headerTable = document.createElement('table');
        var headerTableRow = headerTable.insertRow(0);
        var headerTableCell = headerTableRow.insertCell(0);
        if (Src.indexOf('QuestionBox') == -1 && Src.indexOf('AOR_Wizard.aspx') == -1 && Src.indexOf('AOR_Meeting_Instance_Edit.aspx') == -1 && Src.indexOf('Type=Note Detail') == -1 && Src.indexOf('Type=Edit Note Detail') == -1) {
            var headerTableCellImage = headerTableRow.insertCell(1);
            var headerPopupCloser = document.createElement('img');
            headerPopupCloser.src = 'Images/Icons/close_button_red.png';
            headerPopupCloser.alt = 'Close';
            headerPopupCloser.style.cursor = 'pointer';
            headerPopupCloser.style.height = '16px';
            headerPopupCloser.style.width = '16px';
            if (navigator.appName == "Netscape") {
                headerPopupCloser.onmousedown = function () { //have to use mousedown for chrome
                    if (popupManager.ActivePopup) {
                        PopupWindowEscape('Yes', popupManager.ActivePopup.Name);
                    }
                }
            }
            else {
                headerPopupCloser.onmouseup = function () {
                    if (popupManager.ActivePopup) {
                        PopupWindowEscape('Yes', popupManager.ActivePopup.Name);
                    }
                }
            }
            headerTableCellImage.style.width = '22px';
            headerTableCellImage.appendChild(headerPopupCloser);
            headerTableCell.style.paddingLeft = '22px';
            headerTableCellImage.style.cursor = 'default';
        }
        headerTableCell.innerText = this.Title;
        headerTable.style.width = '100%';
        header.style.textAlign = 'center';
        header.style.verticalAlign = 'middle';
        header.style.width = '100%';
        header.tag = 'PopupWindow_Header';
        header.appendChild(headerTable);
        header.className = this.CssClass + '_Header';
        header.style.cursor = 'move';
        header.onmousedown = function () {
            enableMovement(this.parentNode);
        }
        header.onmouseup = function () {
            disableMovement(this.parentNode);
        }
        header.onkeyup = function () {
            if (window.event) {
                var key = window.event.keyCode;
                if (window.event.keyCode == 27) {
                    // Escape
                    QuestionBox('Close Popup', 'Are you sure you want to close the current popup window?', 'No,Yes', 'PopupWindowEscape', 200, 200, window.self, popupManager.ActivePopup.Name);
                }
            }
            header.onselectstart = function(){ return false;};
        }

        //Create Body
        if (!this.MessageBox) {
            var strframe = '<iframe id="' + this.Name + '_Frame' + '" name="' + this.Name + '_Frame' + '" frameborder="0" scrolling="no" tag="PopupWindow_Frame" src="' + this.Src + '"  style="width: 100%; height: ' + this.Height + ' +px"  title=""></iframe>';
            body.innerHTML += strframe;
            frame = $(body).find("#" + this.Name + '_Frame')[0];
            frame.popupManager = this.PopupWindowManager;
            frame.pageWindowName = this.Name;
            if (!frame.opener) {
                if (openerPage) {
                    frame.opener = openerPage;
                }
                else {
                    frame.opener = this.Opener;
                }
            }
            frame.className = this.CssClass + '_Frame';
            //body.appendChild(frame);
        }
        else {
            messageDiv.innerHTML = this.Src;
            messageDiv.style.height = '100%';
            messageDiv.style.width = '100%';
            messageDiv.style.padding = '5px';
            messageDiv.style.paddingBottom = '35px';

            body.appendChild(messageDiv);

            var footer = document.createElement('div');
            var footerTable = document.createElement('table');
            var footerTableRow = footerTable.insertRow(0);
            var footerTableCell = footerTableRow.insertCell(0);

            footer.className = 'PopupFooter';
            footerTable.style.width = '100%';
            footerTable.style.height = '100%';
            footerTable.cellPadding = 0;
            footerTable.cellSpacing = 0;
            footerTableCell.style.textAlign = 'right';

            var footerPopupCloser = document.createElement('button');
            footerPopupCloser.innerText = 'Close';
            footerPopupCloser.style.cursor = 'hand';
            footerPopupCloser.onmouseup = function () { //have to use mousedown for chrome
                if (popupManager.ActivePopup) {
                    PopupWindowEscape('Yes', popupManager.ActivePopup.Name);
                }
            }
            footerTableCell.appendChild(footerPopupCloser);
            footer.appendChild(footerTable);
            body.appendChild(footer);
        }

        body.style.width = '100%';
        body.style.background = 'white';
        body.style.overflow = 'hidden';
        body.tag = 'PopupWindow_Body';
        body.className = CssClass + '_Body';


        movingDiv.style.width = '100%';
        movingDiv.style.height = '100%';
        movingDiv.style.left = '0px';
        movingDiv.style.top = '0px';
        movingDiv.style.position = 'absolute';
        movingDiv.style.display = 'none';
        movingDiv.forMoving = true;
        movingDiv.style.background = 'white';
        movingDiv.style.opacity = '0.01';
        movingDiv.style.filter = 'alpha(opacity=1)';
        movingDiv.style.cursor = 'move';
        body.appendChild(movingDiv);

        //Create Container
        container.style.position = 'absolute';
        container.tag = 'PopupWindow_Container';
        container.id = this.id;
        container.className = CssClass + '_Container';
        if (!this.MessageBox) container.style.width = this.Width + 'px';
        container.appendChild(header);
        container.appendChild(body);

        //Create Dimmer
        dimmer.id = 'Popup_Dimmer';
        dimmer.style.position = 'absolute';
        dimmer.style.top = '0px';
        dimmer.style.left = '0px';
        dimmer.style.background = 'grey';
        dimmer.style.opacity = 0.60;
        dimmer.style.filter = 'alpha(opacity = 60)';
        dimmer.style.display = 'none';
        dimmer.style.width = '100%';
        dimmer.style.height = '100%';
        container.appendChild(dimmer);

        if (this.ParentContainer && !this.isOpen) {
            this.ParentContainer.appendChild(container);
            dimmer.style.height = body.offsetHeight + 'px';
            dimmer.style.width = body.offsetWidth + 'px';

            container.style.left = (wManager.getWidth() / 2) - (this.Width / 2) + 'px';
            container.style.top = (wManager.getHeight() / 2) - ((this.Height + header.offsetHeight) / 2) + 'px';

            if (parseInt(container.style.left) < 0) {
                container.style.left = '0px';
            }
            if (parseInt(container.style.top) < 0) {
                container.style.top = '0px';
            }

            this.Window = container;
            this.Dimmer = dimmer;
            this.Header = header;
            this.Body = body;
            this.Frame = frame;
            this.isOpen = true;
            this.PopupWindowManager.ActivePopup = this;
            this.PopupWindowManager.PopupDimmer.style.display = 'block';
            popupManager.ActivePopup.SetHeight(this.Height); //ie 8 needs this


            //this is for showing dimmer 
            if (popupManager) {
                var popupWindows = popupManager.PopupWindows;
                for (var i = 0; i <= popupWindows.length - 1; i++) {
                    if (popupManager.ActivePopup != popupWindows[i]) {
                        popupWindows[i].showDimmer();
                    }
                    else {
                        popupWindows[i].hideDimmer();
                    }
                }
            }


            //Check if the popup window height is bigger then the containing window height.. If it is shrink the popup to the containing window height minus 40px...

            if (this.MessageBox) {
                var nWidth = this.Body.getElementsByTagName('div')[0].offsetWidth + 10;
                var nHeight = this.Body.getElementsByTagName('div')[0].scrollHeight + 30;

                if (nWidth < 300) {
                    nWidth = 300;
                }

                popupManager.GetPopupByName(this.Name).SetWidth(nWidth);
                popupManager.GetPopupByName(this.Name).SetHeight(nHeight);
            }

            var contHeight = wManager.getHeight();
            if (this.Height >= contHeight) {
                this.Height = contHeight - 40;
                popupManager.ActivePopup.SetHeight(this.Height);
            }
        }
    }
    this.onClose = '';
    this.Close = function () {
//        if (this.Frame.contentWindow) {
//            if (this.Frame.contentWindow.document) {
//                if (this.Frame.contentWindow.closeWindow) {
//                    this.Frame.contentWindow.closeWindow();
//                }
//            }
//        }
        this.PopupWindowManager.RemovePopupWindow(this.Name);
    }
    this.SetHeight = function (nHeight) {
        var wManager = new WindowManager();
        var contHeight = wManager.getHeight();
        if (nHeight >= contHeight) {
            nHeight = contHeight - 40;
        }

        this.Height = nHeight;
        this.Dimmer.style.height = nHeight + 'px';
        this.Body.style.height = nHeight + 'px';
        this.Frame.style.height = nHeight + 'px';
        this.ReCenter();
    }
    this.SetWidth = function (nWidth) {
        this.Width = nWidth;
        this.Window.style.width = nWidth + 'px';
        this.Dimmer.style.width = nWidth + 'px';
        this.ReCenter();
    }
    this.ReCenter = function () {
        var wManager = new WindowManager();
        this.Window.style.left = (wManager.getWidth() / 2) - (this.Width / 2) + 'px';
        var xTop = (wManager.getHeight() / 2) - ((this.Height + this.Header.offsetHeight) / 2)
        if (xTop < 0) { xTop = 0; }
        this.Window.style.top = xTop + 'px';
    }
    this.SetTitle = function (nTitle) {
        this.Title = nTitle;
        this.Header.getElementsByTagName('td')[0].innerText = nTitle;
    }
    this.showDimmer = function () {
        if (this.Dimmer) {
            //this.Dimmer.style.left = '0px';
            this.Dimmer.style.height = '100%';
            this.Dimmer.style.display = 'block';
        }
    }
    this.hideDimmer = function () {
        if (this.Dimmer) {
            this.Dimmer.style.display = 'none';
            var wMgr = new WindowManager();
        }
    }
    return this;
}
//End Popup Windows

//Message,Loading,Question Boxes
//These utilize the Popup Window Object
function MessageBox(Message, Title, Opener) {
    if (!Title) Title = 'Message';
    if (!Opener) Opener = this;
    var nMessage = popupManager.AddPopupWindow('Message', Title, Message, 100, 300, 'PopupWindow', Opener, true);

    if (nMessage) {
        nMessage.Open();
    }
}

function LoadingBox(strLoading) {
    var nLoading = popupManager.AddPopupWindow('Loading', 'Loading', '~/LoadingBox.aspx?strLoading=' + escape(strLoading) + '&random=' + Math.random(), 100, 300, 'PopupWindow', this);
    if (nLoading) {
        nLoading.Open();
        nLoading.Header.style.display = 'none';
        return nLoading;
    }
}

function QuestionBox(pTitle, pQuestion, pButtons, pFunction, pWidth, pHeight,openerPage, param) {
    try {
    	var src = 'QuestionBox.aspx?question=' + pQuestion + '&buttons=' + pButtons + '&function=' + pFunction + '&param=' + param;
        var nQuestion = popupManager.AddPopupWindow('Question', pTitle, src, 200, 300, 'PopupWindow', openerPage);
        if (nQuestion) {
            nQuestion.Open();
        }
    }
    catch (e) {
    }
}
//End Message,Loading,Question Boxes

//Error Handling
function DisplayErrorMessage(Function,Number,Description) {
    var sPath = window.location.pathname;
    var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);

    var nPopup = popupManager.AddPopupWindow('Error', 'Error Message', '~/ErrorPage.aspx?errorNumber=' + Number + '&errorDescription=' + Description + '&errorPage=' + sPage + '&errorFunction=' + Function, 100, 100, 'PopupWindow', this);
    if (nPopup) {
        nPopup.Open();
    }
}
//End Error Handling

//Element Movement
var oPositionX = '';
var oPositionY = '';
var movingElement = '';

document.onmouseup = function () { disableMovement(movingElement); };

function enableMovement(el) {
    var mDivs = el.getElementsByTagName('div');

    for (var i = 0; i <= mDivs.length - 1; i++) {
        if (mDivs[i].forMoving) {
            mDivs[i].style.display = 'block';
            break;
        }
    }

    movingElement = el;
    document.onmousemove = function () {
        moveElement(el);
    }
}

function disableMovement(el) {
    if (el) {
        var mDivs = el.getElementsByTagName('div');

        for (var i = 0; i <= mDivs.length - 1; i++) {
            if (mDivs[i].forMoving) {
                mDivs[i].style.display = 'none';
                break;
            }
        }

    movingElement = '';
    document.onmousemove = '';
    oPositionX = '';
    oPositionY = '';
    }
}

function moveElement(el) {    
    var movementEvent = this.event;
    var sPositionX = movementEvent.clientX;
    var sPositionY = movementEvent.clientY;

        if (oPositionX != '') {
            var newPos = parseInt(el.style.left) - (oPositionX - sPositionX);
            if (validateHorizontalMovement(el,newPos)){
                el.style.left = newPos + 'px';
            }
        }
        if (oPositionY != '') {
            var newPos = parseInt(el.style.top) - (oPositionY - sPositionY);
            if (validateVerticalMovement(el,newPos)){
                el.style.top = newPos + 'px';
            }
        }
    oPositionX = sPositionX;
    oPositionY = sPositionY;
}

function validateHorizontalMovement(el,newPos) {
    var wManager = new WindowManager();
    var elLeft = getAbsoluteLeft(el);
    var elRight = el.clientWidth + elLeft;

    if (newPos < elLeft) {
        if (elLeft <= 1) {
            return false;
        }
    }
    else {
        if (elRight >= wManager.getWidth() - 2) {
            return false;
        }
    }
    return true;
}

function validateVerticalMovement(el,newPos) {
    var wManager = new WindowManager();
    var elTop = getAbsoluteTop(el);
    var elBottom = el.clientHeight + elTop;

    if (newPos < elTop) {
        if (elTop <= 1) {
            return false;
        }
    }
    else {
        if (elBottom >= wManager.getHeight() - 2) {
            return false;
        }
    }
    return true;
}
//End Element Movement

//Absolute Positions
function getAbsoluteTop(el) {
    var iReturnValue = 0;
    while (el != null) {
        iReturnValue += el.offsetTop;
        el = el.offsetParent;
    }
    return iReturnValue;
}

function getAbsoluteLeft(el) {
    var iReturnValue = 0;
    while (el != null) {
        iReturnValue += el.offsetLeft;
        el = el.offsetParent;
    }
    return iReturnValue;
}

function getScrollBottom(p_oElem) {
    try {
        element = document.getElementById(p_oElem);
        return element.scrollHeight - element.scrollTop - element.clientHeight - 1;
    }
    catch (e) {
    }
}

function getScrollBarWidth() {
    var inner = document.createElement('p');
    inner.style.width = "100%";
    inner.style.height = "200px";

    var outer = document.createElement('div');
    outer.style.position = "absolute";
    outer.style.top = "0px";
    outer.style.left = "0px";
    outer.style.visibility = "hidden";
    outer.style.width = "200px";
    outer.style.height = "150px";
    outer.style.overflow = "hidden";
    outer.appendChild(inner);

    document.body.appendChild(outer);
    var w1 = inner.offsetWidth;
    outer.style.overflow = 'scroll';
    var w2 = inner.offsetWidth;
    if (w1 == w2) {
    	w2 = outer.getAttribute('clientWidth')
    };

    document.body.removeChild(outer);

    return (w1 - w2);
}
//End Absolute Positions

//Window Mananger
function WindowManager() {
    // We find out what type of browser we are in
    // and set some object properties accordingly.
    this.isIE = false;
    this.isMozilla = false;
    this.isOldIE = false;

    if (window.innerHeight)
        this.isMozilla = true;
    // IE
    else if (document.documentElement && document.documentElement.clientHeight)
        this.isIE = true;
    // IE 4
    else if (document.body.clientHeight)
        this.isOldIE = true;
}
WindowManager.prototype.getHeight = function () {
    var height;
    // Mozilla
    if (this.isMozilla)
        height = window.innerHeight;
    // IE
    else if (this.isIE)
        height = document.documentElement.clientHeight;
    // IE 4
    else if (this.isOldIE)
        height = document.body.clientHeight;

    return height;
};
WindowManager.prototype.getWidth = function () {
    var width;
    // Mozilla
    if (this.isMozilla)
        width = window.innerWidth;
    // IE
    else if (this.isIE)
        width = document.documentElement.clientWidth;
    // IE 4
    else if (this.isOldIE)
        width = document.body.clientWidth;

    return width;
};
function getWindowHeight(wm) {
    var height = 0;
    if (wm.isMozilla) {
        height = window.innerHeight;
    }
    else if (wm.isIE) {
        height = document.documentElement.clientHeight;
    }
    else if (wm.isOldIE) {
        height = document.body.clientHeight;
    }

    return height;
}
//End Window Manager

//Context Menus
function closeContextMenuItems(el,path) {
    try{
        var elementPage = this;
        var element = el || event.srcElement;
        var contextButtonClicked = false;

        var loopedObjects = element;

        //check if the button that opens the Context Menu was pressed, we dont want to close the context menu this way if it was.
        if (element.srcElement) {
            loopedObjects = element.srcElement;
            while (loopedObjects.parentNode) {
                if (loopedObjects.ContextMenuButton) {
                    contextButtonClicked = true;
                    break;
                }
                loopedObjects = loopedObjects.parentNode;
            }
        }
        else {
            while (loopedObjects.parentNode) {
                if (loopedObjects.ContextMenuButton) {
                    contextButtonClicked = true;
                    break;
                }
                loopedObjects = loopedObjects.parentNode;
            }
        }
        //----

        if (!contextButtonClicked) {

            var frames = document.getElementsByTagName('iframe');

            var contextMenuItems = document.getElementsByTagName('div');

            for (var i = 0; i <= contextMenuItems.length - 1; i++) {
                if (contextMenuItems[i].ContextMenu) {
                    contextMenuItems[i].style.display = 'none';
                }
            }

            if (path != 'down') {//if the path is down we dont try to close parent pages or it will infinit loop
                while (elementPage != elementPage.parent) {//closes context menus from parent pages
                    if (elementPage.parent.closeContextMenuItems) {
                        elementPage.parent.closeContextMenuItems(element);
                    }
                    elementPage = elementPage.parent;
                }
            }

            for (var i = 0; i <= frames.length - 1; i++) {//closes context menus from child pages
                if (frames[i].contentWindow.document) {
                    if (frames[i].contentWindow.closeContextMenuItems) {
                        frames[i].contentWindow.closeContextMenuItems(element, 'down');
                    }
                }
            }
        }
    }
    catch (e) {
    }
}

addEventHandler(document, 'click', closeContextMenuItems);
//End Context Menus

//Menu Items
function closeMenuItem(elementToCloseID, openingElementID) {
    var clickedObject = event.srcElement;
    var loopedObjects = clickedObject;
    var elementToClose = document.getElementById(elementToCloseID);
    var openingElement = document.getElementById(openingElementID);
    var blnForObject = false;

    while (loopedObjects.parentNode) {
        if (loopedObjects == elementToClose || loopedObjects == openingElement) {
            blnForObject = true;
            break;
        }
        loopedObjects = loopedObjects.parentNode;
    }

    if (!blnForObject && elementToClose) {
        elementToClose.style.display = 'none';
    }

}
//End Menu Items


//Related Items
function repositionRelatedItems(itemID, btnID) {
    var btnRelatedItems = document.getElementById(btnID);
    var relatedItems = document.getElementById(itemID);

    var top = getAbsoluteTop(btnRelatedItems) + btnRelatedItems.offsetHeight + 2;
    var left = getAbsoluteLeft(btnRelatedItems) - relatedItems.offsetWidth + btnRelatedItems.offsetWidth - 2;

    relatedItems.style.top = top + 'px';
    relatedItems.style.left = left + 'px';
}

function relatedItems_Selected(item, selectorID) {
    var selector = document.getElementById(selectorID);
    if (selector) {
        selector.style.display = 'block';
        selector.style.width = item.offsetWidth - 4 + 'px';
        selector.style.top = item.offsetTop + 2 + 'px';
        selector.style.left = item.offsetLeft + 2 + 'px';
    }
}

function relatedItems_DeSelected(item, selectorID) {
    var selector = document.getElementById(selectorID);
    if (selector) {
        selector.style.display = 'none';
    }
}

function showRelatedItems(btnRelatedItemsID, pageRelatedItemsID) {
    var pageRelatedItems = document.getElementById(pageRelatedItemsID);

    if (pageRelatedItems.style.display != 'block') {
        pageRelatedItems.style.display = 'block';
        moveRelatedItems(btnRelatedItemsID, pageRelatedItemsID);
    }
    else {
        hideRelatedItems(pageRelatedItemsID);
    }
}

function hideRelatedItems(pageRelatedItemsID) {
    var pageRelatedItems = document.getElementById(pageRelatedItemsID);

    pageRelatedItems.style.display = 'none';
}

function moveRelatedItems(btnRelatedItemsID, pageRelatedItemsID) {
    var btnRelatedItems = document.getElementById(btnRelatedItemsID);
    var pageRelatedItems = document.getElementById(pageRelatedItemsID);

    var top = (parseInt(getAbsoluteTop(btnRelatedItems)) + parseInt(btnRelatedItems.offsetHeight) + 5) + 'px';
    var left = (parseInt(getAbsoluteLeft(btnRelatedItems)) - (parseInt(pageRelatedItems.offsetWidth) - parseInt(btnRelatedItems.offsetWidth))) + 'px';

    pageRelatedItems.style.top = top;
    pageRelatedItems.style.left = left;
}
//End Related Items

//Frame Information
function getMyFrameFromParent() {
    var arrFrames = parent.document.getElementsByTagName("IFRAME");
    for (var i = 0; i <= arrFrames.length-1; i++) {
        if (arrFrames[i].contentWindow == window) {
            return arrFrames[i];
        }
    }
}
//End Frame Information

//Manipulate Div Button images for mouseover,mouseout,click
function highlightButton(button, value) {
    try {
        var eDivs = button.getElementsByTagName('div');

        if (value == 0) {
            eDivs[0].style.backgroundPosition = "0px 0px";
            eDivs[1].style.backgroundPosition = "0px 0px";
            eDivs[3].style.backgroundPosition = "0px 0px";
        }
        else if (value == 1) {
            eDivs[0].style.backgroundPosition = "6px 0px";
            eDivs[1].style.backgroundPosition = "600px 0px";
            eDivs[3].style.backgroundPosition = "6px 0px";
        }
        else if (value == 2) {
            eDivs[0].style.backgroundPosition = "3px 0px";
            eDivs[1].style.backgroundPosition = "300px 0px";
            eDivs[3].style.backgroundPosition = "3px 0px";
        }
        else {
            eDivs[0].style.backgroundPosition = "0px 0px";
            eDivs[1].style.backgroundPosition = "0px 0px";
            eDivs[3].style.backgroundPosition = "0px 0px";
        }
    }
    catch (e) {
    }
}
//End Manipulate Div Buttons

//Resize Handlers
function frameContent(frame) {
    var iFrameContent;
    if (frame.contentDocument) { // FF CHROME SAFARI
        iFrameContent = frame.contentDocument;
    }
    else if (frame.contentWindow) { // IE
        iFrameContent = frame.contentWindow.document;
    }
    return iFrameContent;
}

function resizePageElement(elID, modifier) {
    var el = document.getElementById(elID);
    if (el) {
        var wm = new WindowManager;
        if (!modifier) {
            modifier = 0;
        }
        var height = wm.getHeight() - getAbsoluteTop(el) - modifier;

        if (height > 10) {
            if (el) {
                el.style.height = height + 'px';
                el.height = height;
                if (wm.isMozilla) {
                    el.height = height + 'px';
                }
                if (el.tagName.toUpperCase() == 'IFRAME') {
                    if (frameContent) {
                        var content = frameContent(el);
                        if (content.body) {
                            content.body.style.height = height + 'px';
                        }
                    }
                }
            }
        }
    }
}
function resizeElementWidth(elID, width) {
    var elem = $('#' + elID);
    if (elem) {
        elem.width(width);
        if (elem[0].tagName.toUpperCase() == 'IFRAME') {
            if (elem.contentWindow.document.body) {
                elem.contentWindow.document.body.style.width = width;
            }
        }
    }
}

function resizeFrameFromContents(frameID, modifier) {
    var frame = parent.document.getElementById(frameID);

    if (frame) {
        if (!modifier) {
            modifier = 0;
        }
        //var wm = new WindowManager();
        var height = document.body.offsetHeight - modifier;

        if (height > 10) {
            frame.style.height = parseInt(height) + 'px';
        }
    }
}
//End Resize Handlers

//Event Handlers
function addEventHandler(to_element, event, handler) {
    if (to_element.addEventListener) to_element.addEventListener(event, handler, false);
    else if (to_element.attachEvent) to_element.attachEvent('on' + event, handler);
    else return false;
}

//Event Handlers

//Math
function highestCommonFactor(a, b) {
    while (b != 0) {
        var t = b;
        b = a % b;
        a = t;
    }

    return a;
}

function decimalToFraction(num) {
    if (num != Infinity) {
        var decimalArray = num.toString().split(".");
        var leftDecimalPart = decimalArray[0];
        var rightDecimalPart = decimalArray[1];
        var wholeNumber = leftDecimalPart;
        leftDecimalPart = '';
        if (rightDecimalPart) {
            var numerator = leftDecimalPart + rightDecimalPart
            var denominator = Math.pow(10, rightDecimalPart.length);
            var factor = highestCommonFactor(numerator, denominator);
            denominator /= factor;
            numerator /= factor;

            if (wholeNumber != 0 && wholeNumber != -0) {
                return wholeNumber + ' ' + numerator + '/' + denominator;
            }
            else {
                return numerator + '/' + denominator;
            }
        }
        return num;
    }
    else {
        return 0;
    }
}

function fractionToDecimal(num) {
    var values = num.split(' ');
    if (values[1]) {
        values[1] = eval(values[1]);
        var splitValues = values[1].toString().split('.');
        if (splitValues.length > 1) {
            values[0] = parseInt(values[0]) + parseInt(splitValues[0]);
            values[1] = splitValues[1];
        }
    }
    return values.join('.');
}
//-------------

function postToURL(frame, url, params) {
    var form = document.createElement("form");
    form.setAttribute("method", 'post');
    form.setAttribute("action", url);
    form.setAttribute("target", frame);

    for (var key in params) {
        if (params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);
            form.appendChild(hiddenField);
        }
    }

    document.body.appendChild(form);
    form.submit();
    document.body.removeChild(form);
}

function postMyURL(form, url, params) {
    form.setAttribute("method", 'post');
    form.setAttribute("action", url);

    for (var key in params) {
        if (params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);
            form.appendChild(hiddenField);
        }
    }

    form.submit();
}

//Main Menu Closer
function closeMainMenu(elID) {
    var srcElement = event.srcElement;
    
    var mainMenuPanel = null;
    if (elID == 'tdFRMMenu') { mainMenuPanel = defaultParentPage.menuPanelContainer; }
    else if (elID == 'tdFRMTools') { mainMenuPanel = defaultParentPage.toolPanelContainer; }

    while (srcElement) {
        if (srcElement == mainMenuPanel || srcElement.id == elID) {
            return;
        }
        srcElement = srcElement.parentNode;
    }

    if (mainMenuPanel) mainMenuPanel.style.display = 'none';

    return;
}

function removeLeadingTrailingCharacter(text, c) {
    try {

        while (text.length > 0 && text.substr(0, 1) == c) {
            text = text.substr(1);
        }

        while (text.length > 0 && text.substr(text.length - 1) == c) {
            text = text.substr(0, text.length - 1);
        }

        return text;
    } catch (e) {
        alert('Error: Scripts/funds_common.js-removeLeadingTrailingCharacter() ' + e.message);
        return text;
    }
} //end removeLeadingTrailingCharacter()

function insertItemsToCheckBoxList(list, items, repeatDirection, repeatCount) {
    try {
        if (list) {
            if (typeof items === 'string') {
                items = items.split(',');
            }
            if (!repeatCount) {
                repeatCount = 1;

                if (repeatDirection == 'HORIZONTAL') {
                    repeatDirection = 'VERTICAL';
                }
                else {
                    repeatDirection = 'HORIZONTAL';
                }
            }
            if (!repeatDirection) {
                repeatDirection = 'HORIZONTAL';
            }

            var itemCounter = 0;

            clearCheckBoxList(list);

            if (items.length > 0) {
                if (repeatDirection.toUpperCase() == 'VERTICAL') {
                    var cellCount = Math.ceil(items.length / repeatCount);
                    var rowCount = repeatCount;
                }
                if (repeatDirection.toUpperCase() == 'HORIZONTAL') {
                    var rowCount = Math.ceil(items.length / repeatCount);
                    var cellCount = repeatCount;
                }

                for (var i = 0; i <= rowCount - 1; i++) {
                    var nRow = list.insertRow();
                    for (var c = 0; c <= cellCount - 1; c++) {
                        if (items[itemCounter]) {
                            var nCell = nRow.insertCell();
                            var nCheck = document.createElement('input');
                            var nLabel = document.createElement('label');

                            nCheck.type = 'checkbox';
                            nCheck.id = list.id + '_' + itemCounter;
                            nCheck.name = list.id + '$' + itemCounter;

                            nLabel.htmlFor = list.id + '_' + itemCounter;
                            nLabel.innerText = items[itemCounter];

                            nCell.appendChild(nCheck);
                            nCell.appendChild(nLabel);
                        }
                        else {
                            break;
                        }

                        itemCounter++;
                    }
                }
            }
        }
    }
    catch (e) {
    }
}

function setSelectedCheckBoxListItems(checkBoxList, selectedItems) {
    if (checkBoxList) {
        selectedItems = ',' + selectedItems.toUpperCase() + ',';
        var checkboxes = checkBoxList.getElementsByTagName('input');
        for (var i = 0; i <= checkboxes.length - 1; i++) {
            var checkBox = checkboxes[i];
            if (checkBox) {
                var checkLabel = checkBox.nextSibling;
                if (checkLabel) {
                    if (selectedItems.indexOf(',' + checkLabel.innerText.toUpperCase() + ',') > -1) {
                        checkBox.checked = true;
                    }
                }
            }
        }
    }
}

function getSelectedCheckBoxListText(checkBoxList) {
    if (checkBoxList) {
        var text = '';
        var checkboxes = checkBoxList.getElementsByTagName('input');
        for (var i = 0; i <= checkboxes.length - 1; i++) {
            var checkBox = checkboxes[i];
            if (checkBox) {
                if (checkBox.checked) {
                    if (text === '') {
                        text = getCheckBoxText(checkBox);
                    }
                    else {
                        text += ',' + getCheckBoxText(checkBox);
                    }
                }
            }
        }
        return text;
    }
    return '';
}

function getSelectedCheckBoxListValue(checkBoxList) {
    if (checkBoxList) {
        var value = '';
        var checkboxes = checkBoxList.getElementsByTagName('input');
        for (var i = 0; i <= checkboxes.length - 1; i++) {
            var checkBox = checkboxes[i];
            if (checkBox) {
                if (checkBox.checked) {
                    if (value === '') {
                        value = checkBox.getAttribute('value')
                    }
                    else {
                        value += ',' + checkBox.getAttribute('value')
                    }
                }
            }
        }
        return value;
    }
    return '';
}

function getSelectedCheckBoxListIndex(checkBoxList) {
    if (checkBoxList) {
        var value = '';
        var checkboxes = checkBoxList.getElementsByTagName('input');
        for (var i = 0; i <= checkboxes.length - 1; i++) {
            var checkBox = checkboxes[i];
            if (checkBox) {
                if (checkBox.checked) {
                    if (value === '') {
                        value = i;
                    }
                    else {
                        value += ',' + i;
                    }
                }
            }
        }
        return value;
    }
    return '';
}

function getCheckBoxText(checkBox,html) {
    if (checkBox) {
        if (html) {
            return checkBox.nextSibling.innerHTML;
        }
        else {
            return checkBox.nextSibling.innerText;
        }
    }
}

function clearCheckBoxList(list) {
    if (list) {
        for (var i = list.rows.length - 1; i >= 0; i--) {
            list.deleteRow(i);
        }
    }
}

addEventHandler(document, 'click', function () { closeMainMenu('tdFRMMenu') });
addEventHandler(document, 'click', function () { closeMainMenu('tdFRMTools') });

//Bubble message popup

function bubbleMessage(srcElement, html) {
    this.open = false;
    this.container = document.createElement('div');
    this.contentContainer = null;
    this.arrow = '';
    this.innerHTML = html;
    this.textAlign = 'left';
    this.verticalAlign = '';
    this.horizontalAlign = '';
    this.srcElement = srcElement || document.getElementById('srcElement');
    this.show = function () {
        if (this.srcElement && this.container) {
            this.container.style.display = 'block';
            this.position();
        }
    };
    this.hide = function () {
        if (this.container) {
            this.container.style.display = 'none';
        }
    };
    this.setInnerText = function (value) {
        this.contentContainer.innerText = value;
    };
    this.setInnerHTML = function (value) {
        this.contentContainer.innerHTML = value;
    };
    this.position = function () {
        if (this.srcElement && this.container) {
            var top = 0;
            var bottom = 0;

            switch (this.verticalAlign.toUpperCase()) {
                case 'TOP': default:
                    top = this.getSourceTop() - (this.container.offsetHeight / 2);
                    break;
                case 'MIDDLE':
                    top = this.getSourceTop() + (this.srcElement.offsetHeight / 2) - (this.container.offsetHeight / 2);
                    break;
                case 'BOTTOM':
                    top = this.getSourceTop() + this.srcElement.offsetHeight - (this.container.offsetHeight / 2);
                    break;
            }
            switch (this.horizontalAlign.toUpperCase()) {
                case 'LEFT': default:
                    left = this.getSourceLeft() - (this.container.offsetWidth / 2);
                    break;
                case 'CENTER':
                    left = this.getSourceLeft() + (this.srcElement.offsetWidth / 2) - (this.container.offsetWidth / 2);
                    break;
                case 'RIGHT':
                    left = this.getSourceLeft() + this.srcElement.offsetWidth - 8;
                    break;
            }

            this.arrow.style.top = '20px';
            this.arrow.style.left = '4px';

            this.container.style.top = top + 'px';
            this.container.style.left = left + 'px';
        }
    };

    this.getSourceTop = function () {
        var iReturnValue = 0;
        var el = this.srcElement;
        while (el != null) {
            iReturnValue += el.offsetTop;
            el = el.offsetParent;
        }
        return iReturnValue;
    };

    this.getSourceLeft = function () {
        var iReturnValue = 0;
        var el = this.srcElement;
        while (el != null) {
            iReturnValue += el.offsetLeft;
            el = el.offsetParent;
        }
        return iReturnValue;
    };

    if (this.container) {
        var table = document.createElement('table');
        var topRow = table.insertRow(0);
        var middleRow = table.insertRow(1);
        var bottomRow = table.insertRow(2);
        var divContents = document.createElement('div');
        var imgArrow = document.createElement('img');

        for (var i = 0; i <= 3; i++) {
            topRow.insertCell(i);
            middleRow.insertCell(i);
            bottomRow.insertCell(i);
        }

        this.container.appendChild(table);
        this.contentContainer = divContents;
        middleRow.cells[1].appendChild(divContents);

        table.cellPadding = 0;
        table.cellSpacing = 0;

        topRow.cells[0].style.width = '20px';
        topRow.cells[0].style.height = '20px';
        topRow.cells[2].style.width = '20px';
        topRow.cells[2].style.height = '20px';
        topRow.cells[1].style.height = '20px';

        middleRow.cells[0].style.width = '20px';
        middleRow.cells[1].style.height = '20px';

        bottomRow.cells[0].style.width = '20px';
        bottomRow.cells[0].style.height = '20px';
        bottomRow.cells[2].style.width = '20px';
        bottomRow.cells[2].style.height = '20px';
        bottomRow.cells[1].style.height = '20px';

        imgArrow.style.width = '20px';
        imgArrow.style.height = '20px';

        imgArrow.src = 'images/bubble/bubble_arrow_left_yellow.png';


        topRow.cells[0].innerHTML = '&nbsp;';
        topRow.cells[1].innerHTML = '&nbsp;';
        topRow.cells[2].innerHTML = '&nbsp;';

        middleRow.cells[0].innerHTML = '&nbsp;';
        middleRow.cells[2].innerHTML = '&nbsp;';

        bottomRow.cells[0].innerHTML = '&nbsp;';
        bottomRow.cells[1].innerHTML = '&nbsp;';
        bottomRow.cells[2].innerHTML = '&nbsp;';

        if (this.innerHTML) {
            divContents.innerHTML = this.innerHTML;
        }
        else {
            divContents.innerHTML = '&nbsp;';
        }

        this.container.style.display = 'none';
        this.container.style.position = 'absolute';
        this.container.style.left = '0px';
        this.container.style.top = '0px';
        this.container.style.cursor = 'default';

        divContents.style.paddingLeft = '4px';
        divContents.style.paddingRight = '4px';
        divContents.style.textAlign = this.textAlign;

        imgArrow.style.position = 'absolute';

        this.arrow = imgArrow;

        this.container.appendChild(imgArrow);

        var bubbleM = this;
        this.container.onclick = function () { bubbleM.hide(); };
        $(this.container).attr('id', 'divBubbleMessage');
        document.body.appendChild(this.container);
        srcElement.bubbleMessage = this;

        srcElement.setAttribute('bubbleMessage', this);
    }
}

function closeActiveBubbleMessagesFromPopup() {
    var allElements = document.getElementsByTagName('*');
    activeBubbleMessages = [];
    for (var i = 0; i <= allElements.length - 1; i++) {
        var bubbleMessage = allElements[i].bubbleMessage;
        if (!bubbleMessage && allElements[i].getAttribute) {
            bubbleMessage = allElements[i].getAttribute('bubbleMessage');
        }
        if (bubbleMessage) {
            if (bubbleMessage.container.style.display == 'block') {
                activeBubbleMessages[activeBubbleMessages.length] = bubbleMessage;
                bubbleMessage.hide();
            }
        }
    }
}

function showActiveBubbleMessagesFromPopup() {
    for (var i = 0; i <= activeBubbleMessages.length - 1; i++) {
        activeBubbleMessages[i].show();
    }
    activeBubbleMessages = [];
}
