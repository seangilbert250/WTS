using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

using Newtonsoft.Json;
using WTS.Enums;

public partial class News_AddEdit : System.Web.UI.Page
{
    protected int _newsID = -1;
    protected int _newsTypeID = 0;
    protected string _editType = "";
    protected string JsonSeverAttributes;


    protected void Page_Load(object sender, EventArgs e)
    {
        ReadQueryString();
        InitializeEvents();
        InitializeControls();

        //If _newsID != -1 then we are editing a news entry
        if (_newsID != -1)
        {
            //Gather Datatable with NewsID
            DataTable dt = new DataTable();
            dt = WTSNews.GetNews(newsId: _newsID);

            if (dt.Rows.Count > 0)
            {
                Dictionary<string, object> SeverAttributes = new Dictionary<string, object>();
                //Set Control Values
                SeverAttributes.Add("txtArticleTitle", Server.HtmlEncode(dt.Rows[1]["Summary"].ToString()));
                SeverAttributes.Add("textNewsBody", Server.HtmlEncode(dt.Rows[1]["Detail"].ToString()));
                SeverAttributes.Add("ddlNotificationType", dt.Rows[1]["Bln_News"].ToString());
                SeverAttributes.Add("txtDateStart", dt.Rows[1]["Start_Date"].ToString());
                SeverAttributes.Add("txtDateEnd", dt.Rows[1]["End_Date"].ToString());
                if (dt.Rows[1]["Bln_Active"].ToString() == "1")
                {
                    SeverAttributes.Add("Bln_Active", "true");
                }
                else
                {
                    SeverAttributes.Add("Bln_Active", "false");
                }
                JsonSeverAttributes = JsonConvert.SerializeObject(SeverAttributes);
            }

        }
    }

    private void InitializeControls()
    {

        if (this._newsTypeID == (int)NewsTypeEnum.News)
        {
            ddlNotificationType.Items.Insert(0, new ListItem("News Article", "1"));
            ddlNotificationType.Items.Insert(1, new ListItem("Sliding System Notification", "0"));
        }
        else if (this._newsTypeID == (int)NewsTypeEnum.NewsOverview)
        {
            ddlNotificationType.Items.Insert(0, new ListItem("News Overview", "2"));
        }

    }

    private void ReadQueryString()
    {
        if (Request.QueryString["newsTypeID"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["newsTypeID"]))
        {
            int.TryParse(Request.QueryString["newsTypeID"], out this._newsTypeID);
        }
        if (Request.QueryString["newsID"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["newsID"]))
        {
            int.TryParse(Request.QueryString["newsID"], out this._newsID);
        }
        if (Request.QueryString["editType"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["editType"]))
        {
            _editType = Request.QueryString["editType"].ToString();
        }
    }

    private void InitializeEvents()
    {
        btnSubmit.Click += btnSubmit_Click;
    }



    protected void btnSubmit_Click(Object sender, EventArgs e)
    {

        Dictionary<string, string> result = new Dictionary<string, string> { { "saved", "false" }, { "exists", "false" }, { "newID", "0" }, { "error", "" } };
        bool saved = false;//, result = false;
        int newAttachmentID = 0;
        string errorMsg = "";

        Dictionary<string, object> attributeList = new Dictionary<string, object>();
        attributeList.Add("NotificationType", ddlNotificationType.SelectedValue);
        attributeList.Add("StartDate", txtDateStart.Text);
        attributeList.Add("EndDate", txtDateEnd.Text);
        attributeList.Add("Active", cbActive.Checked.ToString());

        if (_newsTypeID == (int)NewsTypeEnum.News)
        {
            attributeList.Add("ArticleTitle", Server.UrlDecode(txtArticleTitle.Text));
            attributeList.Add("Description", Server.UrlDecode(textNewsBody.Value));
        }
        else
        {
            //The newsOverviews have an autogenerated Description & Title
            attributeList.Add("ArticleTitle", "Weekly Overview");
            attributeList.Add("Description", "Weekly Overview For: " + txtDateStart.Text + " TO " + txtDateEnd.Text);
        }

        try
        {
            WTSNewsArticle item = new WTSNewsArticle(attributeList);
            item.Description = Server.UrlDecode(item.Description);

            result = WTSNews.SaveNews(item, _newsID, _newsTypeID);

            if (result["saved"] == "True" && ddlNotificationType.SelectedValue == "2")
            {
                int news_ID = 0;

                int.TryParse(result["newID"], out news_ID);


                if (news_ID != 0)
                {
                    if (fileUpload.HasFiles)
                    {
                        foreach (var file in fileUpload.PostedFiles)
                        {
                            Stream fileStream = file.InputStream;
                            byte[] fileData = new byte[file.ContentLength];
                            string fileName = file.FileName;
                            string[] splitFileName = fileName.Split('\\');

                            fileName = splitFileName[splitFileName.Length - 1];

                            fileStream.Read(fileData, 0, fileData.Length);
                            fileStream.Close();

                            result["saved"] = WTSNews.NewsAttachment_Add(newsOverviewID: news_ID, attachmentTypeID: (int)AttachmentTypeEnum.NewsOverview, fileName: fileName, title: item.ArticleTitle, description: item.Description, fileData: fileData, extensionID: 0, newAttachmentID: out newAttachmentID, errorMsg: out errorMsg).ToString();

                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);

            result["error"] = ex.Message;
        }

        ScriptManager.RegisterStartupScript(this, this.GetType(), "complete", "<script type=\"text/javascript\">complete('" + JsonConvert.SerializeObject(result) + "');</script>", false);

    }
}