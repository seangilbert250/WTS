using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.Security;
using System.Web.Services;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;

using Newtonsoft.Json;


public partial class Task_Edit : System.Web.UI.Page
{
	protected int WorkItemID = 0;
	protected int WorkItem_TaskID = 0;
	protected int SaveComplete = 0;

	protected bool CanEdit = false;
    protected bool CanEditAOR = false;

    protected bool IsNew = false;


	protected void Page_Load(object sender, EventArgs e)
	{
		this.CanEdit = UserManagement.UserCanEdit(WTSModuleOption.WorkItemTask);
        this.CanEditAOR = UserManagement.UserCanEdit(WTSModuleOption.AOR);

        readQueryString();
		loadLookupData();

		if (this.WorkItem_TaskID > 0)
		{
			loadTask();
		}
		else
		{
			WorkloadItem wi = WorkloadItem.WorkItem_GetObject(workItemID: this.WorkItemID);
			WTSUtility.SelectDdlItem(ddlAssignedTo, wi.AssignedResourceID.ToString(), "");
			WTSUtility.SelectDdlItem(ddlPrimaryResource, wi.PrimaryResourceID.ToString(), "");


            // 12817 - 30:
            WTSUtility.SelectDdlItem(ddlPrimaryBusResource, wi.PrimaryBusinessResourceID.ToString(), "");
            WTSUtility.SelectDdlItem(ddlSecondaryResource, wi.SecondaryResourceID.ToString(), "");
            WTSUtility.SelectDdlItem(ddlSecondaryBusResource, wi.SecondaryBusinessResourceID.ToString(), "");

            WTSUtility.SelectDdlItem(ddlPriority, wi.PriorityID.ToString(), "");
            //WTSUtility.SelectDdlItem(ddlHours_Planned, wi.EstimatedEffortID.ToString(), "");
            WTSUtility.SelectDdlItem(ddlProductVersion, wi.ProductVersionID.ToString(), "");
            this.lblProductVersion.Text = ddlProductVersion.SelectedItem.Text;

            IsNew = true;
			this.txtWorkloadNumber.Text = this.WorkItemID.ToString() + " - NA";

			ListItem item = ddlStatus.Items.FindByText("New");
			if (item != null)
			{
				item.Selected = true;
			}

			if (wi != null)
			{
				int maxSort = 0, maxBusRank = 0;
				DataTable dt = WorkloadItem.WorkItem_GetTaskList(wi.WorkItemID, 1);
				if (dt != null && dt.Rows.Count > 0)
				{
					int sort = 0;
					foreach (DataRow row in dt.Rows)
					{
						int.TryParse(row["SORT_ORDER"].ToString(), out sort);
						if (sort > maxSort)
						{
							maxSort = sort;
						}
						int.TryParse(row["BusinessRank"].ToString(), out sort);
						if (sort > maxBusRank)
						{
							maxBusRank = sort;
						}
					}
				}
				txtSortOrder.Text = (maxSort + 1).ToString();
				txtBusinessRank.Text = (maxBusRank + 1).ToString();
			}

            item = ddlAssignedToRank.Items.FindByText("4 - Unprioritized Workload");
            if (item != null) item.Selected = true;
            txtBusinessRank.Text = "99";
        }
	}
	private void readQueryString()
	{
		if (Request.QueryString["workItemID"] != null
			&& !string.IsNullOrWhiteSpace(Request.QueryString["workItemID"].ToString()))
		{
			int.TryParse(Server.UrlDecode(Request.QueryString["workItemID"].ToString()), out this.WorkItemID);
		}
		if (Request.QueryString["taskID"] != null
			&& !string.IsNullOrWhiteSpace(Request.QueryString["taskID"].ToString()))
		{
			int.TryParse(Server.UrlDecode(Request.QueryString["taskID"].ToString()), out this.WorkItem_TaskID);
		}

		if (Request.QueryString["Saved"] != null
			&& !string.IsNullOrWhiteSpace(Request.QueryString["Saved"].ToString()))
		{
			int.TryParse(Server.UrlDecode(Request.QueryString["Saved"].ToString()), out this.SaveComplete);
		}
	}

	private void loadLookupData()
	{
		DataSet dsOptions = WorkItem_Task.GetAvailableOptions(workItemID: this.WorkItemID);

		if (dsOptions == null || dsOptions.Tables.Count == 0)
		{
			return;
		}

		ListItem item = null;

		if (dsOptions.Tables.Contains("Priority"))
		{
			ddlPriority.DataSource = dsOptions.Tables["Priority"];
			ddlPriority.DataTextField = "PRIORITY";
			ddlPriority.DataValueField = "PRIORITYID";
			ddlPriority.DataBind();
		}

        if (dsOptions.Tables.Contains("TshirtSizes"))
        {
            ddlHours_Planned.DataSource = dsOptions.Tables["TshirtSizes"];
            ddlHours_Planned.DataTextField = "EFFORTSIZE";
            ddlHours_Planned.DataValueField = "EFFORTSIZEID";
            ddlHours_Planned.DataBind();
        }

        if (dsOptions.Tables.Contains("TshirtSizes"))
        {
            ddlHours_Actual.DataSource = dsOptions.Tables["TshirtSizes"];
            ddlHours_Actual.DataTextField = "EFFORTSIZE";
            ddlHours_Actual.DataValueField = "EFFORTSIZEID";
            ddlHours_Actual.DataBind();
        }
	
		if (dsOptions.Tables.Contains("User"))
		{
			item = null;
			string name = string.Empty;

			foreach (DataRow row in dsOptions.Tables["User"].Rows)
			{
				name = string.Format("{0} {1}", row["FIRST_NAME"].ToString(), row["LAST_NAME"].ToString());
				item = new ListItem(name, row["WTS_RESOURCEID"].ToString());
				item.Attributes.Add("username", row["USERNAME"].ToString());
				item.Attributes.Add("organizationID", row["ORGANIZATIONID"].ToString());

				ddlAssignedTo.Items.Add(item);

				item = new ListItem(name, row["WTS_RESOURCEID"].ToString());
				item.Attributes.Add("username", row["USERNAME"].ToString());
				item.Attributes.Add("organizationID", row["ORGANIZATIONID"].ToString());

				ddlPrimaryResource.Items.Add(item);

                item = new ListItem(name, row["WTS_RESOURCEID"].ToString());
                item.Attributes.Add("username", row["USERNAME"].ToString());
                item.Attributes.Add("organizationID", row["ORGANIZATIONID"].ToString());

                ddlSecondaryResource.Items.Add(item);

                item = new ListItem(name, row["WTS_RESOURCEID"].ToString());
                item.Attributes.Add("username", row["USERNAME"].ToString());
                item.Attributes.Add("organizationID", row["ORGANIZATIONID"].ToString());

                ddlPrimaryBusResource.Items.Add(item);

                item = new ListItem(name, row["WTS_RESOURCEID"].ToString());
                item.Attributes.Add("username", row["USERNAME"].ToString());
                item.Attributes.Add("organizationID", row["ORGANIZATIONID"].ToString());

                ddlSecondaryBusResource.Items.Add(item);

            }
        }
		if (dsOptions.Tables.Contains("Status"))
		{
			ddlStatus.DataSource = dsOptions.Tables["Status"];
			ddlStatus.DataTextField = "Status";
			ddlStatus.DataValueField = "StatusID";
			ddlStatus.DataBind();
		}
		if (dsOptions.Tables.Contains("PercentComplete"))
		{
			ddlPercentComplete.DataSource = dsOptions.Tables["PercentComplete"];
			ddlPercentComplete.DataTextField = "Percent";
			ddlPercentComplete.DataValueField = "Percent";
			ddlPercentComplete.DataBind();
		}

        if (dsOptions.Tables.Contains("Rank"))
        {
            ddlAssignedToRank.DataSource = dsOptions.Tables["Rank"];
            ddlAssignedToRank.DataTextField = "PRIORITY";
            ddlAssignedToRank.DataValueField = "PRIORITYID";
            ddlAssignedToRank.DataBind();
        }

        if (dsOptions.Tables.Contains("ProductVersion"))
        {
            ddlProductVersion.DataSource = dsOptions.Tables["ProductVersion"];
            ddlProductVersion.DataTextField = "ProductVersion";
            ddlProductVersion.DataValueField = "ProductVersionID";
            ddlProductVersion.DataBind();
        }
    }

	private void loadTask()
	{
		WorkItem_Task task = new WorkItem_Task(taskID: this.WorkItem_TaskID);

		if (task == null || !task.Load())
		{
			return;
		}

		txtWorkloadNumber.Text = string.Format("{0} - {1}", task.WorkItemID.ToString(), task.Task_Number.ToString());
		WTSUtility.SelectDdlItem(ddlPriority, task.PriorityID.ToString(), task.Priority.ToString());
		txtTitle.Text = HttpUtility.HtmlDecode(Uri.UnescapeDataString(task.Title.Replace("&nbsp;", "").Trim()));
		WTSUtility.SelectDdlItem(ddlAssignedTo, task.AssignedResourceID.ToString(), task.AssignedResource.ToString());
		WTSUtility.SelectDdlItem(ddlPrimaryResource, task.PrimaryResourceID.ToString(), task.PrimaryResource.ToString());
        WTSUtility.SelectDdlItem(ddlSecondaryResource, task.SecondaryResourceID.ToString(), task.SecondaryResource.ToString());
        WTSUtility.SelectDdlItem(ddlPrimaryBusResource, task.PrimaryBusResourceID.ToString(), task.PrimaryBusResource.ToString());
        WTSUtility.SelectDdlItem(ddlSecondaryBusResource, task.SecondaryBusResourceID.ToString(), task.SecondaryBusResource.ToString());
        txtStartDate_Planned.Text = task.EstimatedStartDate;
		txtStartDate_Actual.Text = task.ActualStartDate;
		txtEndDate_Actual.Text = task.ActualEndDate;
        WTSUtility.SelectDdlItem(ddlHours_Planned, task.EstimatedEffortID.ToString(), task.PlannedHours.ToString());
        WTSUtility.SelectDdlItem(ddlHours_Actual, task.ActualEffortID.ToString(), task.ActualHours.ToString());
		WTSUtility.SelectDdlItem(ddlPercentComplete, task.CompletionPercent.ToString(), task.CompletionPercent.ToString());
		WTSUtility.SelectDdlItem(ddlStatus, task.StatusID.ToString(), task.Status);
		txtBusinessRank.Text = task.BusinessRank.ToString();
		txtSortOrder.Text = task.Sort_Order.ToString();
		textAreaDescription.InnerHtml = task.Description;
        txtSRNumber.Text = task.SRNumber.ToString();
        
        WTSUtility.SelectDdlItem(ddlAssignedToRank, task.AssignedToRankID.ToString(), "");
        WTSUtility.SelectDdlItem(ddlProductVersion, task.ProductVersionID.ToString(), task.ProductVersion.ToString());
        this.lblProductVersion.Text = task.ProductVersion;

        if (!IsNew)
		{
			this.labelCreated.Text = task.CreatedBy + " - " + task.CreatedDate;
			this.labelUpdated.Text = task.UpdatedBy + " - " + task.UpdatedDate;
        }
	}

	[WebMethod(true)]
	public static string SaveTask(int taskID, int workItemID, int priorityID
		, string title, string description, int assignedToID, int primaryResourceID, int secondaryResourceID
        , int primaryBusResourceID, int secondaryBusResourceID
        , string plannedStartDate, string actualStartDate, int estimatedEffortID, int actualEffortID, string actualEndDate
		, int completionPercent, int statusID, int businessRank, int sortOrder, string pageOption, string SRNumber, int assignedToRankID, int productVersionID)
	{
		Dictionary<string, string> result = new Dictionary<string, string>() { 
		{ "saved", "" }
		, { "id", "0" }
		, { "error", "" }
		, { "pageOption", pageOption } };
		bool saved = false, loaded = false;
		string errorMsg = string.Empty;

		try
		{
			HttpServerUtility server = HttpContext.Current.Server;
			description = server.UrlDecode(description);

			int submittedByID = 0;
			submittedByID = UserManagement.GetUserId_FromUsername();

			WorkItem_Task task = new WorkItem_Task(taskID);
			if (taskID > 0)
			{
				loaded = task.Load();
			}

			task.WorkItemID = workItemID;
			task.PriorityID = priorityID;
			task.Title = title;
			task.Description = description;
			task.AssignedResourceID = assignedToID;
			task.PrimaryResourceID = primaryResourceID;
            task.SecondaryResourceID = secondaryResourceID;
            task.PrimaryBusResourceID = primaryBusResourceID;
            task.SecondaryBusResourceID = secondaryBusResourceID;
            task.EstimatedStartDate = plannedStartDate;
			task.ActualStartDate = actualStartDate;
            task.EstimatedEffortID = estimatedEffortID;
			task.ActualEffortID = actualEffortID;
			task.ActualEndDate = actualEndDate;
			task.CompletionPercent = completionPercent;
			task.StatusID = statusID;
			task.BusinessRank = businessRank;
			task.Sort_Order = sortOrder;
            task.SRNumber = SRNumber;
            task.AssignedToRankID = assignedToRankID;
            task.ProductVersionID = productVersionID;

            if (taskID == 0)
			{
				task.SubmittedByID = submittedByID;

				saved = task.Add(newID: out taskID, errorMsg: out errorMsg);
								
				if (saved)
				{
					Workload.SendWorkloadEmail("WorkItemTask", true, taskID);
				}
			}
			else
			{
				if (loaded)
				{
					saved = task.Save(errorMsg: out errorMsg);
				}

				if (saved)
				{
					Workload.SendWorkloadEmail("WorkItemTask", false, taskID);
				}
			}
		}
		catch (Exception ex)
		{
			saved = false;
			errorMsg = ex.Message;
			LogUtility.LogException(ex);
		}

		result["saved"] = saved.ToString();
		result["id"] = taskID.ToString();
		result["error"] = errorMsg;

		return JsonConvert.SerializeObject(result, Formatting.None);
	}
}