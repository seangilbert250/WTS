using Aspose.Cells;  //for exporting to excel
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Web.Services;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Xml;
using CrystalDecisions.ReportAppServer.ClientDoc;
using TextBox = System.Web.UI.WebControls.TextBox;

public class FilterCols
{
    public string ColName { get; set; }
    public string Filter { get; set; }
    public FilterCols(string colName, string filter)
    {
        ColName = colName;
        Filter = filter;
    }


    //Other properties, methods, events...
}

public partial class AOR_Grid : System.Web.UI.Page
{
	#region Variables
	private bool MyData = true;
    protected bool CanEditWorkItem = false;
    protected bool CanViewWorkItem = false;
    protected bool CanEditAOR = false;
	protected bool CanViewAOR = false;
	protected int CurrentLevel = 1;
    protected int GridPageSize = 25;
    protected string Filter = string.Empty;
	protected bool IsConfigured = false;
	private XmlDocument Levels = new XmlDocument();
	protected DataColumnCollection DCC;
	protected int LevelCount = 0;
	protected int GridPageIndex = 0;
    protected DataTable dtCopy;
    protected List<string> ColNamesCopy;
    protected List<string> SubGridFilterCols;
    protected int StartCol = 0;
    protected int ColSpan = 0;
    protected string[] QFRelease = { };
    protected string[] QFContract = { };
    protected string[] QFTaskStatus = { };
    protected string[] QFSubTaskStatus = { };
    protected bool _export = false;
    protected int rowCount = 0;
    protected int dtRowCount = 0;
    protected int dtColumnCnt = 0;
    protected int uniA = (int)'A';
    protected bool hasDoubleHeader = false;
    protected int gridRowCnt = 0;
    #endregion

    #region Page
    private void Page_Load(object sender, EventArgs e)
    {
        if (Session["itisettings"] == null) Session["itisettings"] = "";
		ReadQueryString();
		ReadSession();
		InitializeEvents();
        LoadQF();
        loadMenus();

        CanEditWorkItem = UserManagement.UserCanEdit(WTSModuleOption.WorkItem);
        CanViewWorkItem = CanEditWorkItem || UserManagement.UserCanView(WTSModuleOption.WorkItem);
        CanEditAOR = UserManagement.UserCanEdit(WTSModuleOption.AOR);
		CanViewAOR = CanEditAOR || UserManagement.UserCanView(WTSModuleOption.AOR);
        HtmlTableRow trItem5 = (HtmlTableRow)Page.Master.FindControl("trItem5");
        DropDownList ddlGridPageSize = (DropDownList)Page.Master.FindControl("ddlItem5");
        if (this.CurrentLevel > 1)
        {
            grdData.PageSize = 12;

            if (this.GridPageSize == 0)
            {
                grdData.AllowPaging = false;
                ddlGridPageSize.SelectedValue = this.GridPageSize.ToString();
            }
            else
            {
                grdData.AllowPaging = true;
                grdData.PageSize = this.GridPageSize;
                ddlGridPageSize.SelectedValue = this.GridPageSize.ToString();
            }
        }

        DataTable dt = LoadData();
        gridRowCnt = dt.Rows.Count;
        if (dt != null) DCC = dt.Columns;
        if (_export)
        {
            ExportExcel(dt);
        }
        else
        {
            grdData.DataSource = dt;

            if (!Page.IsPostBack && GridPageIndex > 0 && GridPageIndex < ((decimal)dt.Rows.Count / (decimal)25)) grdData.PageIndex = GridPageIndex;
            grdData.DataBind();
        }
    }

	protected void grdData_OnGridRowDataBound(object sender, GridViewRowEventArgs e)
	{
		dynamic d = JsonConvert.DeserializeObject(Session["itisettings"].ToString());

		if (CurrentLevel == 1)
		{
			foreach (var item in d.tblCols)
            {
                if (item.concat == true)
					foreach (var i in item.catcols)
						e.Row.Cells.Cast<DataControlFieldCell>()
							.Where(c => c.ContainingField.HeaderText == i.Value)
							.ToList()
							.ForEach(c => c.ContainingField.Visible = false);

                if (item.columnwidth == 0)
                    e.Row.Cells.Cast<DataControlFieldCell>()
                        .Where(c => c.ContainingField.HeaderText == (!String.IsNullOrEmpty(item.alias.ToString()) ? item.alias.ToString() : item.name.ToString()))
                        .ToList()
                        .ForEach(c => c.ContainingField.Visible = false);
            }
        }
		else
		{
			var subgridLevel = 2;
			foreach (var obj in d)
				if (obj.Name.IndexOf("subgrid") != -1)
				{
					if (subgridLevel == CurrentLevel)
						foreach (var item in obj)
							foreach (var col in item[0].tblCols)
							{
								if (col.concat == true)
									foreach (var i in col.catcols)
										e.Row.Cells.Cast<DataControlFieldCell>()
											.Where(c => c.ContainingField.HeaderText == i.Value)
											.ToList()
											.ForEach(c => c.ContainingField.Visible = false);

							    if (col.columnwidth == 0)
							        e.Row.Cells.Cast<DataControlFieldCell>()
							            .Where(c => c.ContainingField.HeaderText == (!String.IsNullOrEmpty(col.alias.ToString()) ? col.alias.ToString() : col.name.ToString()))
							            .ToList()
							            .ForEach(c => c.ContainingField.Visible = false);
                            }

                    subgridLevel++;
				}
		}
    }

    protected void grdData_OnGridHeaderRowDataBound(object sender, GridViewRowEventArgs e)
    {
        var row = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Normal);
        dynamic d = JsonConvert.DeserializeObject(Session["itisettings"].ToString());
        var cell = new TableHeaderCell();
        var groupName = "";
        StartCol = 0;

        if (CurrentLevel == 1)
        {
            foreach (DataColumn col in dtCopy.Columns)
                if (col.ColumnName != "X" && col.ColumnName != "Z" && col.ColumnName.IndexOf("_ID", StringComparison.Ordinal) == -1)
                    foreach (var item in d.tblCols)
                        if ((col.ColumnName == item.name.ToString() || col.ColumnName == item.alias.ToString()) && item.columnwidth != 0)
                        {
                            if (string.IsNullOrEmpty(groupName)) StartCol++;
                            if (!string.IsNullOrEmpty(item.groupname.ToString()))
                            {
                                groupName = item.groupname;
                                break;
                            }
                        }

            foreach (var item in d.tblCols)
                if (item.groupname != "") ColSpan++;

            if (d.showcolumnheader == false)
                for (int i = 0; i < e.Row.Cells.Count; i++)
                    e.Row.Cells[i].Style["display"] = "none";
        }
        else
        {
            var subgridLevel = 2;
            foreach (var obj in d)
                if (obj.Name.IndexOf("subgrid") != -1)
                {
                    if (subgridLevel == CurrentLevel)
                    {
                        foreach (DataColumn col in dtCopy.Columns)
                            if (col.ColumnName != "X" && col.ColumnName != "Z" && col.ColumnName.IndexOf("_ID", StringComparison.Ordinal) == -1)
                                foreach (var item in obj)
                                    foreach (var i in item[0].tblCols)
                                        if ((col.ColumnName == i.name.ToString() || col.ColumnName == i.alias.ToString()) && i.columnwidth != 0)
                                        {
                                            if(string.IsNullOrEmpty(groupName)) StartCol++;
                                            if (!string.IsNullOrEmpty(i.groupname.ToString()))
                                            {
                                                groupName = i.groupname;
                                                break;
                                            }
                                        }
                    }
                    subgridLevel++;
                }

            subgridLevel = 2;
            foreach (var obj in d)
                if (obj.Name.IndexOf("subgrid") != -1)
                {
                    if (subgridLevel == CurrentLevel)
                        foreach (var item in obj)
                            foreach (var i in item[0].tblCols)
                                if (i.groupname != "") ColSpan++;

                    subgridLevel++;
                }
        }

        if (groupName != "")
        {
            cell = new TableHeaderCell();
            cell.Text = "";
            cell.ColumnSpan = StartCol - 1;
            row.Controls.Add(cell);

            cell = new TableHeaderCell();
            cell.Style.Add("font-weight", "bold");
            cell.Style.Add("border-bottom", "solid");
            cell.Text = groupName;
            cell.ColumnSpan = ColSpan;
            row.Controls.Add(cell);
            row.Controls.Add(cell);
            e.Row.Parent.Controls.AddAt(0, row);

            hasDoubleHeader = true;
        }
    }

    private void ReadSession()
	{
		var nDoc = new XmlDocument();
		var test = "<crosswalkparameters><level>";

		if (itisettings.Value == "" && Session["itisettings"].ToString() == "")
		{
			var items = WTSData.GetViewOptions(UserManagement.GetUserId_FromUsername(), "AOR");
		    var gridViewId = GetDefaultGridViewId(11, UserManagement.GetUserId_FromUsername());

            Session["itisettings"] = (from DataRow dr in items.Rows
								     where (int) dr["GridViewID"] == gridViewId
								     select (string) dr["Tier1Columns"]).FirstOrDefault();
		}

        dynamic data = JsonConvert.DeserializeObject(Session["itisettings"].ToString());
		foreach (var item in data.tblCols)
		{
			var sort = item.sortorder;
			if (sort == "none") sort = "Ascending";
			if (item.name == "AOR Customer Flagship") item.name = "Customer Flagship";
			if ( item.concat == false)
				if(item.show == true) test += "<breakout><column>" + item.name + "</column><sort>" + sort + "</sort></breakout>";
		}

		test += "</level>";
		foreach (var obj in data)
			if (obj.ToString().IndexOf("subgrid") > 0)
				foreach (var subgrid in obj)
				{
					test += "<level>";
					foreach (var item in subgrid[0].tblCols)
					{
						var sort = item.sortorder;
						if (sort == "none") sort = "Ascending";
						if (item.name == "AOR Customer Flagship") item.name = "Customer Flagship";
						if ( item.concat == false)
							if (item.show == true) test += "<breakout><column>" + item.name + "</column><sort>" + sort + "</sort></breakout>";
					}
					test += "</level>";
				}

		test += "</crosswalkparameters>";
		nDoc.InnerXml = test;
		Session["AORLevels"] = nDoc;

		if (Session["AORLevels"] != null) Levels = (XmlDocument) Session["AORLevels"];
		LevelCount = Levels.SelectNodes("crosswalkparameters/level").Count;
		if (LevelCount >= 1) IsConfigured = true;
	}

	private void ReadQueryString()
	{
		if (string.IsNullOrWhiteSpace(Request.QueryString["MyData"]) || Request.QueryString["MyData"].Trim() == "1" || Request.QueryString["MyData"].Trim().ToUpper() == "TRUE")
			MyData = true;
		else
			MyData = false;

		if (!string.IsNullOrWhiteSpace(Request.QueryString["CurrentLevel"]))
			int.TryParse(Request.QueryString["CurrentLevel"], out CurrentLevel);

		if (!string.IsNullOrWhiteSpace(Request.QueryString["Filter"]))
            Filter = Uri.UnescapeDataString(Request.QueryString["Filter"]);

        if (!string.IsNullOrWhiteSpace(Request.QueryString["GridPageIndex"]))
			int.TryParse(Request.QueryString["GridPageIndex"], out GridPageIndex);

        if (Request.QueryString["SelectedReleases"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["SelectedReleases"]))
            this.QFRelease = Request.QueryString["SelectedReleases"].Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

        if (Request.QueryString["SelectedContract"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["SelectedContract"]))
            this.QFContract = Request.QueryString["SelectedContract"].Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

	    if (Request.QueryString["SelectedTaskStatus"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["SelectedTaskStatus"]))
	        this.QFTaskStatus = Request.QueryString["SelectedTaskStatus"].Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

	    if (Request.QueryString["SelectedSubTaskStatus"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["SelectedSubTaskStatus"]))
	        this.QFSubTaskStatus = Request.QueryString["SelectedSubTaskStatus"].Trim().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        if (Request.QueryString["GridPageSize"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["GridPageSize"]))
            int.TryParse(Request.QueryString["GridPageSize"], out this.GridPageSize);
        if (Request.QueryString["Export"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["Export"]))
            bool.TryParse(Server.UrlDecode(Request.QueryString["Export"]), out _export);
    }

    private void loadMenus()
    {
        try
        {
            DataSet dsMenu = new DataSet();
            dsMenu.ReadXml(this.Server.MapPath("XML/WTS_Menus.xml"));

            if (dsMenu.Tables.Count > 0 && dsMenu.Tables[0].Rows.Count > 0)
            {
                if (dsMenu.Tables.Contains("AORGridRelatedItem"))
                {
                    menuRelatedItems.DataSource = dsMenu.Tables["AORGridRelatedItem"];
                    menuRelatedItems.DataValueField = "URL";
                    menuRelatedItems.DataTextField = "Text";
                    menuRelatedItems.DataIDField = "id";
                    if (dsMenu.Tables["AORGridRelatedItem"].Columns.Contains("AORGridRelatedItem_id_0"))
                    {
                        menuRelatedItems.DataParentIDField = "AORGridRelatedItem_id_0";
                    }
                    menuRelatedItems.DataImageField = "ImageType";
                    menuRelatedItems.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);
        }
    }
    private void InitializeEvents()
	{
		grdData.GridHeaderRowDataBound += grdData_GridHeaderRowDataBound;
		grdData.GridRowDataBound += grdData_GridRowDataBound;
		//grdData.GridPageIndexChanging += grdData_GridPageIndexChanging;
	}
    #endregion

    #region Data
    private void LoadQF()
    {
        DataTable dtRelease = MasterData.ProductVersionList_Get(includeArchive: false);
        DataSet dsOptions = AOR.AOROptionsList_Get(AORID: 0, TaskID: 0, AORMeetingID: 0, AORMeetingInstanceID: 0);
        DataTable dtCurrentRelease = AOR.AORCurrentRelease_Get();
        DataTable dtCrContract = dsOptions.Tables["CR Contract"];
        DataTable dtStatus = MasterData.StatusList_Get();

        Label lblms_Item0 = (Label)Page.Master.FindControl("lblms_Item0");
        Label lblms_Item1 = (Label)Page.Master.FindControl("lblms_Item1");
        Label lblms_Item9 = (Label)Page.Master.FindControl("lblms_Item9");
        Label lblms_Item9a = (Label)Page.Master.FindControl("lblms_Item9a");

        HtmlSelect ms_Item0 = (HtmlSelect)Page.Master.FindControl("ms_Item0");
        HtmlSelect ms_Item1 = (HtmlSelect)Page.Master.FindControl("ms_Item1");
        HtmlSelect ms_Item9 = (HtmlSelect)Page.Master.FindControl("ms_Item9");
        HtmlSelect ms_Item9a = (HtmlSelect)Page.Master.FindControl("ms_Item9a");

        lblms_Item9.Text = "Task Status: ";
        lblms_Item9a.Text = "Sub-Task Status: ";
        lblms_Item9.Style["width"] = "100px";
        lblms_Item9a.Style["width"] = "100px";

        foreach (DataRow dr in dtCrContract.Rows)
        {
            ListItem liContract = new ListItem(dr["Text"].ToString(), dr["Value"].ToString());

            liContract.Selected = (QFContract.Count() == 0 || QFContract.Contains(dr["Value"].ToString()));
            lblms_Item1.Text = "Contract: ";
            lblms_Item1.Style["width"] = "100px";
            ms_Item1.Items.Add(liContract);
        }

        string currentReleaseID = "0";

        if (dtCurrentRelease != null && dtCurrentRelease.Rows.Count > 0)
            currentReleaseID = dtCurrentRelease.Rows[0]["ProductVersionID"].ToString();

        if (dtRelease != null)
        {
            lblms_Item0.Text = "Release: ";
            lblms_Item0.Style["width"] = "100px";
            ms_Item0.Items.Clear();

            foreach (DataRow dr in dtRelease.Rows)
            {
                ListItem li = new ListItem(dr["ProductVersion"].ToString(), dr["ProductVersionID"].ToString());
                li.Selected = (QFRelease.Count() == 0 || QFRelease.Contains(dr["ProductVersionID"].ToString()));

                if (QFRelease.Count() == 0)
                {
                    if (dr["ProductVersionID"].ToString() == currentReleaseID)
                        li.Selected = true;
                    else
                        li.Selected = false;
                }

                ms_Item0.Items.Add(li);
            }
        }

        if (dtStatus != null)
        {
            ms_Item9.Items.Clear();
            ms_Item9a.Items.Clear();
            dtStatus.DefaultView.RowFilter = "StatusType = 'Work'";
            dtStatus = dtStatus.DefaultView.ToTable(true, new string[] { "StatusID", "Status" });

            foreach (DataRow dr in dtStatus.Rows)
            {
                ListItem li = new ListItem(dr["Status"].ToString(), dr["StatusID"].ToString());

                if(QFTaskStatus.Count() == 0)
                {
                    if (li.Text != "Closed" && li.Text != "On Hold" && li.Text != "Approved/Closed") li.Selected = true;
                } else
                    li.Selected = QFTaskStatus.Count() == 0 || QFTaskStatus.Contains(dr["StatusID"].ToString());

                ms_Item9.Items.Add(li);
        }

            foreach (DataRow dr in dtStatus.Rows)
            {
                ListItem li = new ListItem(dr["Status"].ToString(), dr["StatusID"].ToString());

                if (QFSubTaskStatus.Count() == 0)
                {
                    if (li.Text != "Closed" && li.Text != "On Hold" && li.Text != "Approved/Closed") li.Selected = true;
    }
                else
                    li.Selected = QFSubTaskStatus.Count() == 0 || QFSubTaskStatus.Contains(dr["StatusID"].ToString());

                ms_Item9a.Items.Add(li);
            }
        }

        Label lblPageSize = (Label)Page.Master.FindControl("lblItem5");
        lblPageSize.Text = "Page Size: ";
        lblPageSize.Style["width"] = "50px";
        DropDownList ddlGridPageSize = (DropDownList)Page.Master.FindControl("ddlItem5");
        ddlGridPageSize.Items.Clear();
        ListItem item = new ListItem("12", "12");
        ddlGridPageSize.Items.Add(item);
        item = new ListItem("25", "25");
        ddlGridPageSize.Items.Add(item);
        item = new ListItem("50", "50");
        ddlGridPageSize.Items.Add(item);
        item = new ListItem("All", "0");
        ddlGridPageSize.Items.Add(item);
        ddlGridPageSize.SelectedValue = "12";

        if (CurrentLevel != 1) tblRelease.Style["display"] ="none";
    }

    private DataTable LoadData()
	{
        DataTable dt = new DataTable();

        if (IsConfigured)
		{
			if (IsPostBack && CurrentLevel == 1 && Session["dtAORLevel" + CurrentLevel] != null)
			{
				dt = (DataTable) Session["dtAORLevel" + CurrentLevel];
			}
			else
			{
				XmlDocument docLevel = new XmlDocument();
				XmlElement rootLevel = (XmlElement) docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
				XmlNode nodeLevel = Levels.SelectNodes("crosswalkparameters/level")[CurrentLevel - 1];
				XmlNode nodeImport = docLevel.ImportNode(nodeLevel, true);
				rootLevel.AppendChild(nodeImport);

				XmlDocument docFilters = new XmlDocument();
				XmlElement rootFilters = (XmlElement) docFilters.AppendChild(docFilters.CreateElement("filters"));

				if (Filter != string.Empty)
				{
					string[] arrFilter = Filter.Split('|');

					for (int j = 0; j < arrFilter.Length; j++)
					{
						XmlElement filter = docFilters.CreateElement("filter");
						XmlElement field = docFilters.CreateElement("field");
						XmlElement value = docFilters.CreateElement("id");
						string[] arrValues = arrFilter[j].Split('=');

						field.InnerText = arrValues[0];
                        if(arrValues[0].Trim() != "")
						    value.InnerText = (arrValues[1].Trim() == "" && field.InnerText.ToUpper() != "LASTMEETING_ID" && field.InnerText.ToUpper() != "NEXTMEETING_ID" ? "0" : arrValues[1].Trim());

						filter.AppendChild(field);
						filter.AppendChild(value);
						rootFilters.AppendChild(filter);
					}
				}

			    HtmlSelect ms_Item0 = (HtmlSelect)Page.Master.FindControl("ms_Item0");
                HtmlSelect ms_Item1 = (HtmlSelect)Page.Master.FindControl("ms_Item1");
			    HtmlSelect ms_Item9 = (HtmlSelect)Page.Master.FindControl("ms_Item9");
			    HtmlSelect ms_Item9a = (HtmlSelect)Page.Master.FindControl("ms_Item9a");

                List<string> listRelease = new List<string>();
                List<string> listContract = new List<string>();
			    List<string> listTaskStatus = new List<string>();
			    List<string> listSubTaskStatus = new List<string>();

                if (ms_Item0 != null && ms_Item0.Items.Count > 0)
                    foreach (ListItem li in ms_Item0.Items)
                        if (li.Selected) listRelease.Add(li.Value);

                if (ms_Item1 != null && ms_Item1.Items.Count > 0)
                    foreach (ListItem li in ms_Item1.Items)
                        if (li.Selected) listContract.Add(li.Value);

			    if (ms_Item9 != null && ms_Item9.Items.Count > 0)
			        foreach (ListItem li in ms_Item9.Items)
			            if (li.Selected) listTaskStatus.Add(li.Value);

			    if (ms_Item9a != null && ms_Item9a.Items.Count > 0)
			        foreach (ListItem li in ms_Item9a.Items)
			            if (li.Selected) listSubTaskStatus.Add(li.Value);

                dt = AOR.AOR_Crosswalk_Multi_Level_Grid(level: docLevel, filter: docFilters, qfRelease: String.Join(",", listRelease), qfContract: String.Join(",", listContract), qfTaskStatus: String.Join(",", listTaskStatus), qfSubTaskStatus: String.Join(",", listSubTaskStatus), getColumns: false);
                Session["dtAORLevel" + CurrentLevel] = dt;
			}
		}

		var items = WTSData.GetViewOptions(UserManagement.GetUserId_FromUsername(), "AOR");
	    var gridViewId = GetDefaultGridViewId(11, UserManagement.GetUserId_FromUsername());
        var settings = (from DataRow dr in items.Rows
			where (int) dr["GridViewID"] == gridViewId
			select (string) dr["Tier1Columns"]).FirstOrDefault();

		if (itisettings.Value == "" && !string.IsNullOrEmpty(settings)) itisettings.Value = settings;
	    if (items.Rows.Count > 0)
	    {
	        ddlGridview.Items.Clear();
            //ddlGridview.Items.Add("Customized View"); //TODO: Do not consider adding this line of code to show users are working with a customized gridview. It requires a lot of extra code to be wired up.

            foreach (DataRow row in items.Rows)
	            if (row["ViewType"].ToString() == "1")
	            {
	                var item = new ListItem();
	                item.Text = row["ViewName"].ToString();
	                item.Value = row["GridViewID"].ToString();
	                item.Attributes.Add("OptionGroup", row["WTS_RESOURCEID"].ToString() != "" ? "Custom Views" : "Process Views");
                    item.Attributes.Add("ViewType", row["ViewType"].ToString());
                    item.Attributes.Add("MyView", row["MyView"].ToString());
	                item.Attributes.Add("DefaultSelection", row["DefaultSelection"].ToString());
	                ddlGridview.Items.Add(item);
	            }
	    }

        var colNames = (from dc in dt.Columns.Cast<DataColumn>() select dc.ColumnName).Where(x => x != "X" && x != "Y" && x != "Z" && x.IndexOf("_ID", StringComparison.Ordinal) == -1).ToList();
        SubGridFilterCols = (from dc in dt.Columns.Cast<DataColumn>() select dc.ColumnName).Where(x => x.IndexOf("_ID", StringComparison.Ordinal)!= -1).ToList();
        ColNamesCopy = colNames;

        if (itisettings.Value == "")
		{
			dynamic data = JsonConvert.DeserializeObject(settings);
			object[] objArray = new object[colNames.ToArray().Length];
			for (int i = 0; i < colNames.ToArray().Length; i++)
			{
				var colObj = new { name = colNames[i], show = true, sortorder = "none", sortpriority = "", concat = false, catcols = new string[0]};
				objArray[i] = colObj;
			}

			var tmpList = new List<string>();
			for (var i = 1; i < colNames.ToArray().Length + 1; i++)
				tmpList.Add(i.ToString());

			var newsettings = new //TODO: This object may need refactoring because the tblCols may have been loaded by the UI and the ddl.
			{
				sectionorder = data.sectionorder,
				sectionexpanded = data.sectionexpanded,
				gridname = data.gridname,
				viewname = data.viewname,
				tblCols = objArray,
				columnorder = tmpList.ToArray()
			};

			itisettings.Value = JsonConvert.SerializeObject(newsettings);
		}
		else
		{
            dynamic d = JsonConvert.DeserializeObject(Session["itisettings"].ToString());
            if(d.validated == null)
            {
                ValidateItiSettings();
		        d = JsonConvert.DeserializeObject(Session["itisettings"].ToString());
            }
            else
            {
                if (string.IsNullOrEmpty(d.validated.ToString()))
                {
                    ValidateItiSettings();
                    d = JsonConvert.DeserializeObject(Session["itisettings"].ToString());
                }
                else
                {
                    var validatedOn = (DateTime)d.validated;
                    if (validatedOn.Date < DateTime.Today)
                    {
                        ValidateItiSettings();
                        d = JsonConvert.DeserializeObject(Session["itisettings"].ToString());
                    }
                }
            }

            if (CurrentLevel == 1)
            {
                foreach (var item in d.tblCols)
                    if (item.concat == true) colNames.Add(item.name.ToString());
            }
            else
            {
                var subgridLevel = 2;
                foreach (var obj in d)
                    if (obj.Name.IndexOf("subgrid") != -1)
                    {
                        if (subgridLevel == CurrentLevel)
                            foreach (var item in obj)
                                foreach (var col in item[0].tblCols)
                                    if (col.concat == true)
                                        colNames.Add(col.name.ToString());

                        subgridLevel++;
                    }
            }

            dt.SetConcatCols(Session["itisettings"].ToString(), CurrentLevel);
            dt.SetColumnOrder(Session["itisettings"].ToString(), colNames.ToArray(), CurrentLevel);
            dt.SetSortOrder(Session["itisettings"].ToString(), CurrentLevel);
            //dt.SetColumnFilters(Session["itisettings"].ToString(), CurrentLevel);
            dt.SetColNames(Session["itisettings"].ToString(), CurrentLevel);
        }

        foreach (DataColumn col in dt.Columns) //TODO: Update this code so it correctly finds the values to update.
			if (col.ReadOnly == false)
				foreach (DataRow row in dt.Rows)
					if (!string.IsNullOrEmpty(row[col].ToString()))
						if (row[col].ToString().StartsWith("; 0", true, CultureInfo.CurrentCulture))
							row[col] = row[col].ToString().Replace("; ", "0");

		foreach (DataColumn col in dt.Columns)
			if (col.ReadOnly == false)
				foreach (DataRow row in dt.Rows)
					if (!string.IsNullOrEmpty(row[col].ToString()))
						row[col] = HttpUtility.UrlDecode(row[col].ToString());

	    dtCopy = dt;
        return dt;
	}

    private int GetChildGridCount(string subgridFilter)
    {
        XmlDocument docLevel = new XmlDocument();
        XmlElement rootLevel = (XmlElement)docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
        XmlNode nodeLevel = Levels.SelectNodes("crosswalkparameters/level")[CurrentLevel];

        if (nodeLevel == null) return 0;
        XmlNode nodeImport = docLevel.ImportNode(nodeLevel, true);
        rootLevel.AppendChild(nodeImport);

        XmlDocument docFilters = new XmlDocument();
        XmlElement rootFilters = (XmlElement)docFilters.AppendChild(docFilters.CreateElement("filters"));

        if (subgridFilter != string.Empty)
        {
            string[] arrFilter = subgridFilter.Split('|');

            for (int j = 0; j < arrFilter.Length; j++)
            {
                XmlElement filter = docFilters.CreateElement("filter");
                XmlElement field = docFilters.CreateElement("field");
                XmlElement value = docFilters.CreateElement("id");
                string[] arrValues = arrFilter[j].Split('=');

                field.InnerText = arrValues[0];
                if (arrValues[0].Trim() != "")
                    value.InnerText = (arrValues[1].Trim() == "" && field.InnerText.ToUpper() != "LASTMEETING_ID" && field.InnerText.ToUpper() != "NEXTMEETING_ID" ? "0" : arrValues[1].Trim());

                filter.AppendChild(field);
                filter.AppendChild(value);
                rootFilters.AppendChild(filter);
            }
        }

        HtmlSelect ms_Item0 = (HtmlSelect)Page.Master.FindControl("ms_Item0");
        HtmlSelect ms_Item1 = (HtmlSelect)Page.Master.FindControl("ms_Item1");
        HtmlSelect ms_Item9 = (HtmlSelect)Page.Master.FindControl("ms_Item9");
        HtmlSelect ms_Item9a = (HtmlSelect)Page.Master.FindControl("ms_Item9a");

        List<string> listRelease = new List<string>();
        List<string> listContract = new List<string>();
        List<string> listTaskStatus = new List<string>();
        List<string> listSubTaskStatus = new List<string>();

        if (ms_Item0 != null && ms_Item0.Items.Count > 0)
            foreach (ListItem li in ms_Item0.Items)
                if (li.Selected) listRelease.Add(li.Value);

        if (ms_Item1 != null && ms_Item1.Items.Count > 0)
            foreach (ListItem li in ms_Item1.Items)
                if (li.Selected) listContract.Add(li.Value);

        if (ms_Item9 != null && ms_Item9.Items.Count > 0)
            foreach (ListItem li in ms_Item9.Items)
                if (li.Selected) listTaskStatus.Add(li.Value);

        if (ms_Item9a != null && ms_Item9a.Items.Count > 0)
            foreach (ListItem li in ms_Item9a.Items)
                if (li.Selected) listSubTaskStatus.Add(li.Value);

        return AOR.AOR_Crosswalk_Multi_Level_Grid(level: docLevel, filter: docFilters, qfRelease: String.Join(",", listRelease), qfContract: String.Join(",", listContract), qfTaskStatus: String.Join(",", listTaskStatus), qfSubTaskStatus: String.Join(",", listSubTaskStatus), getColumns: false).Rows.Count;
    }

    private int GetDefaultGridViewId(int gridNameId, int resourceId)
    {
        var cmdText = "select settingvalue from usersetting where gridnameid = " + gridNameId + " AND wts_resourceid = " + resourceId;

        using (SqlConnection cn = new SqlConnection(WTSCommon.WTS_ConnectionString))
        using (SqlCommand cmd = new SqlCommand(cmdText, cn))
        {
            cmd.CommandType = CommandType.Text;
            cn.Open();

            return Convert.ToInt32(cmd.ExecuteScalar() ?? 160);
        }
    }

    private void ValidateItiSettings()
    {
        var colGroups = new JArray();
        var d = JsonConvert.DeserializeObject<dynamic>(Session["itisettings"].ToString());
        var columnOrder = JsonConvert.DeserializeObject<JArray>(d.columnorder.ToString());
        var newAorProperties = new List<AorProperty>();
        var docLevel = new XmlDocument();
        var docFilters = new XmlDocument();
        docFilters.AppendChild(docFilters.CreateElement("filters"));
        docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
        var dt = AOR.AOR_Crosswalk_Multi_Level_Grid(level: docLevel, filter: docFilters, qfRelease: "", qfContract: "", qfTaskStatus: "", qfSubTaskStatus: "", getColumns: true);
        var jsonUpdated = false;

        foreach (var item in dt.AsEnumerable().Select(r => r.ItemArray[0]).Distinct().ToArray())
            colGroups.Add(item.ToString());

        d.columngroups = colGroups;
        d.validated = DateTime.Now;

        foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
        {
            var itemExists = false;
            foreach (var item in d.tblCols)
                if (item.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                {
                    item.colgroup = row[0].ToString();
                    jsonUpdated = true;
                    itemExists = true;
                    break;
                }

            if (!itemExists)
            {
                var newProperty = new AorProperty();

                newProperty.name = row[1].ToString();
                newProperty.alias = "";
                newProperty.show = false;
                newProperty.sortorder = "none";
                newProperty.sortpriority = "";
                newProperty.groupname = "";
                newProperty.concat = false;
                newProperty.colgroup = row[0].ToString();

                newAorProperties.Add(newProperty);
                columnOrder.Add((columnOrder.Count + 1).ToString());
            }
        }

        if (jsonUpdated || newAorProperties.Count > 0)
        {
            var aorProperties = JsonConvert.DeserializeObject<List<AorProperty>>(d.tblCols.ToString());
            if (newAorProperties.Count > 0)
                foreach (var item in newAorProperties)
                    aorProperties.Add(item);

            d.tblCols = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(aorProperties));
            d.columnorder = columnOrder;
        }

        foreach (var obj in d)
            if (obj.Name.IndexOf("subgrid") != -1)
            {
                jsonUpdated = false;
                foreach (var item in obj)
                {
                    newAorProperties.Clear();
                    columnOrder = JsonConvert.DeserializeObject(item[0].columnorder.ToString());

                    foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
                    {
                        var itemExists = false;
                        foreach (var i in item[0].tblCols)
                            if (i.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                            {
                                i.colgroup = row[0].ToString();
                                jsonUpdated = true;
                                itemExists = true;
                                break;
                            }

                        if (!itemExists)
                        {
                            var newProperty = new AorProperty();

                            newProperty.name = row[1].ToString();
                            newProperty.alias = "";
                            newProperty.show = false;
                            newProperty.sortorder = "none";
                            newProperty.sortpriority = "";
                            newProperty.groupname = "";
                            newProperty.concat = false;
                            newProperty.colgroup = row[0].ToString();

                            newAorProperties.Add(newProperty);
                            columnOrder.Add((columnOrder.Count + 1).ToString());
                        }
                    }

                    if (jsonUpdated || newAorProperties.Count > 0)
                    {
                        var aorProperties = JsonConvert.DeserializeObject<List<AorProperty>>(item[0].tblCols.ToString());
                        if (newAorProperties.Count > 0)
                            foreach (var i in newAorProperties)
                                aorProperties.Add(i);
                        item[0].tblCols = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(aorProperties));
                        item[0].columnorder = columnOrder;
                    }
                }
            }

        string[] oldColCount = JsonConvert.DeserializeObject<string[]>(d.columnorder.ToString());
        var newColCount = dt.AsEnumerable().Select(r => r.ItemArray[1]).Distinct().Count();
        var colDiff = oldColCount.Length - newColCount;

        if (colDiff > 0)
        {
            var validCols = new JArray();

            foreach (var item in d.tblCols)
                foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
                    if (item.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                    {
                        validCols.Add(item);
                        break;
                    }

            string colName;
            var newColOrder = new List<string>();

            for (int i = 0; i < d.columnorder.Count; i++)
            {
                colName = "";
                for (int j = 0; j < d.tblCols.Count; j++)
                    if (d.columnorder[i] == j + 1) colName = d.tblCols[j].name;

                if(!string.IsNullOrEmpty(colName))
                    for (int k = 0; k < validCols.Count; k++)
                        if(colName == validCols[k].First.First.ToString())
                            newColOrder.Add((k + 1).ToString());
            }

            d.tblCols = JArray.FromObject(validCols);
            d.columnorder = JArray.FromObject(newColOrder);

            foreach (var obj in d)
                if (obj.Name.IndexOf("subgrid") != -1)
                {
                    validCols = new JArray();
                    newColOrder.Clear();

                    foreach (var item in obj)
                    {
                        foreach (var i in item[0].tblCols)
                            foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
                                if (i.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                                {
                                    validCols.Add(i);
                                    break;
                                }

                        for (int i = 0; i < item[0].columnorder.Count; i++)
                        {
                            colName = "";
                            for (int j = 0; j < item[0].tblCols.Count; j++)
                                if (item[0].columnorder[i] == j + 1) colName = item[0].tblCols[j].name;

                            if (!string.IsNullOrEmpty(colName))
                                for (int k = 0; k < validCols.Count; k++)
                                    if (colName == validCols[k].First.First.ToString())
                                        newColOrder.Add((k + 1).ToString());
                        }

                        item[0].tblCols = JArray.FromObject(validCols);
                        item[0].columnorder = JArray.FromObject(newColOrder);
                    }
                }
        }

        Session["itisettings"] = JsonConvert.SerializeObject(d);
        itisettings.Value = JsonConvert.SerializeObject(d);
    }
    #endregion

    #region Grid
    private void grdData_GridHeaderRowDataBound(object sender, GridViewRowEventArgs e)
	{
		GridViewRow row = e.Row;

        FormatHeaderRowDisplay(ref row);
        if (DCC.Contains("X")) row.Cells[DCC.IndexOf("X")].Controls.Add(CreateImage(true));
    }

	private void grdData_GridRowDataBound(object sender, GridViewRowEventArgs e)
	{
	    dynamic d = JsonConvert.DeserializeObject(Session["itisettings"].ToString());
	    var subGridFilter = Filter;
	    bool showChildRc = false;
        GridViewRow row = e.Row;
        var workitemid = "";
        var workitem = "";
	    var taskCount = 0;

	    if (CurrentLevel == 1) showChildRc = d.showchildrc ?? false;
	    else
	    {
	        var subgridLevel = 2;
	        foreach (var obj in d)
	            if (obj.Name.IndexOf("subgrid") != -1)
                {
                    if (subgridLevel == CurrentLevel) showChildRc = obj.Value[0].showchildrc ?? false;
                    subgridLevel++;
                }
        }

        if (showChildRc)
            if (SubGridFilterCols.Count > 0)
            {
                foreach (var item in SubGridFilterCols)
                    if(row.Cells[DCC.IndexOf(item)].Text != "&nbsp;")
                        subGridFilter += "|" + item + "=" + row.Cells[DCC.IndexOf(item)].Text;

                taskCount = GetChildGridCount(subGridFilter);
            }
        
        FormatRowDisplay(ref row);
	    if (DCC.Contains("X"))
	    {
            row.Cells[DCC.IndexOf("X")].Controls.Add(CreateImage(false));
            if(taskCount > 0)
            { 
	            HtmlGenericControl divTasks = new HtmlGenericControl();
                HtmlGenericControl divTaskCount = new HtmlGenericControl();

	            divTaskCount.InnerText = string.Format("({0})", taskCount);
	            divTaskCount.Style["display"] = "table-cell";
	            divTaskCount.Style["padding-left"] = "2px";
	            divTasks.Controls.Add(divTaskCount);
	            row.Cells[DCC.IndexOf("X")].Controls.Add(divTasks);
            }
        }

        if (DCC.Contains("TASK_ID") && DCC.Contains("Task"))
        {
            workitemid = row.Cells[DCC.IndexOf("TASK_ID")].Text;
            workitem = row.Cells[DCC.IndexOf("Task")].Text;
            row.Attributes.Add("workitem_id", row.Cells[DCC.IndexOf("Task")].Text);
            row.Cells[DCC.IndexOf("Task")].Style["width"] = "75px";
            row.Cells[DCC.IndexOf("Task")].Controls.Add(CreateLink("Task", row.Cells[DCC.IndexOf("TASK_ID")].Text, row.Cells[DCC.IndexOf("Task")].Text));
        }
        if (DCC.Contains("SubTask_ID") && DCC.Contains("SUB-TASK"))
        {
            if (CanViewWorkItem && row.Cells[DCC.IndexOf("SUB-TASK")].Text != "&nbsp;")
            {
                workitemid = row.Cells[DCC.IndexOf("SubTask_ID")].Text;
                workitem = row.Cells[DCC.IndexOf("SUB-TASK")].Text;
                row.Attributes.Add("workitem_id", row.Cells[DCC.IndexOf("SUB-TASK")].Text);
                row.Cells[DCC.IndexOf("SUB-TASK")].Style["width"] = "90px";
                row.Cells[DCC.IndexOf("SUB-TASK")].Controls.Add(CreateLink("Task", row.Cells[DCC.IndexOf("SubTask_ID")].Text, row.Cells[DCC.IndexOf("SUB-TASK")].Text));
            }
        }

        if (DCC.Contains("AOR_ID"))
		{
			row.Attributes.Add("aor_id", row.Cells[DCC.IndexOf("AOR_ID")].Text);
			
			if (CanEditAOR)
			{
                if (DCC.Contains("AOR Name"))
                {
                    row.Cells[DCC.IndexOf("AOR Name")].Style["text-align"] = "center";
                    row.Cells[DCC.IndexOf("AOR Name")].Controls.Add(CreateTextBox("AOR", row.Cells[DCC.IndexOf("AOR_ID")].Text, "AOR Name", row.Cells[DCC.IndexOf("AOR Name")].Text, false));
                }

				if (DCC.Contains("Description"))
				{
					row.Cells[DCC.IndexOf("Description")].Style["text-align"] = "center";
					row.Cells[DCC.IndexOf("Description")].Controls.Add(CreateTextBox("AOR", row.Cells[DCC.IndexOf("AOR_ID")].Text, "Description", row.Cells[DCC.IndexOf("Description")].Text, false));
				}

				if (DCC.Contains("Sort"))
				{
					row.Cells[DCC.IndexOf("Sort")].Style["text-align"] = "center";
					row.Cells[DCC.IndexOf("Sort")].Controls.Add(CreateTextBox("AOR", row.Cells[DCC.IndexOf("AOR_ID")].Text, "Sort", row.Cells[DCC.IndexOf("Sort")].Text, true));
				}
			}
		}

        if (DCC.Contains("AORRelease_ID")) row.Attributes.Add("aorrelease_id", row.Cells[DCC.IndexOf("AORRelease_ID")].Text);

        if (DCC.Contains("Carry In") && DCC.Contains("Current Release") && DCC.Contains("Release"))
		{
			string nRelease = row.Cells[DCC.IndexOf("Carry In")].Text + " -> " + row.Cells[DCC.IndexOf("Current Release")].Text;

			if (row.Cells[DCC.IndexOf("Carry In")].Text == "&nbsp;")
			{
				nRelease = row.Cells[DCC.IndexOf("Current Release")].Text;
			}
			else
			{
				nRelease = row.Cells[DCC.IndexOf("Carry In")].Text + " -> " + row.Cells[DCC.IndexOf("Current Release")].Text;
			}

			row.Cells[DCC.IndexOf("Release")].Text = nRelease;
			row.Cells[DCC.IndexOf("Carry In")].Style["display"] = "none";
			row.Cells[DCC.IndexOf("Current Release")].Style["display"] = "none";
		}

		if (DCC.Contains("Last Meeting"))
		{
			DateTime nDate = new DateTime();

			if (DateTime.TryParse(row.Cells[DCC.IndexOf("Last Meeting")].Text, out nDate))
			{
				row.Cells[DCC.IndexOf("Last Meeting")].Text = String.Format("{0:M/d/yyyy h:mm tt}", nDate);
			}
		}

		if (DCC.Contains("Next Meeting"))
		{
			DateTime nDate = new DateTime();

			if (DateTime.TryParse(row.Cells[DCC.IndexOf("Next Meeting")].Text, out nDate))
			{
				row.Cells[DCC.IndexOf("Next Meeting")].Text = String.Format("{0:M/d/yyyy h:mm tt}", nDate);
			}
		}

		if (DCC.Contains("Rank"))
		{
			string nRank = string.Empty;

			if (row.Cells[DCC.IndexOf("Rank")].Text != "&nbsp;")
			{
				int rankID = 0;
				int.TryParse(row.Cells[DCC.IndexOf("Rank")].Text, out rankID);

				nRank = rankID.ToString("D2");
			}

			row.Cells[DCC.IndexOf("Rank")].Text = nRank;
		}

		if (DCC.Contains("Tier") && DCC.Contains("Rank") && DCC.Contains("Tier Rank"))
		{
			row.Cells[DCC.IndexOf("Tier Rank")].Text = (row.Cells[DCC.IndexOf("Tier")].Text + "_" + row.Cells[DCC.IndexOf("Rank")].Text).Replace("&nbsp;", "").Trim('_');
			row.Cells[DCC.IndexOf("Tier")].Style["display"] = "none";
			row.Cells[DCC.IndexOf("Rank")].Style["display"] = "none";
		}
        //add Total row to top of grid (as part of header to keep fixed)
        //if (row.RowIndex == 0)
        //{
        //    FixedTotalRow(row);
        //}

        if (DCC.Contains("CRName_ID") && Server.HtmlDecode(row.Cells[DCC.IndexOf("CRName_ID")].Text).Trim() != "")
        {
            if (DCC.Contains("CR Customer Title")) row.Cells[DCC.IndexOf("CR Customer Title")].Controls.Add(CreateLink("CR", row.Cells[DCC.IndexOf("CRName_ID")].Text, row.Cells[DCC.IndexOf("CR Customer Title")].Text));
        }

        if (DCC.Contains("CRTITLE_ID") && Server.HtmlDecode(row.Cells[DCC.IndexOf("CRTITLE_ID")].Text).Trim() != "")
        {
            if (DCC.Contains("CR Internal Title")) row.Cells[DCC.IndexOf("CR Internal Title")].Controls.Add(CreateLink("CR", row.Cells[DCC.IndexOf("CRTITLE_ID")].Text, row.Cells[DCC.IndexOf("CR Internal Title")].Text));
        }
    }



    private void FixedTotalRow(GridViewRow row)
    {
        try
        {
            DataTable dt = (DataTable)Session["dtAORLevel" + CurrentLevel];
            // Add total row for each page
            //total row is the first row in datatable.Using datatable instead of grid row because if I use grid row it won't be visible on paging.
            if (dt.Rows[0]["ROW_ID"].ToString() != "0")
            {
                return;
            }

            GridViewRow nRow = new GridViewRow(row.RowIndex, row.RowIndex, DataControlRowType.DataRow, DataControlRowState.Normal);
            TableHeaderCell nCell = new TableHeaderCell();
            nRow.Style["height"] = "25px";
            nRow.Attributes.Add("rowID", "total");
            XmlNode nodeLevel = this.Levels.SelectNodes("crosswalkparameters/level")[CurrentLevel - 1];
            int intColspan = nodeLevel.SelectNodes("breakout/column").Count + 1;
            // 3: #, #/#, FMTL Stage columns
            nCell = new TableHeaderCell();
            nCell.Text = "TOTAL";
            nCell.ColumnSpan = intColspan;
            nCell.Style["background"] = "#d7e8fc";
            nRow.Cells.Add(nCell);

            int columnCount = 0;

            for (int i = 0; i <= DCC.Count - 1; i++)
            {
                string columnDBName = DCC[i].ColumnName.ToString();
                Boolean visible = DCC[i].ColumnName.EndsWith("_ID") ? false : true;

                if (visible)
                {
                    columnCount = columnCount + 1;
                }

                if (columnCount > intColspan && visible)
                {
                    nCell = new TableHeaderCell();
                    nCell.Text = Convert.IsDBNull(dt.Rows[0][columnDBName].ToString()) ? "&nbsp;" : dt.Rows[0][columnDBName].ToString();
                    nCell.Style["background"] = "#d7e8fc";
                    nRow.Cells.Add(nCell);
                }
            }

            grdData.Controls[1].Controls[1].Controls[0].Controls[0].Controls.AddAt(1, nRow);

            if (grdData.PageIndex == 0)
            {
                // Hide the first row (summary data) on the first page
                row.Style["display"] = "none";
            }


        }
        catch (Exception ex)
        {
        }
    }

 //   private void grdData_GridPageIndexChanging(object sender, GridViewPageEventArgs e)
	//{
	//	grdData.PageIndex = e.NewPageIndex;
	//}

	private void FormatHeaderRowDisplay(ref GridViewRow row)
	{
		for (int i = 0; i < row.Cells.Count; i++)
		{
			if (DCC[i].ColumnName.EndsWith("_ID")) row.Cells[i].Style["display"] = "none";
		}

		if (DCC.Contains("X"))
		{
			row.Cells[DCC.IndexOf("X")].Text = "";
			row.Cells[DCC.IndexOf("X")].Style["width"] = "36px";

            if (CurrentLevel > 1) row.Cells[DCC.IndexOf("X")].Style["border-left"] = "1px solid grey";
        }

		if (DCC.Contains("Carry In") && DCC.Contains("Current Release") && DCC.Contains("Release"))
		{
			row.Cells[DCC.IndexOf("Carry In")].Style["display"] = "none";
			row.Cells[DCC.IndexOf("Current Release")].Style["display"] = "none";
		}

		if (DCC.Contains("Tier") && DCC.Contains("Rank") && DCC.Contains("Tier Rank"))
		{
			row.Cells[DCC.IndexOf("Tier")].Style["display"] = "none";
			row.Cells[DCC.IndexOf("Rank")].Style["display"] = "none";
		}

        //Any
        if (DCC.Contains("Workload Priority")) row.Cells[DCC.IndexOf("Workload Priority")].Style["width"] = "130px";
        if (DCC.Contains("Resource Count (T.BA.PA.CT)")) row.Cells[DCC.IndexOf("Resource Count (T.BA.PA.CT)")].Style["width"] = "180px";
        //AOR
        if (DCC.Contains("AOR #")) row.Cells[DCC.IndexOf("AOR #")].Style["width"] = "45px";
        if (DCC.Contains("AOR Name")) row.Cells[DCC.IndexOf("AOR Name")].Style["width"] = "500px";
        if (DCC.Contains("AOR Name")) row.Cells[DCC.IndexOf("AOR Name")].Style["text-align"] = "left";
        if (DCC.Contains("Description")) row.Cells[DCC.IndexOf("Description")].Style["text-align"] = "left";
        if (DCC.Contains("Description")) row.Cells[DCC.IndexOf("Description")].Style["width"] = "350px";
        if (DCC.Contains("Resources")) row.Cells[DCC.IndexOf("Resources")].Style["width"] = "100px";
		if (DCC.Contains("Sort")) row.Cells[DCC.IndexOf("Sort")].Style["width"] = "45px";
		if (DCC.Contains("Coding Estimated Effort")) row.Cells[DCC.IndexOf("Coding Estimated Effort")].Style["width"] = "100px";
        if (DCC.Contains("Testing Estimated Effort")) row.Cells[DCC.IndexOf("Testing Estimated Effort")].Style["width"] = "100px";
        if (DCC.Contains("Training/Support Estimated Effort")) row.Cells[DCC.IndexOf("Training/Support Estimated Effort")].Style["width"] = "100px";
        if (DCC.Contains("Stage Priority")) row.Cells[DCC.IndexOf("Stage Priority")].Style["width"] = "55px";
		if (DCC.Contains("Carry In")) row.Cells[DCC.IndexOf("Carry In")].Style["width"] = "55px";
		if (DCC.Contains("Release")) row.Cells[DCC.IndexOf("Release")].Style["width"] = "140px";
		if (DCC.Contains("Tier")) row.Cells[DCC.IndexOf("Tier")].Style["width"] = "45px";
		if (DCC.Contains("Rank")) row.Cells[DCC.IndexOf("Rank")].Style["width"] = "45px";
		if (DCC.Contains("Tier Rank")) row.Cells[DCC.IndexOf("Tier Rank")].Style["width"] = "45px";
		if (DCC.Contains("Last Meeting")) row.Cells[DCC.IndexOf("Last Meeting")].Style["width"] = "70px";
		if (DCC.Contains("Next Meeting")) row.Cells[DCC.IndexOf("Next Meeting")].Style["width"] = "70px";
		if (DCC.Contains("# of Meetings")) row.Cells[DCC.IndexOf("# of Meetings")].Style["width"] = "65px";
		if (DCC.Contains("CMMI")) row.Cells[DCC.IndexOf("CMMI")].Style["width"] = "75px";
		if (DCC.Contains("Cyber Review")) row.Cells[DCC.IndexOf("Cyber Review")].Style["width"] = "80px";
		if (DCC.Contains("Critical Path Team")) row.Cells[DCC.IndexOf("Critical Path Team")].Style["width"] = "80px";
		if (DCC.Contains("AOR Work Type")) row.Cells[DCC.IndexOf("AOR Work Type")].Style["width"] = "75px";
		if (DCC.Contains("Customer Flagship")) row.Cells[DCC.IndexOf("Customer Flagship")].Style["width"] = "70px";
        if (DCC.Contains("AOR Production Status")) row.Cells[DCC.IndexOf("AOR Production Status")].Style["width"] = "130px";
        if (DCC.Contains("Investigation Status")) row.Cells[DCC.IndexOf("Investigation Status")].Style["width"] = "130px";
        if (DCC.Contains("Technical Status")) row.Cells[DCC.IndexOf("Technical Status")].Style["width"] = "130px";
        if (DCC.Contains("Customer Design Status")) row.Cells[DCC.IndexOf("Customer Design Status")].Style["width"] = "130px";
        if (DCC.Contains("Coding Status")) row.Cells[DCC.IndexOf("Coding Status")].Style["width"] = "130px";
        if (DCC.Contains("Internal Testing Status")) row.Cells[DCC.IndexOf("Internal Testing Status")].Style["width"] = "130px";
        if (DCC.Contains("Customer Validation Testing Status")) row.Cells[DCC.IndexOf("Customer Validation Testing Status")].Style["width"] = "130px";
        if (DCC.Contains("Adoption Status")) row.Cells[DCC.IndexOf("Adoption Status")].Style["width"] = "130px";
        if (DCC.Contains("IP1 Status")) row.Cells[DCC.IndexOf("IP1 Status")].Style["width"] = "130px";
        if (DCC.Contains("IP2 Status")) row.Cells[DCC.IndexOf("IP2 Status")].Style["width"] = "130px";
        if (DCC.Contains("IP3 Status")) row.Cells[DCC.IndexOf("IP3 Status")].Style["width"] = "130px";
        if (DCC.Contains("Primary System")) row.Cells[DCC.IndexOf("Primary System")].Style["width"] = "220px";
        if (DCC.Contains("AOR System")) row.Cells[DCC.IndexOf("AOR System")].Style["width"] = "215px";
        if (DCC.Contains("Approved")) row.Cells[DCC.IndexOf("Approved")].Style["width"] = "45px";
        if (DCC.Contains("Approved By")) row.Cells[DCC.IndexOf("Approved By")].Style["width"] = "130px";
        if (DCC.Contains("Approved Date")) row.Cells[DCC.IndexOf("Approved Date")].Style["width"] = "130px";

        //CR
        if (DCC.Contains("CR Customer Title")) row.Cells[DCC.IndexOf("CR Customer Title")].Style["width"] = "300px";
        if (DCC.Contains("CR Internal Title")) row.Cells[DCC.IndexOf("CR Internal Title")].Style["width"] = "300px";
        if (DCC.Contains("CR Description")) row.Cells[DCC.IndexOf("CR Description")].Style["width"] = "500px";
        if (DCC.Contains("Rationale")) row.Cells[DCC.IndexOf("Rationale")].Style["width"] = "500px";
        if (DCC.Contains("Customer Impact")) row.Cells[DCC.IndexOf("Customer Impact")].Style["width"] = "500px";
        if (DCC.Contains("CR Websystem")) row.Cells[DCC.IndexOf("CR Websystem")].Style["width"] = "150px";
        if (DCC.Contains("CSD Required Now")) row.Cells[DCC.IndexOf("CSD Required Now")].Style["width"] = "100px";
        if (DCC.Contains("Related Release")) row.Cells[DCC.IndexOf("Related Release")].Style["width"] = "75px";
        if (DCC.Contains("Sub Group")) row.Cells[DCC.IndexOf("Sub Group")].Style["width"] = "75px";
        if (DCC.Contains("Design Review")) row.Cells[DCC.IndexOf("Design Review")].Style["width"] = "100px";
        if (DCC.Contains("CR ITI POC")) row.Cells[DCC.IndexOf("CR ITI POC")].Style["width"] = "75px";
        if (DCC.Contains("Customer Priority List")) row.Cells[DCC.IndexOf("Customer Priority List")].Style["width"] = "75px";
        if (DCC.Contains("Government CSRD #")) row.Cells[DCC.IndexOf("Government CSRD #")].Style["width"] = "75px";
        if (DCC.Contains("ITI Priority")) row.Cells[DCC.IndexOf("ITI Priority")].Style["width"] = "75px";
        if (DCC.Contains("Cyber/ISMT")) row.Cells[DCC.IndexOf("Cyber/ISMT")].Style["width"] = "75px";
        if (DCC.Contains("Primary SR")) row.Cells[DCC.IndexOf("Primary SR")].Style["width"] = "75px";
        if (DCC.Contains("Contract")) row.Cells[DCC.IndexOf("Contract")].Style["width"] = "200px";

        //SR
        if (DCC.Contains("SR #")) row.Cells[DCC.IndexOf("SR #")].Style["width"] = "65px";
        if (DCC.Contains("SR Submitted By")) row.Cells[DCC.IndexOf("SR Submitted By")].Style["width"] = "90px";
        if (DCC.Contains("SR Submitted Date")) row.Cells[DCC.IndexOf("SR Submitted Date")].Style["width"] = "100px";
        if (DCC.Contains("SR Keywords")) row.Cells[DCC.IndexOf("SR Keywords")].Style["width"] = "150px";
        if (DCC.Contains("SR Websystem")) row.Cells[DCC.IndexOf("SR Websystem")].Style["width"] = "150px";
        if (DCC.Contains("SR Status")) row.Cells[DCC.IndexOf("SR Status")].Style["width"] = "100px";
        if (DCC.Contains("SR Type")) row.Cells[DCC.IndexOf("SR Type")].Style["width"] = "100px";
        if (DCC.Contains("SR Priority")) row.Cells[DCC.IndexOf("SR Priority")].Style["width"] = "75px";
        if (DCC.Contains("SR LCMB")) row.Cells[DCC.IndexOf("SR LCMB")].Style["width"] = "75px";
        if (DCC.Contains("SR ITI")) row.Cells[DCC.IndexOf("SR ITI")].Style["width"] = "65px";
        if (DCC.Contains("SR ITI POC")) row.Cells[DCC.IndexOf("SR ITI POC")].Style["width"] = "75px";
        if (DCC.Contains("SR Description")) row.Cells[DCC.IndexOf("SR Description")].Style["width"] = "500px";
        if (DCC.Contains("Last Reply")) row.Cells[DCC.IndexOf("Last Reply")].Style["width"] = "75px";

        //Task
        if (DCC.Contains("Affiliated")) row.Cells[DCC.IndexOf("Affiliated")].Style["width"] = "100px";
        if (DCC.Contains("Contract Allocation Assignment")) row.Cells[DCC.IndexOf("Contract Allocation Assignment")].Style["width"] = "150px";
        if (DCC.Contains("Contract Allocation Group")) row.Cells[DCC.IndexOf("Contract Allocation Group")].Style["width"] = "150px";
        if (DCC.Contains("Assigned To")) row.Cells[DCC.IndexOf("Assigned To")].Style["width"] = "100px";
        if (DCC.Contains("Functionality")) row.Cells[DCC.IndexOf("Functionality")].Style["width"] = "150px";
        if (DCC.Contains("Work Activity")) row.Cells[DCC.IndexOf("Work Activity")].Style["width"] = "150px";
        if (DCC.Contains("Organization (Assigned To)")) row.Cells[DCC.IndexOf("Organization (Assigned To)")].Style["width"] = "110px";
        if (DCC.Contains("PDD TDR")) row.Cells[DCC.IndexOf("PDD TDR")].Style["width"] = "75px";
        if (DCC.Contains("Percent Complete")) row.Cells[DCC.IndexOf("Percent Complete")].Style["width"] = "75px";
        if (DCC.Contains("Bus. Rank")) row.Cells[DCC.IndexOf("Bus. Rank")].Style["width"] = "75px";
        if (DCC.Contains("Primary Bus. Resource")) row.Cells[DCC.IndexOf("Primary Bus. Resource")].Style["width"] = "75px";
        if (DCC.Contains("Tech. Rank")) row.Cells[DCC.IndexOf("Tech. Rank")].Style["width"] = "75px";
        if (DCC.Contains("Customer Rank")) row.Cells[DCC.IndexOf("Customer Rank")].Style["width"] = "75px";
        if (DCC.Contains("Assigned To Rank")) row.Cells[DCC.IndexOf("Assigned To Rank")].Style["width"] = "150px";
        if (DCC.Contains("Primary Resource")) row.Cells[DCC.IndexOf("Primary Resource")].Style["width"] = "75px";
        if (DCC.Contains("Priority")) row.Cells[DCC.IndexOf("Priority")].Style["width"] = "75px";
        if (DCC.Contains("Product Version")) row.Cells[DCC.IndexOf("Product Version")].Style["width"] = "75px";
        if (DCC.Contains("Production Status")) row.Cells[DCC.IndexOf("Production Status")].Style["width"] = "75px";
        if (DCC.Contains("Secondary Bus. Resource")) row.Cells[DCC.IndexOf("Secondary Bus. Resource")].Style["width"] = "75px";
        if (DCC.Contains("Secondary Tech. Resource")) row.Cells[DCC.IndexOf("Secondary Tech. Resource")].Style["width"] = "75px";
        if (DCC.Contains("Status")) row.Cells[DCC.IndexOf("Status")].Style["width"] = "75px";
        if (DCC.Contains("Submitted By")) row.Cells[DCC.IndexOf("Submitted By")].Style["width"] = "75px";
        if (DCC.Contains("System(Task)")) row.Cells[DCC.IndexOf("System(Task)")].Style["width"] = "250px";
        if (DCC.Contains("System Suite")) row.Cells[DCC.IndexOf("System Suite")].Style["width"] = "175px";
        if (DCC.Contains("Work Area")) row.Cells[DCC.IndexOf("Work Area")].Style["width"] = "75px";
        if (DCC.Contains("Task")) row.Cells[DCC.IndexOf("Task")].Style["width"] = "75px";
        if (DCC.Contains("Task Title")) row.Cells[DCC.IndexOf("Task Title")].Style["width"] = "350px";
        if (DCC.Contains("Work Task")) row.Cells[DCC.IndexOf("Work Task")].Style["width"] = "75px";
        if (DCC.Contains("Work Request")) row.Cells[DCC.IndexOf("Work Request")].Style["width"] = "75px";
        if (DCC.Contains("Resource Group")) row.Cells[DCC.IndexOf("Resource Group")].Style["width"] = "150px";
        if (DCC.Contains("Dev Workload Manager")) row.Cells[DCC.IndexOf("Dev Workload Manager")].Style["width"] = "120px";
        if (DCC.Contains("Bus Workload Manager")) row.Cells[DCC.IndexOf("Bus Workload Manager")].Style["width"] = "120px";

        //Sub-Task
        if (DCC.Contains("Sub-Task")) row.Cells[DCC.IndexOf("Sub-Task")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Title")) row.Cells[DCC.IndexOf("Sub-Task Title")].Style["width"] = "350px";
        if (DCC.Contains("Sub-Task Description")) row.Cells[DCC.IndexOf("Sub-Task Description")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Assigned To")) row.Cells[DCC.IndexOf("Sub-Task Assigned To")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Status")) row.Cells[DCC.IndexOf("Sub-Task Status")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Tech. Rank")) row.Cells[DCC.IndexOf("Sub-Task Tech. Rank")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Customer Rank")) row.Cells[DCC.IndexOf("Sub-Task Customer Rank")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Assigned To Rank")) row.Cells[DCC.IndexOf("Sub-Task Assigned To Rank")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Primary Resource")) row.Cells[DCC.IndexOf("Sub-Task Primary Resource")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Priority")) row.Cells[DCC.IndexOf("Sub-Task Priority")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task Percent Complete")) row.Cells[DCC.IndexOf("Sub-Task Percent Complete")].Style["width"] = "130px";
        if (DCC.Contains("Sub-Task Bus. Rank")) row.Cells[DCC.IndexOf("Sub-Task Bus. Rank")].Style["width"] = "75px";
        if (DCC.Contains("Sub-Task SR Number")) row.Cells[DCC.IndexOf("Sub-Task SR Number")].Style["width"] = "75px";

        if (DCC.Contains("Z")) row.Cells[DCC.IndexOf("Z")].Text = "";
	}

	private void FormatRowDisplay(ref GridViewRow row)
	{
		for (int i = 0; i < row.Cells.Count; i++)
		{
			if (DCC[i].ColumnName.EndsWith("_ID")) row.Cells[i].Style["display"] = "none";

			decimal val;
			bool isNumeric = decimal.TryParse(row.Cells[i].Text, out val);
			if (isNumeric) row.Cells[i].Style["text-align"] = "center";
		}

		if (DCC.Contains("X"))
		{
			row.Cells[DCC.IndexOf("X")].Style["width"] = "15px";
			row.Cells[DCC.IndexOf("X")].Style["text-align"] = "center";

			if (CurrentLevel > 1) row.Cells[DCC.IndexOf("X")].Style["border-left"] = "1px solid grey";
		}

		if (DCC.Contains("Carry In")) row.Cells[DCC.IndexOf("Carry In")].Style["text-align"] = "center";
		if (DCC.Contains("Current Release")) row.Cells[DCC.IndexOf("Current Release")].Style["text-align"] = "center";
		if (DCC.Contains("Rank")) row.Cells[DCC.IndexOf("Rank")].Style["text-align"] = "center";
		if (DCC.Contains("Last Meeting")) row.Cells[DCC.IndexOf("Last Meeting")].Style["text-align"] = "center";
		if (DCC.Contains("Next Meeting")) row.Cells[DCC.IndexOf("Next Meeting")].Style["text-align"] = "center";
		if (DCC.Contains("Customer Flagship")) row.Cells[DCC.IndexOf("Customer Flagship")].Style["text-align"] = "center";
		if (DCC.Contains("Release")) row.Cells[DCC.IndexOf("Release")].Style["text-align"] = "center";

		if (DCC.Contains("Tier"))
		{
			row.Cells[DCC.IndexOf("Tier")].Style["text-align"] = "center";

			switch (row.Cells[DCC.IndexOf("Tier")].Text.ToUpper())
			{
				case "A":
					row.Cells[DCC.IndexOf("Tier")].Style["background-color"] = "red";
					break;
				case "B":
					row.Cells[DCC.IndexOf("Tier")].Style["background-color"] = "yellow";
					break;
				case "C":
					row.Cells[DCC.IndexOf("Tier")].Style["background-color"] = "green";
					break;
			}
		}

		if (DCC.Contains("Tier Rank"))
		{
			row.Cells[DCC.IndexOf("Tier Rank")].Style["text-align"] = "center";

			if (DCC.Contains("Tier"))
			{
				switch (row.Cells[DCC.IndexOf("Tier")].Text.ToUpper())
				{
					case "A":
						row.Cells[DCC.IndexOf("Tier Rank")].Style["background-color"] = "red";
						break;
					case "B":
						row.Cells[DCC.IndexOf("Tier Rank")].Style["background-color"] = "yellow";
						break;
					case "C":
						row.Cells[DCC.IndexOf("Tier Rank")].Style["background-color"] = "green";
						break;
				}
			}
		}

        if (DCC.Contains("Cyber/ISMT") && DCC.Contains("CYBERISMT_ID"))
        {
            row.Cells[DCC.IndexOf("Cyber/ISMT")].Controls.Add(CreateCheckBox("CR", row.Cells[DCC.IndexOf("CYBERISMT_ID")].Text, "Cyber/ISMT", row.Cells[DCC.IndexOf("Cyber/ISMT")].Text));
            row.Cells[DCC.IndexOf("Cyber/ISMT")].Style["text-align"] = "center";
        }

        if (DCC.Contains("Resources") && DCC.Contains("RESOURCES_ID"))
        {
            row.Cells[DCC.IndexOf("Resources")].Controls.Add(CreateLink("Resources",row.Cells[DCC.IndexOf("RESOURCES_ID")].Text, "View Resources"));
        }
    }

    private CheckBox CreateCheckBox(string typeName, string typeID, string field, string isChecked)
    {
        CheckBox chk = new CheckBox();

        chk.Attributes["onchange"] = "input_change(this);";
        chk.Attributes.Add("typeName", typeName);
        chk.Attributes.Add("typeID", typeID);
        chk.Attributes.Add("field", field);
        chk.Attributes["class"] = "saveable";
        if (isChecked == "Yes")
        {
            chk.Checked = true;
        }

        return chk;
    }
    private LinkButton CreateLink(string type, string type_ID, string type_Text)
    {
        LinkButton lb = new LinkButton();
        string workItemID = type_ID;
        string taskNumber = string.Empty;
        string taskID = string.Empty;
        string blnSubTask = "0";

        lb.Text = type_Text;
        switch (type)
        {
            case "Task":
                if (type_Text.Contains(" - "))
                {
                    string[] arrWorkItem = type_Text.Split('-');

                    workItemID = arrWorkItem[0].Trim();
                    taskNumber = arrWorkItem[1].Trim();
                    taskID = type_ID;
                    blnSubTask = "1";

                    lb.Attributes["onclick"] = string.Format("openWorkItem('{0}', '{1}', '{2}', {3}); return false;", workItemID, taskNumber, taskID, blnSubTask);
                }
                else {

                    lb.Attributes["onclick"] = string.Format("lbEditWorkItem_click('{0}'); return false;", workItemID);
                }
                break;
            case "Resources":
                
                    lb.Attributes["onclick"] = string.Format("linkResouces_click('{0}'); return false;", type_ID);
                
                break;
            case "CR":
                lb.Attributes["onclick"] = string.Format("openCR('{0}'); return false;", type_ID);
                break;
        }
        

        return lb;
    }

    private Image CreateImage(bool isHeader)
	{
		Image img = new Image();

        if (isHeader)
        {
            if (CurrentLevel != LevelCount)
            {
                img.Attributes["src"] = "Images/Icons/add_blue.png";
                img.Attributes["title"] = "Expand";
                img.Attributes["alt"] = "Expand";
                img.Attributes["onclick"] = "displayAllRows(this);";
            }
        }
        else {
            if (CurrentLevel == LevelCount)
            {
                img.Attributes["src"] = "Images/Icons/cog.png";
                img.Attributes["title"] = "Grid Settings";
                img.Attributes["alt"] = "Grid Settings";
                img.Attributes["onclick"] = "openSettings();";
            }
            else
            {
                img.Attributes["src"] = "Images/Icons/add_blue.png";
                img.Attributes["title"] = "Expand";
                img.Attributes["alt"] = "Expand";
                img.Attributes["onclick"] = "displayNextRow(this);";
            }
        }


		img.Attributes["height"] = "12";
		img.Attributes["width"] = "12";
		img.Style["cursor"] = "pointer";

		return img;
	}

    private TextBox CreateTextBox(string typeName, string typeID, string field, string value, bool isNumber)
    {
        string txtValue = Server.HtmlDecode(value).Trim();
        TextBox txt = new TextBox();
        
        if (field == "Description")
        { 
            txt.Wrap = true;
            txt.TextMode = TextBoxMode.MultiLine;
            
        }
        txt.Text = txtValue;
		txt.MaxLength = 50;
		txt.Width = new Unit(field == "Sort" ? 90 : 95, UnitType.Percentage);
		txt.Attributes["class"] = "saveable";
		txt.Attributes["onkeyup"] = "input_change(this);";
		txt.Attributes["onpaste"] = "input_change(this);";
		txt.Attributes["onblur"] = "txtBox_blur(this);";
        txt.Attributes.Add("typeName", typeName);
        txt.Attributes.Add("typeID", typeID);
		txt.Attributes.Add("field", field);
		txt.Attributes.Add("original_value", txtValue);

		if (isNumber)
		{
			txt.MaxLength = 5;
			txt.Style["text-align"] = "center";
		}

		return txt;
	}
    #endregion

    #region Excel

    private void ExportExcel(DataTable dt)
    {
        DataSet ds = new DataSet();
        DataSet dsCopy = new DataSet();
        DataTable dtCopy = new DataTable();
       
        //ds.Tables.Add(dt);
        if (Session["AORLevels"] != null) Levels = (XmlDocument)Session["AORLevels"];
        LevelCount = Levels.SelectNodes("crosswalkparameters/level").Count;
        Workbook wb = new Workbook(FileFormatType.Xlsx);
        Worksheet ws = wb.Worksheets[0];
        XmlDocument docLevel = new XmlDocument();
        XmlElement rootLevel = (XmlElement)docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
        var myLevels = Levels.SelectNodes("crosswalkparameters/level");
        int tblCnt = 0;
        foreach (XmlNode nodeLevel in myLevels)
        {
            
            //XmlNode nodeLevel = Levels.SelectNodes("crosswalkparameters/level")[CurrentLevel - 1];
            XmlNode nodeImport = docLevel.ImportNode(nodeLevel, true);
            rootLevel.AppendChild(nodeImport);

            XmlDocument docFilters = new XmlDocument();
            XmlElement rootFilters = (XmlElement)docFilters.AppendChild(docFilters.CreateElement("filters"));

            HtmlSelect ms_Item0 = (HtmlSelect)Page.Master.FindControl("ms_Item0");
            HtmlSelect ms_Item1 = (HtmlSelect)Page.Master.FindControl("ms_Item1");
            HtmlSelect ms_Item9 = (HtmlSelect)Page.Master.FindControl("ms_Item9");
            HtmlSelect ms_Item9a = (HtmlSelect)Page.Master.FindControl("ms_Item9a");

            List<string> listRelease = new List<string>();
            List<string> listContract = new List<string>();
            List<string> listTaskStatus = new List<string>();
            List<string> listSubTaskStatus = new List<string>();

            if (ms_Item0 != null && ms_Item0.Items.Count > 0)
                foreach (ListItem li in ms_Item0.Items)
                    if (li.Selected) listRelease.Add(li.Value);

            if (ms_Item1 != null && ms_Item1.Items.Count > 0)
                foreach (ListItem li in ms_Item1.Items)
                    if (li.Selected) listContract.Add(li.Value);

            if (ms_Item9 != null && ms_Item9.Items.Count > 0)
                foreach (ListItem li in ms_Item9.Items)
                    if (li.Selected) listTaskStatus.Add(li.Value);

            if (ms_Item9a != null && ms_Item9a.Items.Count > 0)
                foreach (ListItem li in ms_Item9a.Items)
                    if (li.Selected) listSubTaskStatus.Add(li.Value);


            dt = AOR.AOR_Crosswalk_Multi_Level_Grid(level: docLevel, filter: docFilters, qfRelease: String.Join(",", listRelease), qfContract: String.Join(",", listContract), qfTaskStatus: String.Join(",", listTaskStatus), qfSubTaskStatus: String.Join(",", listSubTaskStatus), getColumns: false);

            foreach (DataColumn c in dt.Columns.Cast<DataColumn>().ToList())
                if (c.ColumnName.ToString() == "X" || c.ColumnName.ToString() == "Z")
                    dt.Columns.Remove(c.ColumnName);

            var colNames = (from dc in dt.Columns.Cast<DataColumn>() select dc.ColumnName).Where(x => x != "X" && x != "Y" && x != "Z" && x.IndexOf("_ID", StringComparison.Ordinal) == -1).ToList();

            tblCnt += 1;

            //dt.SetConcatCols(Session["itisettings"].ToString(), tblCnt);
            dt.SetSortOrder(Session["itisettings"].ToString(), tblCnt);
            dt.SetColumnOrder(Session["itisettings"].ToString(), colNames.ToArray(), tblCnt);
            dt = dt.DefaultView.ToTable();
            //dtCopy = dt.Copy();
            //string tblNameCopy = "'" + tblCnt;
            //dtCopy.TableName = tblNameCopy;
            //dsCopy.Tables.Add(dtCopy);

            //dt.SetColNames(Session["itisettings"].ToString(), tblCnt);
            dt.AcceptChanges();
            string tblName = "'" + tblCnt;
            dt.TableName = tblName;
            ds.Tables.Add(dt);

            
        }
        
        //int dtRowCount = 0;
        int count = ds.Tables.Count;
        object[] filterCols = new object[0];
        object[] curfilterCols = new object[0];

        dtColumnCnt = 0;
        int colCnt = 0;
        for (int k = 0; k < ds.Tables.Count; k++)
        {
            if (colCnt > dtColumnCnt)
            {
                dtColumnCnt = colCnt;
            }
            colCnt = 0;
            if (k > 0)
            {
                foreach (DataColumn column in ds.Tables[k].Columns)
                 {
                
                    if (column.ToString().EndsWith("_ID"))
                    {

                    }
                    else
                    {
                        int blnKeep = 1;
                        for (int n = 0; n < ds.Tables[k - 1].Columns.Count; n++)
                        {
                            if (ds.Tables[k - 1].Columns[n] != null)
                            {
                                if (ds.Tables[k - 1].Columns[n].ToString() == column.ToString())
                                {
                                    blnKeep = 0;
                                }
                            }
                        }
                        if (blnKeep == 1)
                        {
                            colCnt++;
                        }
                    }
                }
            }
        }
        //ws.AutoFitColumns();
        AddRowsColumns(ws, 0,0 , filterCols, curfilterCols, ds.Tables[0], ds, 0);
    
        //ws.Cells.ImportDataTable(dt, true, 0, 0, false, false);

        MemoryStream ms = new MemoryStream();
        wb.Save(ms, SaveFormat.Xlsx);

        Response.ContentType = "application/xlsx";
        Response.AddHeader("content-disposition", "attachment; filename=" + "AOR Grid" + ".xlsx");
        Response.BinaryWrite(ms.ToArray());

        Response.End();
    }

    private void AddRowsColumns(Worksheet ws, int startRow, int endRow, object[] remFilterCols, object[] curfilterCols, DataTable dt, DataSet ds, int count)
    {
        count++;
        string curCell = "";
        int curP = 0;
        Aspose.Cells.Style curStyle = new Aspose.Cells.Style();
        StyleFlag flag = new StyleFlag() { All = true };
        if (count > ds.Tables.Count)
        {

        }
        else {
                DataSet newDS = ds.Copy();
                DataTable dtFiltered = dt.Copy();
                string rowFilter = "";
                for (int j = 0; j < curfilterCols.Length; j++)
                {
                    if (rowFilter == "")
                    {
                        rowFilter = curfilterCols[j].ToString();
                    }
                    else {
                        if (curfilterCols[j].ToString() != "")
                        {
                            rowFilter = rowFilter + " and " + curfilterCols[j];
                        }
                    }
                }
                DataView dv = dt.DefaultView;
                dv.RowFilter = rowFilter;
                dtFiltered = dv.ToTable();

            object[] removeFilterCols = new object[dtFiltered.Columns.Count];
            foreach (DataColumn column in dtFiltered.Columns)
            {
                if (column.ToString().EndsWith("_ID"))
                {

                }
                else
                {
                    removeFilterCols[column.Ordinal] = column.ToString();
                }
            }
            
            for (int n = 0; n < remFilterCols.Length; n++)
            {
                if (remFilterCols[n] != null)
                {
                            
                        dtFiltered.Columns.Remove(remFilterCols[n].ToString());
                            
                }
            }
            //dtFiltered.SetSortOrder(Session["itisettings"].ToString(), count);
            dtFiltered.SetColNames(Session["itisettings"].ToString(), count);
            dt = dt.DefaultView.ToTable();
            if (count != 2)
            {
                rowCount++;
            }
                int m = 0;
            int curColCnt = 0;
                foreach (DataColumn column in dtFiltered.Columns)
                {

                if (column.ToString().EndsWith("_ID"))
                {

                }
                else
                {
                    //int blnKeep = 1;
                    //for (int n = 0; n < remFilterCols.Length; n++)
                    //{
                    //    if (remFilterCols[n] != null)
                    //    {
                    //        if (remFilterCols[n].ToString() == column.ToString())
                    //        {
                    //            blnKeep = 0;
                    //        }
                    //    }
                    //}
                    //if (blnKeep == 1)
                    //{
                    curColCnt++;
                            if (count != 2)
                            {
                            string cellName = "";
                            char uniSel = (char)(uniA + m);
                            cellName = (char)uniSel + "";
                            if (m > 26)
                            {
                                cellName = (char)(uniA + 0) + "" + (char)uniSel;
                            }
                            if (m > 52)
                            {
                                cellName = (char)(uniA + 1) + "" + (char)uniSel;
                            }
                            cellName = cellName + (rowCount).ToString();
                            curCell = cellName;
                            curP = m;
                            ws.Cells[cellName].PutValue(column.ToString());
                            // Getting the Style object for the cell
                            Aspose.Cells.Style headerStyle = new Aspose.Cells.Style();

                            // Setting Style properties like border, alignment etc.
                            headerStyle.SetBorder(BorderType.TopBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.SetBorder(BorderType.BottomBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.SetBorder(BorderType.LeftBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.SetBorder(BorderType.RightBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            headerStyle.Pattern = BackgroundType.Solid;
                            headerStyle.Font.Name = "Calibri";
                            headerStyle.Font.Size = 11;
                            switch (count)
                            {
                                case 1:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#F4B084");
                                    headerStyle.Font.IsBold = true;
                                    break;
                                case 2:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#0070C0");
                                    headerStyle.Font.Color = System.Drawing.Color.White;
                                    headerStyle.Font.IsBold = true;
                                    break;
                                case 3:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#C9C9C9");
                                    break;
                                case 4:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#BDD7EE");
                                    break;
                                default:
                                    headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#EDEDED");
                                    break;
                            }
                            // Setting the style of the cell with the customized Style object
                            curStyle = headerStyle;
                            ws.Cells[cellName].SetStyle(headerStyle);
                            m++;
                        }
                    //}

                }
            }
            if (count != 2)
            {
                if (curColCnt == 1)
                {

                    string cellName = "";
                    char uniSel = (char)(uniA + dtColumnCnt - 1);
                    cellName = (char)uniSel + "";
                    if (dtColumnCnt - 1 > 26)
                    {
                        cellName = (char)(uniA + 0) + "" + (char)uniSel;
                    }
                    if (dtColumnCnt - 1 > 52)
                    {
                        cellName = (char)(uniA + 1) + "" + (char)uniSel;
                    }
                    cellName = cellName + (rowCount).ToString();
                    // Create a range
                    Range range = ws.Cells.CreateRange(curCell + ":" + cellName);
                    range.ApplyStyle(curStyle, flag);

                    // Merge range into a single cell
                    range.Merge();
                }
            }

            dtRowCount += endRow;
            foreach (DataRow row in dtFiltered.Rows)
            {
                int startCnt = 0;
                
                object[] newfilterCols = new object[dtFiltered.Columns.Count];
                //object[] removeFilterCols = new object[dtFiltered.Columns.Count];
                //filterCols = curfilterCols;
                if (count == 2)
                {
                    rowCount++;
                    int p = 0;
                    foreach (DataColumn column in dtFiltered.Columns)
                    {

                        if (column.ToString().EndsWith("_ID"))
                        {

                        }
                        else
                        {
                            //    int blnKeep = 1;
                            //    for (int q = 0; q < remFilterCols.Length; q++)
                            //    {
                            //        if (remFilterCols[q] != null)
                            //        {
                            //            if (remFilterCols[q].ToString() == column.ToString())
                            //            {
                            //                blnKeep = 0;
                            //            }
                            //        }
                            //    }
                            //    if (blnKeep == 1)
                            //    {
                            string cellName = "";
                                char uniSel = (char)(uniA + p);
                                cellName = (char)uniSel + "";
                                if (p > 26)
                                {
                                    cellName = (char)(uniA + 0) + "" + (char)uniSel;
                                }
                                if (p > 52)
                                {
                                    cellName = (char)(uniA + 1) + "" + (char)uniSel;
                                }
                                cellName = cellName + (rowCount).ToString();
                                curCell = cellName;
                                curP = p;
                                ws.Cells[cellName].PutValue(column.ToString());
                                // Getting the Style object for the cell
                                Aspose.Cells.Style headerStyle = new Aspose.Cells.Style();

                                // Setting Style properties like border, alignment etc.
                                headerStyle.SetBorder(BorderType.TopBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                                headerStyle.SetBorder(BorderType.BottomBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                                headerStyle.SetBorder(BorderType.LeftBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                                headerStyle.SetBorder(BorderType.RightBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                                headerStyle.Pattern = BackgroundType.Solid;
                                headerStyle.Font.Name = "Calibri";
                                headerStyle.Font.Size = 11;
                                switch (count)
                                {
                                    case 1:
                                        headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#F4B084");
                                        headerStyle.Font.IsBold = true;
                                        break;
                                    case 2:
                                        headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#0070C0");
                                        headerStyle.Font.Color = System.Drawing.Color.White;
                                        headerStyle.Font.IsBold = true;
                                        break;
                                    case 3:
                                        headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#C9C9C9");
                                        break;
                                    case 4:
                                        headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#BDD7EE");
                                        break;
                                    default:
                                        headerStyle.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#EDEDED");
                                        break;
                                }
                                curStyle = headerStyle;
                                // Setting the style of the cell with the customized Style object
                                ws.Cells[cellName].SetStyle(headerStyle);
                                p++;
                            }
                        //    }
                    }
                }
                if (count == 2)
                {
                    if (curColCnt == 1)
                    {

                        string cellName = "";
                        char uniSel = (char)(uniA + dtColumnCnt - 1);
                        cellName = (char)uniSel + "";
                        if (dtColumnCnt - 1 > 26)
                        {
                            cellName = (char)(uniA + 0) + "" + (char)uniSel;
                        }
                        if (dtColumnCnt - 1 > 52)
                        {
                            cellName = (char)(uniA + 1) + "" + (char)uniSel;
                        }
                        cellName = cellName + (rowCount).ToString();
                        // Create a range
                        Range range = ws.Cells.CreateRange(curCell + ":" + cellName);
                        range.ApplyStyle(curStyle, flag);

                        // Merge range into a single cell
                        range.Merge();
                    }
                }
                startCnt = rowCount;
                rowCount++;
                int i = 0;
                foreach (DataColumn column in dtFiltered.Columns)
                {
                    object item = row[column];

                    if (column.ToString().EndsWith("_ID"))
                    {
                        //if (count > 1)
                        //{
                        var colObj = " isnull([" + column.ToString() + "], 0) =  '" + (item.ToString() == "" ? "0" : item.ToString()) + "'";
                        newfilterCols[column.Ordinal] = colObj;
                        //}
                    }
                    else
                    {
                        //removeFilterCols[column.Ordinal] = column.ToString();
                        newfilterCols[column.Ordinal] = "";
                        //int blnKeepThis = 1;
                        //for (int n = 0; n < remFilterCols.Length; n++)
                        //{
                        //    if (remFilterCols[n] != null)
                        //    {
                        //        if (remFilterCols[n].ToString() == column.ToString())
                        //        {
                        //            blnKeepThis = 0;
                        //        }
                        //    }
                        //}
                        //if (blnKeepThis == 1)
                        //{
                            //string cellName = (char)(uniA + i) + (rowCount).ToString();
                            //ws.Cells[cellName].PutValue(item.ToString());
                            string cellName = "";
                            char uniSel = (char)(uniA + i);
                            cellName = (char)uniSel + "";
                            if (i > 26)
                            {
                                cellName = (char)(uniA + 0) + "" + (char)uniSel;
                            }
                            if (i > 52)
                            {
                                cellName = (char)(uniA + 1) + "" + (char)uniSel;
                            }
                            cellName = cellName + (rowCount).ToString();
                            curCell = cellName;
                            curP = i;
                            ws.Cells[cellName].PutValue(Uri.UnescapeDataString(item.ToString()));
                            // Getting the Style object for the cell
                            Aspose.Cells.Style style = new Aspose.Cells.Style();
                            style.SetBorder(BorderType.TopBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            style.SetBorder(BorderType.BottomBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            style.SetBorder(BorderType.LeftBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            style.SetBorder(BorderType.RightBorder, CellBorderType.Thin, System.Drawing.Color.Black);
                            style.Pattern = BackgroundType.Solid;
                            style.Font.Name = "Calibri";
                            style.Font.Size = 11;
                            style.VerticalAlignment = TextAlignmentType.Top;
                            switch (count)
                            {
                                case 1:
                                    style.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#F4B084");
                                    style.Font.IsBold = true;
                                    break;
                                case 3:
                                    style.ForegroundColor = System.Drawing.ColorTranslator.FromHtml("#EDEDED");
                                    break;
                            }
                            //if (column.ToString().Contains("Description") || column.ToString().Contains("Title") || column.ToString().Contains("Notes") || column.ToString().Contains("Rationale") || column.ToString().Contains("Customer Impact"))
                            if (Uri.UnescapeDataString(item.ToString()).Length > 50)
                            {
                                // Setting Style properties like border, alignment etc.
                                style.IsTextWrapped = true;
                                // Setting the style of the cell with the customized Style object
                                ws.Cells.SetColumnWidth(i, 50);
                            }
                            else
                            {
                                //ws.AutoFitColumn(i);
                            }
                            curStyle = style;
                            ws.Cells[cellName].SetStyle(style);
                            i++;
                        //}
                    }


                }
                if (curColCnt == 1)
                {
                    string cellName = "";
                    char uniSel = (char)(uniA + dtColumnCnt - 1);
                    cellName = (char)uniSel + "";
                    if (dtColumnCnt - 1 > 26)
                    {
                        cellName = (char)(uniA + 0) + "" + (char)uniSel;
                    }
                    if (dtColumnCnt - 1 > 52)
                    {
                        cellName = (char)(uniA + 1) + "" + (char)uniSel;
                    }
                    cellName = cellName + (rowCount).ToString();
                    // Create a range
                    Range range = ws.Cells.CreateRange(curCell + ":" + cellName);
                    range.ApplyStyle(curStyle, flag);

                    // Merge range into a single cell
                    range.Merge();
                }
                if (count < ds.Tables.Count)
                {
                    AddRowsColumns(ws, startCnt, dtFiltered.Rows.Count + 1, removeFilterCols, newfilterCols, ds.Tables[count], newDS, count);

                }
                if (startCnt > 0) {
                    if (count != ds.Tables.Count)
                    {
                        if (ws.Cells.MaxDataRow >= startCnt + 1 && ws.Cells.MaxDataRow >= rowCount - 1)
                        {
                            ws.Cells.GroupRows(startCnt + 1, rowCount - 1, false);
                        }
                    }
                }
            }
           
            // Setting SummaryRowBelow property to false
            ws.Outline.SummaryRowBelow = false;
            // ws.Cells.SetColumnWidth(5, 255);
        }

        //}
    }
    #endregion

    public static DataTable GetViewOptions(string gridview)
    {
        var UserId = UserManagement.GetUserId_FromUsername();
        return WTSData.GetViewOptions(UserId, gridview);
    }

    #region AJAX
    [WebMethod]
	public static string DeleteAOR(string aor)
	{
		Dictionary<string, string> result = new Dictionary<string, string> { { "deleted", "" }, { "error", "" } };
		bool deleted = false;
		string errorMsg = string.Empty;

		try
		{
			var AOR_ID = 0;
			int.TryParse(aor, out AOR_ID);

			deleted = AOR.AOR_Delete(AOR_ID);
		}
		catch (Exception ex)
		{
			LogUtility.LogException(ex);

			deleted = false;
			errorMsg = ex.Message;
		}

		result["deleted"] = deleted.ToString();
		result["error"] = errorMsg;

		return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
	}

	[WebMethod]
	public static string SaveChanges(string changes)
	{
		var result = new Dictionary<string, string> { { "saved", "" }, { "error", "" } };
		var saved = false;
		var errorMsg = string.Empty;

        try
        {
			XmlDocument docChanges = (XmlDocument)JsonConvert.DeserializeXmlNode(changes, "changes");

			saved = AOR.AOR_Update(docChanges);
		}
		catch (Exception ex)
		{
			LogUtility.LogException(ex);

			saved = false;
			errorMsg = ex.Message;
		}
		
		result["saved"] = saved.ToString();
		result["error"] = errorMsg;

		return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
	}

	[WebMethod(EnableSession = true)]
	public static bool UpdateSession(string args)
	{
		var sessionMethods = new SessionMethods();
		sessionMethods.Session["itisettings"] = args;
		return true;
	}

    [WebMethod]
    public static string GetTier1Data(int gridViewId, string gridview)
    {
        var dt = GetViewOptions(gridview);

        foreach (DataRow row in dt.Rows)
            if (row["GridViewID"].ToString() == gridViewId.ToString())
                return ValidateItiSettings(row["Tier1Columns"].ToString());

        return null;
    }

    private static string ValidateItiSettings(string args)
    {
        var colGroups = new JArray();
        var d = JsonConvert.DeserializeObject<dynamic>(args);
        var columnOrder = JsonConvert.DeserializeObject<JArray>(d.columnorder.ToString());
        var newAorProperties = new List<AorProperty>();
        var docLevel = new XmlDocument();
        var docFilters = new XmlDocument();
        docFilters.AppendChild(docFilters.CreateElement("filters"));
        docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
        var dt = AOR.AOR_Crosswalk_Multi_Level_Grid(level: docLevel, filter: docFilters, qfRelease: "", qfContract: "", qfTaskStatus: "", qfSubTaskStatus: "", getColumns: true);
        var jsonUpdated = false;

        foreach (var item in dt.AsEnumerable().Select(r => r.ItemArray[0]).Distinct().ToArray())
            colGroups.Add(item.ToString());

        d.columngroups = colGroups;
        d.validated = DateTime.Now;

        foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
        {
            var itemExists = false;
            foreach (var item in d.tblCols)
                if (item.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                {
                    item.colgroup = row[0].ToString();
                    jsonUpdated = true;
                    itemExists = true;
                    break;
                }

            if (!itemExists)
            {
                var newProperty = new AorProperty();

                newProperty.name = row[1].ToString();
                newProperty.alias = "";
                newProperty.show = false;
                newProperty.sortorder = "none";
                newProperty.sortpriority = "";
                newProperty.groupname = "";
                newProperty.concat = false;
                newProperty.colgroup = row[0].ToString();

                newAorProperties.Add(newProperty);
                columnOrder.Add((columnOrder.Count + 1).ToString());
            }
        }

        if (jsonUpdated || newAorProperties.Count > 0)
        {
            var aorProperties = JsonConvert.DeserializeObject<List<AorProperty>>(d.tblCols.ToString());
            if (newAorProperties.Count > 0)
                foreach (var item in newAorProperties)
                    aorProperties.Add(item);

            d.tblCols = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(aorProperties));
            d.columnorder = columnOrder;
        }

        foreach (var obj in d)
            if (obj.Name.IndexOf("subgrid") != -1)
            {
                jsonUpdated = false;
                foreach (var item in obj)
                {
                    newAorProperties.Clear();
                    columnOrder = JsonConvert.DeserializeObject(item[0].columnorder.ToString());

                    foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
                    {
                        var itemExists = false;
                        foreach (var i in item[0].tblCols)
                            if (i.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                            {
                                i.colgroup = row[0].ToString();
                                jsonUpdated = true;
                                itemExists = true;
                                break;
                            }

                        if (!itemExists)
                        {
                            var newProperty = new AorProperty();

                            newProperty.name = row[1].ToString();
                            newProperty.alias = "";
                            newProperty.show = false;
                            newProperty.sortorder = "none";
                            newProperty.sortpriority = "";
                            newProperty.groupname = "";
                            newProperty.concat = false;
                            newProperty.colgroup = row[0].ToString();

                            newAorProperties.Add(newProperty);
                            columnOrder.Add((columnOrder.Count + 1).ToString());
                        }
                    }

                    if (jsonUpdated || newAorProperties.Count > 0)
                    {
                        var aorProperties = JsonConvert.DeserializeObject<List<AorProperty>>(item[0].tblCols.ToString());
                        if (newAorProperties.Count > 0)
                            foreach (var i in newAorProperties)
                                aorProperties.Add(i);
                        item[0].tblCols = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(aorProperties));
                        item[0].columnorder = columnOrder;
                    }
                }
            }

        string[] oldColCount = JsonConvert.DeserializeObject<string[]>(d.columnorder.ToString());
        var newColCount = dt.AsEnumerable().Select(r => r.ItemArray[1]).Distinct().Count();
        var colDiff = oldColCount.Length - newColCount;

        if (colDiff > 0)
        {
            var validCols = new JArray();

            foreach (var item in d.tblCols)
                foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
                    if (item.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                    {
                        validCols.Add(item);
                        break;
                    }

            string colName;
            var newColOrder = new List<string>();

            for (int i = 0; i < d.columnorder.Count; i++)
            {
                colName = "";
                for (int j = 0; j < d.tblCols.Count; j++)
                    if (d.columnorder[i] == j + 1) colName = d.tblCols[j].name;

                if (!string.IsNullOrEmpty(colName))
                    for (int k = 0; k < validCols.Count; k++)
                        if (colName == validCols[k].First.First.ToString())
                            newColOrder.Add((k + 1).ToString());
            }

            d.tblCols = JArray.FromObject(validCols);
            d.columnorder = JArray.FromObject(newColOrder);

            foreach (var obj in d)
                if (obj.Name.IndexOf("subgrid") != -1)
                {
                    validCols = new JArray();
                    newColOrder.Clear();

                    foreach (var item in obj)
                    {
                        foreach (var i in item[0].tblCols)
                            foreach (var row in dt.AsEnumerable().Select(r => r.ItemArray).Distinct().ToArray())
                                if (i.name.ToString().ToUpper() == row[1].ToString().ToUpper())
                                {
                                    validCols.Add(i);
                                    break;
                                }

                        for (int i = 0; i < item[0].columnorder.Count; i++)
                        {
                            colName = "";
                            for (int j = 0; j < item[0].tblCols.Count; j++)
                                if (item[0].columnorder[i] == j + 1) colName = item[0].tblCols[j].name;

                            if (!string.IsNullOrEmpty(colName))
                                for (int k = 0; k < validCols.Count; k++)
                                    if (colName == validCols[k].First.First.ToString())
                                        newColOrder.Add((k + 1).ToString());
                        }

                        item[0].tblCols = JArray.FromObject(validCols);
                        item[0].columnorder = JArray.FromObject(newColOrder);
                    }
                }
        }

        if (d is JArray) return JsonConvert.SerializeObject(d);
        return JsonConvert.SerializeObject(d);
    }
    #endregion
}