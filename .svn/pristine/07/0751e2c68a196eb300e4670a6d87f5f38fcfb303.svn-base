<%@ Page Title="" Language="C#" MasterPageFile="~/Grids.master" AutoEventWireup="true" CodeFile="MDGrid_ProductVersion_Session.aspx.cs" Inherits="MDGrid_ProductVersion_Session" Theme="Default" %>

<asp:Content ID="cpHeadTitle" ContentPlaceHolderID="headTitle" runat="Server">Master Data - Session Grid</asp:Content>
<asp:Content ID="cpHead" ContentPlaceHolderID="head" runat="Server">
    <style type="text/css">
        .upArrow {
            border: solid green;
            border-width: 0 3px 3px 0;
            display: inline-block;
            padding: 3px;
            transform: rotate(-135deg);
            -webkit-transform: rotate(-135deg);
            float: right;
            margin-right: 3px;
        }

        .downArrow {
            border: solid red;
            border-width: 0 3px 3px 0;
            display: inline-block;
            padding: 3px;
            transform: rotate(45deg);
            -webkit-transform: rotate(45deg);
            float: right;
            margin-right: 3px;
        }
    </style>
</asp:Content>
<asp:Content ID="cpHeaderText" ContentPlaceHolderID="ContentPlaceHolderHeader" runat="Server"></asp:Content>
<asp:Content ID="cpGridSetting" ContentPlaceHolderID="cphGridSettings" runat="Server"></asp:Content>
<asp:Content ID="cpPageContentInfo" ContentPlaceHolderID="cphPageContentInfo" runat="Server">
	<table cellpadding="0" cellspacing="0" style="float: right; padding-right: 2px;">
		<tr>
			<td>
                <img id="imgHelp" src="Images/Icons/help.png" alt="Help" title="Help" width="15" height="15" style="cursor: pointer; vertical-align: middle; padding: 0px 5px 3px 5px;" />
				<input type="button" id="buttonNew" value="Add" disabled="disabled" />
				<input type="button" id="buttonSave" value="Save" disabled="disabled" />
				<input type="button" id="buttonDelete" value="Delete" disabled="disabled" />
				<input type="button" id="buttonWizard" value="Session Wizard" disabled="disabled" />
			</td>
		</tr>
	</table>
</asp:Content>
<asp:Content ID="cpBody" ContentPlaceHolderID="ContentPlaceHolderBody" runat="Server">
	<iti_Tools_Sharp:Grid ID="grdMD" runat="server" AllowPaging="true" PageSize="50" FirstPageText="First" LastPageText="Last" PagerMode="NumericFirstLast" AllowResize="true"
		CssClass="grid" BodyCssClass="gridBody" SelectedRowCssClass="selectedRow" HeaderCssClass="gridHeader" PagerCssClass="gridPager" FooterCssClass="gridPager" AlternatingRowColor="#dfdfdf">
	</iti_Tools_Sharp:Grid>

	<div id="divPageDimmer" style="position: absolute; left: 0px; top: 0px; width: 100%; height: 100%; background: grey; filter: alpha(opacity=60); opacity: .60; display: none;"></div>
	<div id="divSaving" style="position: absolute; left: 35%; top: 15%; padding: 10px; background: white; border: 1px solid grey; font-size: 18px; text-align: center; display: none;">
		<table>
			<tr>
				<td>WTS is Saving Data... Please wait...</td>
			</tr>
			<tr>
				<td>
					<img alt='' src="Images/loaders/progress_bar_blue.gif" /></td>
			</tr>
		</table>
	</div>

	<asp:ScriptManager ID="ScriptManager1" runat="server" EnablePageMethods="true"></asp:ScriptManager>

    <script type="text/javascript" src="Scripts/jquery-ui.js"></script>

	<script id="jsVariables" type="text/javascript">

		var _pageURLs = new PageURLs();
        var _idxDelete = 0, _idxID = 0, _idxName = 0, _idxDescription = 0, _idxSortOrder = 0, _idxArchive = 0;
        var datepickerids = 1;
		var _htmlDeleteImage = '<img src="Images/Icons/delete.png" height="12" width="12" alt="Click to Delete New Row" title="Delete New Row" onclick="deleteNewRow(this);" style="cursor:pointer;" />';
	</script>

	<script id="jsAJAX" type="text/javascript">

		function GetColumnValue(row, ordinal, blnoriginal_value) {
			try {
				var tdval = $(row).find('td:eq(' + ordinal + ')');
				var val = '';
				if ($(tdval).length == 0) { return ''; }

				if ($(tdval).children.length > 0) {
					if ($(tdval).find("select").length > 0) {
						if (blnoriginal_value) {
							val = $(tdval).find("select").attr('original_value');
						}
						else {
							val = $(tdval).find("select").val();
						}
					}
					else if ($(tdval).find('input[type=checkbox]').length > 0) {
						if (blnoriginal_value) {
							val = $(tdval).find('input[type=checkbox]').parent().attr("original_value");
						}
						else {
							if ($(tdval).find('input[type=checkbox]').prop('checked')) { val = '1'; }
							else { val = '0'; }
						}
					}
					else if ($(tdval).find('input[type=text]').length > 0) {
						if (blnoriginal_value) {
							val = $(tdval).find('input[type=text]').attr('original_value');

						}
						else {
							val = $(tdval).find('input[type=text]').val();
						}
                    }
                    else if ($(tdval).find('textarea').length > 0) {
                        if (blnoriginal_value) {
                            val = $(tdval).find('textarea').attr('original_value');

                        }
                        else {
                            val = $(tdval).find('textarea').val();
                        }
                    }
					else if ($(tdval).find('input[type=number]').length > 0) {
						if (blnoriginal_value) {
							val = $(tdval).find('input[type=number]').attr('original_value');

						}
						else {
							val = $(tdval).find('input[type=number]').val();
						}
					}
					else if ($(tdval).find('input').length > 0) {
						if (blnoriginal_value) {
							val = $(tdval).find('input').attr('original_value');

						}
						else {
							val = $(tdval).find('input').val();
						}
                    }
                    else if ($(tdval).find('span').length > 0) {
                        if (blnoriginal_value) {
                            val = 'old';
                        }
                        else {
                            val = $(tdval).find('span').text();
                        }
                    }
					else {
						val = $(tdval).text();
					}

				}
				else {
					val = $(tdval).text();
				}
				return val;
			} catch (e) { return ''; }
		}

		function save() {
            try {
                var valid = validate();

                if (valid.length == 0) {
                    var changedRows = [];
                    var id = 0;
                    var original_value = '', name = '', description = '', narrative = '', sortOrder = '', archive = '';

                    $('.gridBody, .selectedRow', $('#<%=this.grdMD.ClientID%>_Grid')).each(function (i, row) {
                        var changedRow = [];
                        var changed = false;

                        if (_dcc[0].length > 0 && $(this)[0].hasAttribute('fieldChanged')) {
                            for (var i = 0; i <= _dcc[0].length - 1; i++) {
                                var newval = GetColumnValue(row, i);
                                var oldval = GetColumnValue(row, i, true);
                                if (newval != oldval) {
                                    changed = true;
                                    break;
                                }
                            }
                            if (changed) {
                                for (var i = 0; i <= _dcc[0].length - 1; i++) {
                                    changedRow.push('"' + _dcc[0][i].ColumnName + '":"' + escape(GetColumnValue(row, i)) + '"');
                                }
                                var obj = '{' + changedRow.join(',') + '}';
                                changedRows.push(obj);
                            }
                        }
                    });

                    if (changedRows.length == 0) {
                        MessageBox('You have not made any changes');
                    }
                    else {
                        ShowDimmer(true, "Updating...", 1);
                        var json = '[' + changedRows.join(",") + ']';
                        PageMethods.SaveChanges(<%=ProductVersionID%>, json, save_done, on_error);
                    }
                } else {
                    MessageBox('Invalid entries: <br><br>' + valid);
                }
			} catch (e) {
				ShowDimmer(false);
				MessageBox('There was an error gathering data to save.\n' + e.message);
			}
		}
		function save_done(result) {
			try {
				ShowDimmer(false);

				var saved = false;
				var ids = '', errorMsg = '';

				var obj = jQuery.parseJSON(result);

				if (obj) {
					if (obj.saved && obj.saved.toUpperCase() == 'TRUE') {
						saved = true;
					}
					if (obj.ids) {
						ids = obj.ids;
					}
					if (obj.error) {
						errorMsg = obj.error;
					}
				}

				if (saved) {
					MessageBox('Items have been saved.');
					refreshPage();
				}
				else {
					MessageBox('Failed to save items. \n' + errorMsg);
				}
			} catch (e) { }
        }

        function validate() {
            var validation = [];
            var $sessionRows = $('.gridBody:visible, .selectedRow', $('#<%=this.grdMD.ClientID%>_Grid'))
            var blnExit = false;

            $.each($sessionRows, function () {
                if (blnExit) return false;

                var startDate = $(this).find('input[id*="txtStartDate"]').datepicker('getDate');
                var endDate = $(this).find('input[id*="txtEndDate"]').datepicker('getDate');
                var duration = $(this).find('input[id*="txtDuration"]').val();

                if (!startDate) {
                    validation.push("Session must have a start date.");
                    return false;
                } 

                if (duration <= 0) {
                    validation.push("Session must have a valid duration.");
                    return false;
                }

                $.each($sessionRows.not($(this)), function () {
                    if (($(this).find('input[id*="txtStartDate"]').datepicker('getDate') > startDate
                            && $(this).find('input[id*="txtStartDate"]').datepicker('getDate') < endDate)
                        || ($(this).find('input[id*="txtEndDate"]').datepicker('getDate') > startDate
                            && $(this).find('input[id*="txtEndDate"]').datepicker('getDate') < endDate)
                        || (startDate && $(this).find('input[id*="txtStartDate"]').datepicker('getDate').toDateString() == startDate.toDateString()
                            && $(this).find('input[id*="txtEndDate"]').datepicker('getDate').toDateString() == endDate.toDateString())) {
                        validation.push("Session dates cannot overlap.");
                        blnExit = true;
                        return false;
                    }
                });
            });

            return validation.join('<br>');
        }

		function deleteItem() {
			try {
				ShowDimmer(true, "Deleting...", 1);

				PageMethods.DeleteItem(parseInt(_selectedId), deleteItem_done, on_error);

			} catch (e) {
				ShowDimmer(false);
				MessageBox('There was an error gathering data to save.\n' + e.message);
			}
		}
		function deleteItem_done(result) {
			ShowDimmer(false);

			var deleted = false;
			var id = '', errorMsg = '';

			try {
				var obj = jQuery.parseJSON(result);

				if (obj) {
					if (obj.deleted && obj.deleted.toUpperCase() == 'TRUE') {
						deleted = true;
					}
					if (obj.id) {
						id = obj.id;
					}
					if (obj.error) {
						errorMsg = obj.error;
					}
				}

				if (deleted) {
					MessageBox('Item has been deleted.');
					refreshPage();
				}
				else {
					MessageBox('Failed to delete item. \n' + errorMsg);
				}
			} catch (e) { }
		}

		function on_error(result) {
			ShowDimmer(false);

			var resultText = 'An error occurred when communicating with the server';/*\n' +
                    'readyState = ' + result.readyState + '\n' +
                    'responseText = ' + result.responseText + '\n' +
                    'status = ' + result.status + '\n' +
                    'statusText = ' + result.statusText;*/

			MessageBox('save error:  \n' + resultText);
		}

	</script>

	<script id="jsEvents" type="text/javascript">
		
		function refreshPage() {
			var qs = document.location.href;
			qs = editQueryStringValue(qs, 'RefData', 1);

			document.location.href = 'Loading.aspx?Page=' + qs;
		}

		function imgExport_click() {
		    window.location.href += '&Export=1';
		}

		function imgSort_click() {
			try {
				var sortableColumns = '<%=this.SortableColumns%>';
				while (sortableColumns.indexOf('<BR />') > -1) {
					sortableColumns = sortableColumns.replace("<BR />", ' ');
				}
				while (sortableColumns.indexOf('<BR/>') > -1) {
					sortableColumns = sortableColumns.replace("<BR/>", ' ');
				}
				while (sortableColumns.indexOf('<br />') > -1) {
					sortableColumns = sortableColumns.replace("<br />", ' ');
				}
				while (sortableColumns.indexOf('<br/>') > -1) {
					sortableColumns = sortableColumns.replace("<br/>", ' ');
				}

				while (sortableColumns.indexOf('...') > -1) {
					sortableColumns = sortableColumns.replace('...', '');
				}

				while (sortableColumns.indexOf('<BR>') > -1) {
					sortableColumns = sortableColumns.replace('<BR>', ' ');
				}
				while (sortableColumns.indexOf('<br>') > -1) {
					sortableColumns = sortableColumns.replace('<br>', ' ');
				}

				var sURL = 'SortOptions.aspx?sortColumns=' + escape(sortableColumns) + '&sortOrder=' + '<%=Request.QueryString["sortOrder"]%>';
				var nPopup = popupManager.AddPopupWindow("Sorter", "Sort Grid", sURL, 200, 400, "PopupWindow", this.self);
				if (nPopup) {
					nPopup.Open();
				}
			}
			catch (e) {
			}
		}

		function applySort(sortValue) {
			try {
				var pURL = window.location.href;
				pURL = editQueryStringValue(pURL, 'sortOrder', sortValue);
				pURL = editQueryStringValue(pURL, 'sortChanged', 'true');

				window.location.href = 'Loading.aspx?Page=' + pURL;
			}
			catch (e) {
			}
        }

        function imgHelp_click() {
            var s = '';

            s += '--Closed Tasks--<br />';
            s += '&nbsp;&nbsp;&nbsp;Total Closed: Tasks with the final status of closed within a session.<br />';
            s += '&nbsp;&nbsp;&nbsp;Carry-In: Tasks with the final status of closed within a session which had a final status of open in the previous session.<br />';
            s += '&nbsp;&nbsp;&nbsp;New: Tasks with the final status of closed within a session which were created in that session.<br />';
            s += '&nbsp;&nbsp;&nbsp;Carry-Out: Tasks with the final status of open within a session which were closed at some point in that session.<br />';
            s += '<br />--Open Tasks--<br />';
            s += '&nbsp;&nbsp;&nbsp;Total Open: Tasks with the final status of open within a session.<br />';
            s += '&nbsp;&nbsp;&nbsp;Carry-In: Tasks with the final status of open within a session which had a final status of open in the previous session.<br />';
            s += '&nbsp;&nbsp;&nbsp;New: Tasks with the final status of open within a session which were created in that session.<br />';
            s += '&nbsp;&nbsp;&nbsp;Carry-Out: Tasks with the final status of open within a session.<br />';
            s += '<br />--Resources--<br />';
            s += '&nbsp;&nbsp;&nbsp;All Dev and Biz resources set as Assigned or Primary at some point within a session.<br /><br />';

            MessageBox(s);
        }

		function deleteNewRow(img) {
            $(img).closest('tr').remove();
            resizeFrame();
		}

		function buttonNew_click(startDate, endDate, duration, first, last) {
			var grdMD = <%=this.grdMD.ClientID%>;
			
            var nRow = grdMD.Body.Rows[0].cloneNode(true);
			$(nRow.cells[_idxID]).text('0');//.innerText = '0';
			$(nRow.cells).each(function(i, td){
				if($(td).find('input:text').length > 0) {
					$(td).find('input:text').attr('original_value', '');
					$(td).find('input:text').text('');
                    $(td).find('input:text').val('');
                }
                else if ($(td).find('textarea').length > 0) {
                    $(td).find('textarea').attr('original_value', '');
                    $(td).find('textarea').val('');
                }
				else if($(td).find('input:checkbox').length > 0) {
					$(td).find('input:checkbox').attr('original_value', '');
					$(td).find('input:checkbox').attr('checked', false);
					$(td).find('input:checkbox').prop('checked', false);
				}
				else if($(td).children('input').length > 0) {
					$(td).find('input').attr('original_value', '');
					$(td).find('input').text('');
					$(td).find('input').val('');
				}
				else if($(td).children('select').length > 0) {
					$(td).find('select').attr('original_value', '');
                }
                else if ($(td).children('a').length > 0) {
                    $(td).find('a').attr('original_value', '');
                }
				else{
					$(td).html('&nbsp;');
                }
            });

            $(nRow).find('input[id*="txtStartDate"]').attr('id', $(nRow).find('input[id*="txtStartDate"]').attr('id') + datepickerids);
            $(nRow).find('input[id*="txtEndDate"]').attr('id', $(nRow).find('input[id*="txtEndDate"]').attr('id') + datepickerids);
            datepickerids++;

            $(nRow).find('input[id*="txtStartDate"]').datepicker({
                showAnim: ""
                , changeMonth: true
                , showOtherMonths: true
                , selectOtherMonths: true
                , changeYear: true
                , onSelect: function () {
                    resizeFrame();
                    activateSaveButton($(this));
                    updateDuration($(this));
                }
                , onClose: function () { resizeFrame(); }
            }).click(function () { resizeFrame(); }).focus(function () { resizeFrame(); });

            $(nRow).find('input[id*="txtEndDate"]').datepicker({
                showAnim: ""
                , changeMonth: true
                , showOtherMonths: true
                , selectOtherMonths: true
                , changeYear: true
                , onSelect: function () {
                        resizeFrame();
                        activateSaveButton($(this));
                        updateDuration($(this));
                    }
                    , onClose: function () { resizeFrame(); }
                }).click(function () { resizeFrame(); }).focus(function () { resizeFrame(); });

            $(nRow).find('input[id*="txtDuration"]').on('change', function () { updateEndDate($(this)); });

            if (startDate && endDate && duration) {
                $(nRow).find('input[id*="txtReleaseSession"]').val('Session ' + startDate + ' - ' + endDate);
                $(nRow).find('input[id*="txtStartDate"]').val($.datepicker.formatDate('mm/dd/yy', new Date(startDate)));
                if (first || last) updateDuration($(nRow).find('input[id*="txtStartDate"]'));
                $(nRow).find('input[id*="txtEndDate"]').val($.datepicker.formatDate('mm/dd/yy', new Date(endDate)));
                if (first || last) updateDuration($(nRow).find('input[id*="txtEndDate"]'));
                $(nRow).find('input[id*="txtDuration"]').val(duration);
            }

            $(nRow).attr('fieldChanged', true);
            $(nRow).insertAfter(grdMD.Body.Rows[0]);
			//grdMD.Body.Rows[0].parentNode.insertBefore(nRow,grdMD.Body.Rows[0]);
			//add delete button
			$(nRow.cells[_idxDelete]).html(_htmlDeleteImage);
            $(nRow).show();
            resizeFrame();
        }

        function buttonWizard_click() {
            var nWindow = 'SessionWizard';
            var nTitle = 'Session Wizard';
            var nHeight = 350, nWidth = 250;
            var nURL = 'ReleaseSession_Wizard.aspx' + window.location.search;

            var openPopup = popupManager.AddPopupWindow(nWindow, nTitle, 'Loading.aspx?Page=' + nURL, nHeight, nWidth, 'PopupWindow', this);

            if (openPopup) openPopup.Open();
        }

		function imgDelete_click(itemID, item) {
			if (!itemID || itemID == '' || itemID == 0) {
				MessageBox('You must specify an item to delete.');
				return;
			}

			if (confirm('This will permanently delete this item.' + '\n' + 'Do you wish to continue?')) {
				deleteItem(itemID, item);
			}
		}

		function buttonSave_click() {
			save();
        }

        function buttonDelete_click() {
            deleteItem();
        }

		function row_click(row) {
			if ($(row).attr('itemID')) {
                _selectedId = $(row).attr('itemID');
                $('#buttonDelete').prop('disabled', false);
			}
		}

        function activateSaveButton(sender) {
			if (_canEdit) {
				$('#buttonSave').attr('disabled', false);
				$('#buttonSave').prop('disabled', false);
                $(sender).closest('tr').attr('fieldChanged', true);
			}
		}

		function txt_change(sender) {
			var original_value = '', new_value = '';
			if ($(sender).attr('original_value')) {
				original_value = $(sender).attr('original_value');
			}

			new_value = $(sender).val();

			if (new_value != original_value) {
				activateSaveButton(sender);
			}
		}

		function ddl_change(sender) {
			var original_value = '', new_value = '';
			if ($(sender).attr('original_value')) {
				original_value = $(sender).attr('original_value');
			}

			new_value = $('option:selected', $(sender)).val();

			if (new_value != original_value) {
				activateSaveButton(sender);
			}
        }

        function openNarrative(id) {
            var narrative = $('tr[itemid="' + id + '"]').find('span[id="' + id + '"]').text();

            QuestionBox('Edit Narrative', StrongEscape('Edit the narrative for this session:<br /><textarea id="txtquestion" rows="7" style="width: 95%;">' + narrative), 'OK,Cancel', 'editNarrative_confirmed', 500, 400, this, id);
        }

        function editNarrative_confirmed(btnAnswer, inputAnswer, param) {
            if (btnAnswer == 'OK') {
                var id = inputAnswer.slice(0, inputAnswer.indexOf('|'));
                var narrative = inputAnswer.slice(inputAnswer.indexOf('|') + 13);

                if (narrative.length > 15) $('tr[itemid="' + id + '"]').find('a').text(narrative.slice(0, 12) + '...');
                else if (narrative.length > 1) $('tr[itemid="' + id + '"]').find('a').text(narrative);

                $('tr[itemid="' + id + '"]').find('span[id="' + id + '"]').text(narrative);
                if (id > 0) activateSaveButton($('tr[itemid="' + id + '"]').find('span[id="' + id + '"]')[0]);
            }
        }

        function resizeGrid() {
            setTimeout(function () { <%=this.grdMD.ClientID %>.ResizeGrid(); }, 1);
        }

        function imgShowHideChildren_click(sender, direction, id) {
            try {
                if (id == "0" || id == "ALL") {
                    var itemId = '0';
                    $('[Name="img' + direction + '"]').each(function () {
                        itemId = $(this).attr('itemId');
                        if (requestId && +requestId > 0) {
                            imgShowHideChildren_click(this, direction, itemId);
                        }
                    });
                }

                if (direction.toUpperCase() == "SHOW") {
                    //show row/div with child grid frame
                    //get frame and pass url(if necessary)
                    var td;

                    $(sender).closest('tr').each(function () {
                        var currentRow = $(this);
                        var row = $(currentRow).next('tr[Name="gridChild_' + id + '"]');
                        $(row).show();

                        td = $('td:eq(<%=(this.DCC == null 
							|| !this.DCC.Contains("ReleaseSessionID")) ? 0 : this.DCC["ReleaseSessionID"].Ordinal %>)', row)[0];
                        loadChildGrid(td, id);
                    });
                }
                else {
                    $('tr[Name="gridChild_' + id + '"]').hide();
                }

                $(sender).hide();
                $(sender).siblings().show();
                resizeFrame();
            } catch (e) {
                var msg = e.message;
            }
        }

        function loadChildGrid(td, id) {
            var url = 'Loading.aspx?Page=';

            url += 'MDGrid_ProductVersion_Session_Breakout.aspx' + window.location.search + '&ReleaseSessionID=' + id;

            $('iFrame', $(td)).each(function () {
                var src = $(this).attr('src');
                if (src == "javascript:''") {
                    $(this).attr('src', url);
                }

                $(this).show();
            });
        }

        function initDatepickers() {
            $('input[id*="txtStartDate"], input[id*="txtEndDate"]').each(function () {
                if ($(this).is(':visible') && !$(this).hasClass('hasDatepicker')) {
                    $(this).datepicker({
                        showAnim: ""
                        , changeMonth: true
                        , showOtherMonths: true
                        , selectOtherMonths: true
                        , changeYear: true
                        , onSelect: function () {
                            resizeFrame();
                            activateSaveButton($(this));
                            updateDuration($(this));
                        }
                        , onClose: function () { resizeFrame(); }
                    });
                }
                $(this).attr('autocomplete', 'off');
            }).click(function () { resizeFrame(); }).focus(function () { resizeFrame(); });

            $('input[id*="txtDuration"]').on('change', function () { updateEndDate($(this)); });
        }

        function updateDuration(sender) {
            var startDate = $(sender).closest('tr').find('input[id*="txtStartDate"]').datepicker('getDate');
            var endDate = $(sender).closest('tr').find('input[id*="txtEndDate"]').datepicker('getDate');
            var day = 86400000;
            var duration = 0;

            if (startDate && endDate && startDate < endDate) duration = Math.round(Math.abs((endDate.getTime() - startDate.getTime()) / (day)));
            $(sender).closest('tr').find('input[id*="txtDuration"]').val(duration);
            if ($(sender).attr('id').indexOf('txtStartDate') > 0) {
                updateStartDate($(sender).closest('tr').find('input[id*="txtDuration"]'));
            } else {
                updateEndDate($(sender).closest('tr').find('input[id*="txtDuration"]'));
            }
        }

        function updateEndDate(days) {
            var startDate = $(days).closest('tr').find('input[id*="txtStartDate"]').datepicker('getDate');
            var duration = $(days).val();
            var endDate = new Date(startDate);

            if (startDate) {
                endDate.setDate(startDate.getDate() + parseInt(duration));
                $(days).closest('tr').find('input[id*="txtEndDate"]').val($.datepicker.formatDate('mm/dd/yy', endDate));
            } else {
                $(days).closest('tr').find('input[id*="txtStartDate"]').val($(days).closest('tr').find('input[id*="txtEndDate"]').val());
            }
            updateName(days);

            var $sessionRows = $('.gridBody:visible, .selectedRow', $('#<%=this.grdMD.ClientID%>_Grid'));
            startDate = $(days).closest('tr').find('input[id*="txtStartDate"]').datepicker('getDate');
            endDate = $(days).closest('tr').find('input[id*="txtEndDate"]').datepicker('getDate');

            $.each($sessionRows.not($(days).closest('tr')[0]), function () {
                if (sessionConflict(startDate, endDate, this)) {
                    $(this).find('input[id*="txtStartDate"]').val($.datepicker.formatDate('mm/dd/yy', endDate));
                    updateEndDate($(this).find('input[id*="txtDuration"]'));
                }
            });
        }

        function updateStartDate(days) {
            var endDate = $(days).closest('tr').find('input[id*="txtEndDate"]').datepicker('getDate');
            var duration = $(days).val();
            var startDate = new Date(endDate);

            if (endDate) {
                startDate.setDate(endDate.getDate() - parseInt(duration));
                $(days).closest('tr').find('input[id*="txtStartDate"]').val($.datepicker.formatDate('mm/dd/yy', startDate));
            } else {
                $(days).closest('tr').find('input[id*="txtEndDate"]').val($(days).closest('tr').find('input[id*="txtStartDate"]').val());
            }
            updateName(days);

            var $sessionRows = $('.gridBody:visible, .selectedRow', $('#<%=this.grdMD.ClientID%>_Grid'));
            startDate = $(days).closest('tr').find('input[id*="txtStartDate"]').datepicker('getDate');
            endDate = $(days).closest('tr').find('input[id*="txtEndDate"]').datepicker('getDate');

            $.each($sessionRows.not($(days).closest('tr')[0]).get().reverse(), function () {
                if (sessionConflict(startDate, endDate, this)) {
                    $(this).find('input[id*="txtEndDate"]').val($.datepicker.formatDate('mm/dd/yy', startDate));
                    updateStartDate($(this).find('input[id*="txtDuration"]'));
                }
            });
        }

        function sessionConflict(startDate, endDate, row) {
            return (($(row).find('input[id*="txtStartDate"]').datepicker('getDate') > startDate
                && $(row).find('input[id*="txtStartDate"]').datepicker('getDate') < endDate)
                || ($(row).find('input[id*="txtEndDate"]').datepicker('getDate') > startDate
                && $(row).find('input[id*="txtEndDate"]').datepicker('getDate') < endDate)
                || ($(row).find('input[id*="txtStartDate"]').datepicker('getDate') < startDate
                && $(row).find('input[id*="txtEndDate"]').datepicker('getDate') > endDate)
                || ($(row).find('input[id*="txtStartDate"]').datepicker('getDate') > startDate
                && $(row).find('input[id*="txtEndDate"]').datepicker('getDate') < endDate)
                || (startDate && $(row).find('input[id*="txtStartDate"]').datepicker('getDate') && $(row).find('input[id*="txtStartDate"]').datepicker('getDate').toDateString() == startDate.toDateString()
                && endDate && $(row).find('input[id*="txtEndDate"]').datepicker('getDate') && $(row).find('input[id*="txtEndDate"]').datepicker('getDate').toDateString() == endDate.toDateString()));
        }

        function updateName(date) {
            var startDate = $(date).closest('tr').find('input[id*="txtStartDate"]').datepicker('getDate');
            var endDate = $(date).closest('tr').find('input[id*="txtEndDate"]').datepicker('getDate');

            if (startDate && endDate) {
                $(date).closest('tr').find('input[id*="txtReleaseSession"]').val('Session ' + $.datepicker.formatDate('mm/dd/yy', startDate) + ' - ' + $.datepicker.formatDate('mm/dd/yy', endDate));
            }
        }

	</script>

	<script id="jsInit" type="text/javascript">

		function initVariables() {
			try {
				_pageUrls = new PageURLs();

				_canEdit = ('<%=this.CanEdit.ToString().ToUpper()%>' == 'TRUE');
				_canView = (_canEdit || ('<%=this.CanView.ToString().ToUpper()%>' == 'TRUE'));
				_isAdmin = ('<%=this.IsAdmin.ToString().ToUpper()%>' == 'TRUE');

				if (_dcc[0] && _dcc[0].length > 0) {
					_idxDelete = parseInt('<%=this.DCC["X"].Ordinal %>');
					_idxID = parseInt('<%=this.DCC["ReleaseSessionID"].Ordinal %>');
				}
			} catch (e) {

			}
        }

		$(document).ready(function () {

            initVariables();
			
			$(':input').css('font-family', 'Arial');
			$(':input').css('font-size', '12px');
			
			$('#imgReport').hide();
			$('#imgExport').click(function () { imgExport_click(); });
			$('#imgRefresh').click(function () { refreshPage(); });
            $('#imgSort').click(function () { imgSort_click(); });
            $('#imgHelp').click(function () { imgHelp_click(); });

			if (_canEdit) {
                $('input:text, textarea').on('change keyup mouseup', function () { txt_change(this); });
				$('input:checkbox').on('change', function () { txt_change(this); });
				$('input').on('change keyup mouseup', function () { txt_change(this); });
				$('select').on('change keyup mouseup', function () { ddl_change(this); });

                $('#buttonWizard').attr('disabled', false);
				$('#buttonNew').attr('disabled', false);
                $('#buttonWizard').click(function (event) { buttonWizard_click(); return false; });
				$('#buttonNew').click(function (event) { buttonNew_click(); return false; });
                $('#buttonSave').click(function (event) { buttonSave_click(); return false; });
				$('#buttonDelete').click(function (event) { buttonDelete_click(); return false; });
			}

			$('.gridBody').click(function (event) { row_click(this); });
            $('.selectedRow').click(function (event) { row_click(this); });

            initDatepickers();

            resizeFrame();
		});
	</script>

</asp:Content>

