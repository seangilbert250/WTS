using System;
using System.Collections.Generic;
using System.Data;
using System.Web.Services;
using System.Web.UI.WebControls;
using System.Xml;

using Newtonsoft.Json;

public partial class AOR_Meeting_Grid : System.Web.UI.Page
{
    #region Variables
    private bool MyData = true;
    protected bool CanEditAOR = false;
    protected bool CanViewAOR = false;
    protected bool CanEditAORMeeting = false;
    protected bool CanViewAORMeeting = false;
    protected bool CanEditAORMeetingInstance = false;
    protected bool CanViewAORMeetingInstance = false;
    protected int AORID = 0;
    protected int AORReleaseID = 0;
    protected string View = string.Empty;
    protected int CurrentLevel = 1;
    protected string Filter = string.Empty;
    protected bool IsConfigured = false;
    private XmlDocument Levels = new XmlDocument();
    protected DataColumnCollection DCC;
    protected int LevelCount = 0;
    protected int GridPageIndex = 0;
    protected string AORMIMeetingID = string.Empty;
    #endregion

    #region Page
    private void Page_Load(object sender, EventArgs e)
    {
        ReadQueryString();
        ReadSession();
        InitializeEvents();

        this.CanEditAOR = (UserManagement.UserCanEdit(WTSModuleOption.AOR) && AOR.AORReleaseCurrent(AORID: this.AORID, AORReleaseID: this.AORReleaseID));
        this.CanViewAOR = this.CanEditAOR || UserManagement.UserCanView(WTSModuleOption.AOR);
        this.CanEditAORMeeting = UserManagement.UserCanEdit(WTSModuleOption.Meeting);
        this.CanViewAORMeeting = this.CanEditAORMeeting || UserManagement.UserCanView(WTSModuleOption.Meeting);
        this.CanEditAORMeetingInstance = UserManagement.UserCanEdit(WTSModuleOption.Meeting);
        this.CanViewAORMeetingInstance = this.CanEditAORMeetingInstance || UserManagement.UserCanView(WTSModuleOption.Meeting);

        this.ddlView.SelectedValue = this.View;

        DataTable dt = LoadData();
        if (dt != null) this.DCC = dt.Columns;

        grdData.DataSource = dt;

        if (!Page.IsPostBack && this.GridPageIndex > 0 && this.GridPageIndex < ((decimal)dt.Rows.Count / (decimal)25)) grdData.PageIndex = this.GridPageIndex;

        grdData.DataBind();
    }

    private void ReadSession()
    {
        //temp
        XmlDocument nDoc = new XmlDocument();
        string test = string.Empty;
        test = "<crosswalkparameters><level>";

        if (this.View == "" || this.View == "Week")
        {
            test += "<breakout><column>MEETING WEEK START</column><sort>Descending</sort></breakout>";
            test += "<breakout><column>MEETING WEEK END</column><sort>Descending</sort></breakout>";
            test += "<breakout><column># OF MEETINGS</column><sort>Ascending</sort></breakout>";
            test += "<breakout><column># OF MEETING INSTANCES</column><sort>Ascending</sort></breakout>";
            test += "<breakout><column># OF AORS INVOLVED</column><sort>Ascending</sort></breakout>";
            test += "<breakout><column># OF RESOURCES INVOLVED</column><sort>Ascending</sort></breakout>";
            test += "</level><level>";
        }
        else if (this.View == "AOR")
        {
            test += "<breakout><column>AOR #</column><sort>Ascending</sort></breakout>";
            test += "<breakout><column>AOR NAME</column><sort>Ascending</sort></breakout>";
            test += "<breakout><column># OF MEETINGS</column><sort>Ascending</sort></breakout>";
            test += "<breakout><column># OF MEETING INSTANCES</column><sort>Ascending</sort></breakout>";
            test += "<breakout><column># OF RESOURCES INVOLVED</column><sort>Ascending</sort></breakout>";
            test += "</level><level>";
        }
        
        //test += "<breakout><column>RESOURCE</column><sort>Ascending</sort></breakout>";
        //test += "<breakout><column># OF MEETINGS</column><sort>Ascending</sort></breakout>";
        //test += "<breakout><column># OF MEETING INSTANCES</column><sort>Ascending</sort></breakout>";
        //test += "<breakout><column># OF AORS INVOLVED</column><sort>Ascending</sort></breakout>";
        //test += "</level><level>";
        test += "<breakout><column>MEETING NAME</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column>FREQUENCY</column><sort>Ascending</sort></breakout>";
        //test += "<breakout><column>PRIVATE</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column>LAST MEETING</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column>NEXT MEETING</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column>MIN # OF ATTENDEES</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column>MAX # OF ATTENDEES</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column>AVG # OF ATTENDEES</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column># OF MEETING INSTANCES</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column># OF AORS INVOLVED</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column># OF RESOURCES INVOLVED</column><sort>Ascending</sort></breakout>";
        test += "</level><level>";
        test += "<breakout><column>INSTANCE DATE</column><sort>Descending</sort></breakout>";
        test += "<breakout><column>MEETING INSTANCE NAME</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column>ACTUAL LENGTH</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column># OF AORS INVOLVED</column><sort>Ascending</sort></breakout>";
        test += "<breakout><column># OF RESOURCES INVOLVED</column><sort>Ascending</sort></breakout>";
        test += "</level></crosswalkparameters>";
        nDoc.InnerXml = test;
        Session["AORMeetingLevels"] = nDoc;
        //

        if (Session["AORMeetingLevels"] != null)
        {
            this.Levels = (XmlDocument)Session["AORMeetingLevels"];
        }

        this.LevelCount = this.Levels.SelectNodes("crosswalkparameters/level").Count;

        if (this.LevelCount >= 1) this.IsConfigured = true;
    }

    private void ReadQueryString()
    {
        if (Request.QueryString["MyData"] == null || string.IsNullOrWhiteSpace(Request.QueryString["MyData"])
            || Request.QueryString["MyData"].Trim() == "1" || Request.QueryString["MyData"].Trim().ToUpper() == "TRUE")
        {
            this.MyData = true;
        }
        else
        {
            this.MyData = false;
        }

        if (Request.QueryString["AORID"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["AORID"]))
        {
            int.TryParse(Request.QueryString["AORID"], out this.AORID);
        }

        if (Request.QueryString["AORReleaseID"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["AORReleaseID"]))
        {
            int.TryParse(Request.QueryString["AORReleaseID"], out this.AORReleaseID);
        }

        if (Request.QueryString["View"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["View"]))
        {
            this.View = Request.QueryString["View"];
        }

        if (Request.QueryString["CurrentLevel"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["CurrentLevel"]))
        {
            int.TryParse(Request.QueryString["CurrentLevel"], out this.CurrentLevel);
        }

        if (Request.QueryString["Filter"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["Filter"]))
        {
            this.Filter = Uri.UnescapeDataString(Request.QueryString["Filter"]);
        }

        if (Request.QueryString["GridPageIndex"] != null && !string.IsNullOrWhiteSpace(Request.QueryString["GridPageIndex"]))
        {
            int.TryParse(Request.QueryString["GridPageIndex"], out this.GridPageIndex);
        }
    }

    private void InitializeEvents()
    {
        grdData.GridHeaderRowDataBound += grdData_GridHeaderRowDataBound;
        grdData.GridRowDataBound += grdData_GridRowDataBound;
        grdData.GridPageIndexChanging += grdData_GridPageIndexChanging;
    }
    #endregion

    #region Data
    private DataTable LoadData()
    {
        DataTable dt = new DataTable();

        if (this.IsConfigured)
        {
            if (IsPostBack && this.CurrentLevel == 1 && Session["dtAORMeetingLevel" + this.CurrentLevel] != null)
            {
                dt = (DataTable)Session["dtAORMeetingLevel" + this.CurrentLevel];
            }
            else
            {
                XmlDocument docLevel = new XmlDocument();
                XmlElement rootLevel = (XmlElement)docLevel.AppendChild(docLevel.CreateElement("crosswalkparameters"));
                XmlNode nodeLevel = this.Levels.SelectNodes("crosswalkparameters/level")[this.CurrentLevel - 1];
                XmlNode nodeImport = docLevel.ImportNode(nodeLevel, true);
                rootLevel.AppendChild(nodeImport);

                XmlDocument docFilters = new XmlDocument();
                XmlElement rootFilters = (XmlElement)docFilters.AppendChild(docFilters.CreateElement("filters"));

                if (this.Filter != string.Empty)
                {
                    string[] arrFilter = this.Filter.Split('|');

                    for (int j = 0; j < arrFilter.Length; j++)
                    {
                        XmlElement filter = docFilters.CreateElement("filter");
                        XmlElement field = docFilters.CreateElement("field");
                        XmlElement value = docFilters.CreateElement("id");
                        string[] arrValues = arrFilter[j].Split('=');

                        field.InnerText = arrValues[0].ToString();
                        value.InnerText = (arrValues[1].ToString().Trim() == "" && field.InnerText.ToUpper() != "MEETINGWEEKSTART_ID" && field.InnerText.ToUpper() != "MEETINGWEEKEND_ID" && field.InnerText.ToUpper() != "LASTMEETING_ID" && field.InnerText.ToUpper() != "NEXTMEETING_ID" ? "0" : arrValues[1].ToString().Trim());

                        filter.AppendChild(field);
                        filter.AppendChild(value);
                        rootFilters.AppendChild(filter);
                    }
                }

                dt = AOR.AOR_Meeting_Crosswalk_Multi_Level_Grid(level: docLevel, filter: docFilters, AORID: this.AORID, AORReleaseID: this.AORReleaseID);

                if (dt != null) if (dt.Columns.Contains("Meeting Week Start") && dt.Columns.Contains("Meeting Week End") && dt.Columns.Contains("Week")) dt.Columns["Week"].SetOrdinal(dt.Columns["Meeting Week End"].Ordinal);

                Session["dtAORMeetingLevel" + this.CurrentLevel] = dt;
            }
        }

        return dt;
    }
    #endregion

    #region Grid
    private void grdData_GridHeaderRowDataBound(object sender, GridViewRowEventArgs e)
    {
        GridViewRow row = e.Row;

        FormatHeaderRowDisplay(ref row);
        if (DCC.Contains("X")) row.Cells[DCC.IndexOf("X")].Controls.Add(CreateImage(true));
    }

    private void grdData_GridRowDataBound(object sender, GridViewRowEventArgs e)
    {
        GridViewRow row = e.Row;

        FormatRowDisplay(ref row);

        if (DCC.Contains("X")) row.Cells[DCC.IndexOf("X")].Controls.Add(CreateImage(false));
        if (DCC.Contains("Meeting Week Start") && DCC.Contains("Meeting Week End") && DCC.Contains("Week"))
        {
            string nWeek = string.Empty;
            DateTime nDate = new DateTime();

            if (DateTime.TryParse(row.Cells[DCC.IndexOf("Meeting Week Start")].Text, out nDate))
            {
                nWeek = String.Format("{0:M/d/yyyy}", nDate);
            }

            nWeek += " - ";

            if (DateTime.TryParse(row.Cells[DCC.IndexOf("Meeting Week End")].Text, out nDate))
            {
                nWeek += String.Format("{0:M/d/yyyy}", nDate);
            }

            row.Cells[DCC.IndexOf("Week")].Text = nWeek == " - " ? "" : nWeek;
            row.Cells[DCC.IndexOf("Meeting Week Start")].Style["display"] = "none";
            row.Cells[DCC.IndexOf("Meeting Week End")].Style["display"] = "none";
        }

        if (DCC.Contains("Meeting #") && DCC.Contains("Meeting Name"))
        {
            row.Attributes.Add("aormeeting_id", row.Cells[DCC.IndexOf("Meeting #")].Text);

            if (this.CanEditAORMeeting)
            {
                row.Cells[DCC.IndexOf("Meeting Name")].Style["text-align"] = "center";
                row.Cells[DCC.IndexOf("Meeting Name")].Controls.Add(CreateTextBox(row.Cells[DCC.IndexOf("Meeting #")].Text, "AOR Meeting Name", row.Cells[DCC.IndexOf("Meeting Name")].Text, false));

                if (DCC.Contains("Description"))
                {
                    row.Cells[DCC.IndexOf("Description")].Style["text-align"] = "center";
                    row.Cells[DCC.IndexOf("Description")].Controls.Add(CreateTextBox(row.Cells[DCC.IndexOf("Meeting #")].Text, "Description", row.Cells[DCC.IndexOf("Description")].Text, false));
                }

                if (DCC.Contains("Sort"))
                {
                    row.Cells[DCC.IndexOf("Sort")].Style["text-align"] = "center";
                    row.Cells[DCC.IndexOf("Sort")].Controls.Add(CreateTextBox(row.Cells[DCC.IndexOf("Meeting #")].Text, "Sort", row.Cells[DCC.IndexOf("Sort")].Text, true));
                }
            }
        }

        if (DCC.Contains("Last Meeting"))
        {
            DateTime nDate = new DateTime();

            if (DateTime.TryParse(row.Cells[DCC.IndexOf("Last Meeting")].Text, out nDate))
            {
                row.Cells[DCC.IndexOf("Last Meeting")].Text = String.Format("{0:M/d/yyyy h:mm tt}", nDate);
            }
        }

        if (DCC.Contains("Next Meeting"))
        {
            DateTime nDate = new DateTime();

            if (DateTime.TryParse(row.Cells[DCC.IndexOf("Next Meeting")].Text, out nDate))
            {
                row.Cells[DCC.IndexOf("Next Meeting")].Text = String.Format("{0:M/d/yyyy h:mm tt}", nDate);
            }
        }

        if (DCC.Contains("AORMeetingInstanceMeeting_ID") && DCC.Contains("Meeting Instance #") && DCC.Contains("Meeting Instance Name"))
        {
            if (row.RowIndex == 0) this.AORMIMeetingID = row.Cells[DCC.IndexOf("AORMeetingInstanceMeeting_ID")].Text;

            row.Attributes.Add("aormeetinginstance_id", row.Cells[DCC.IndexOf("Meeting Instance #")].Text);

            if (row.Cells[DCC.IndexOf("AORMeetingInstanceMeeting_ID")].Text != "&nbsp;" && this.CanViewAORMeetingInstance) row.Cells[DCC.IndexOf("Meeting Instance #")].Controls.Add(CreateLink("Meeting Instance", row.Cells[DCC.IndexOf("AORMeetingInstanceMeeting_ID")].Text, row.Cells[DCC.IndexOf("Meeting Instance #")].Text));
        }

        if (DCC.Contains("Instance Date"))
        {
            DateTime nDate = new DateTime();

            if (DateTime.TryParse(row.Cells[DCC.IndexOf("Instance Date")].Text, out nDate))
            {
                row.Cells[DCC.IndexOf("Instance Date")].Text = String.Format("{0:M/d/yyyy h:mm tt}", nDate);
            }
        }

        if (this.CanViewAOR && DCC.Contains("AOR #") && row.Cells[DCC.IndexOf("AOR #")].Text != "&nbsp;")
        {
            row.Cells[DCC.IndexOf("AOR #")].Controls.Add(CreateLink("AOR", row.Cells[DCC.IndexOf("AOR #")].Text, ""));
        }
    }

    private void grdData_GridPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        grdData.PageIndex = e.NewPageIndex;
    }

    private void FormatHeaderRowDisplay(ref GridViewRow row)
    {
        for (int i = 0; i < row.Cells.Count; i++)
        {
            if (DCC[i].ColumnName.EndsWith("_ID")) row.Cells[i].Style["display"] = "none";
        }

        if (DCC.Contains("X"))
        {
            row.Cells[DCC.IndexOf("X")].Text = "";
            row.Cells[DCC.IndexOf("X")].Style["width"] = "15px";

            if (this.CurrentLevel > 1) row.Cells[DCC.IndexOf("X")].Style["border-left"] = "1px solid grey";
        }

        if (DCC.Contains("Meeting Week Start") && DCC.Contains("Meeting Week End") && DCC.Contains("Week"))
        {
            row.Cells[DCC.IndexOf("Meeting Week Start")].Style["display"] = "none";
            row.Cells[DCC.IndexOf("Meeting Week End")].Style["display"] = "none";
        }

        if (DCC.Contains("Week")) {
			row.Cells[DCC.IndexOf("Week")].Style["text-align"] = "left";
			row.Cells[DCC.IndexOf("Week")].Style["width"] = "140px";
		}

        if (DCC.Contains("# of Meetings")) row.Cells[DCC.IndexOf("# of Meetings")].Style["width"] = "65px";
        if (DCC.Contains("# of Meeting Instances")) row.Cells[DCC.IndexOf("# of Meeting Instances")].Style["width"] = "85px";
        if (DCC.Contains("# of AORs Involved")) row.Cells[DCC.IndexOf("# of AORs Involved")].Style["width"] = "70px";
        if (DCC.Contains("# of Resources Involved")) row.Cells[DCC.IndexOf("# of Resources Involved")].Style["width"] = "95px";
        if (DCC.Contains("Resource")) row.Cells[DCC.IndexOf("Resource")].Style["width"] = "150px";
        if (DCC.Contains("Meeting #")) row.Cells[DCC.IndexOf("Meeting #")].Style["width"] = "70px";
        if (DCC.Contains("Meeting Name")) row.Cells[DCC.IndexOf("Meeting Name")].Style["width"] = "250px";
        if (DCC.Contains("Description")) row.Cells[DCC.IndexOf("Description")].Style["width"] = "250px";
        if (DCC.Contains("Sort")) row.Cells[DCC.IndexOf("Sort")].Style["width"] = "45px";
        if (DCC.Contains("Frequency")) row.Cells[DCC.IndexOf("Frequency")].Style["width"] = "80px";
        if (DCC.Contains("Last Meeting")) row.Cells[DCC.IndexOf("Last Meeting")].Style["width"] = "70px";
        if (DCC.Contains("Next Meeting")) row.Cells[DCC.IndexOf("Next Meeting")].Style["width"] = "70px";
        if (DCC.Contains("Min # of Attendees")) row.Cells[DCC.IndexOf("Min # of Attendees")].Style["width"] = "75px";
        if (DCC.Contains("Max # of Attendees")) row.Cells[DCC.IndexOf("Max # of Attendees")].Style["width"] = "75px";
        if (DCC.Contains("Avg # of Attendees")) row.Cells[DCC.IndexOf("Avg # of Attendees")].Style["width"] = "75px";
        if (DCC.Contains("Meeting Instance #")) row.Cells[DCC.IndexOf("Meeting Instance #")].Style["width"] = "75px";
        if (DCC.Contains("Meeting Instance Name")) row.Cells[DCC.IndexOf("Meeting Instance Name")].Style["width"] = "250px";
        if (DCC.Contains("Instance Date")) row.Cells[DCC.IndexOf("Instance Date")].Style["width"] = "70px";
        if (DCC.Contains("Actual Length")) row.Cells[DCC.IndexOf("Actual Length")].Style["width"] = "55px";
        if (DCC.Contains("AOR #")) row.Cells[DCC.IndexOf("AOR #")].Style["width"] = "45px";
        if (DCC.Contains("AOR Name")) row.Cells[DCC.IndexOf("AOR Name")].Style["width"] = "500px";

        if (DCC.Contains("Z")) row.Cells[DCC.IndexOf("Z")].Text = "";
    }

    private void FormatRowDisplay(ref GridViewRow row)
    {
        for (int i = 0; i < row.Cells.Count; i++)
        {
            if (DCC[i].ColumnName.EndsWith("_ID")) row.Cells[i].Style["display"] = "none";

            decimal val;
            bool isNumeric = decimal.TryParse(row.Cells[i].Text, out val);
            if (isNumeric) row.Cells[i].Style["text-align"] = "center";
        }

        if (DCC.Contains("X"))
        {
            row.Cells[DCC.IndexOf("X")].Style["width"] = "15px";
            row.Cells[DCC.IndexOf("X")].Style["text-align"] = "center";

            if (this.CurrentLevel > 1) row.Cells[DCC.IndexOf("X")].Style["border-left"] = "1px solid grey";
        }

        if (DCC.Contains("Frequency")) row.Cells[DCC.IndexOf("Frequency")].Style["text-align"] = "center";
        if (DCC.Contains("Private")) row.Cells[DCC.IndexOf("Private")].Style["text-align"] = "center";
        if (DCC.Contains("Last Meeting")) row.Cells[DCC.IndexOf("Last Meeting")].Style["text-align"] = "center";
        if (DCC.Contains("Next Meeting")) row.Cells[DCC.IndexOf("Next Meeting")].Style["text-align"] = "center";
        if (DCC.Contains("Instance Date")) row.Cells[DCC.IndexOf("Instance Date")].Style["text-align"] = "center";
    }

    private Image CreateImage(bool isHeader)
    {
        Image img = new Image();

        if (isHeader)
        {
            if (CurrentLevel != LevelCount)
            {
                img.Attributes["src"] = "Images/Icons/add_blue.png";
                img.Attributes["title"] = "Expand";
                img.Attributes["alt"] = "Expand";
                img.Attributes["onclick"] = "displayAllRows(this);";
            }
        }
        else {
            if (this.CurrentLevel == this.LevelCount)
            {
                img.Attributes["src"] = "Images/Icons/cog.png";
                img.Attributes["title"] = "Grid Settings";
                img.Attributes["alt"] = "Grid Settings";
                img.Attributes["onclick"] = "openSettings();";
            }
            else
            {
                img.Attributes["src"] = "Images/Icons/add_blue.png";
                img.Attributes["title"] = "Expand";
                img.Attributes["alt"] = "Expand";
                img.Attributes["onclick"] = "displayNextRow(this);";
            }
        }

        img.Attributes["height"] = "12";
        img.Attributes["width"] = "12";
        img.Style["cursor"] = "pointer";

        return img;
    }

    private LinkButton CreateLink(string type, string id1, string id2)
    {
        LinkButton lb = new LinkButton();

        switch (type)
        {
            case "Meeting Instance":
                lb.Text = id2;
                lb.Attributes["onclick"] = string.Format("openAORMeetingInstance('{0}', '{1}'); return false;", id1, id2);
                break;
            case "AOR":
                lb.Text = id1;
                lb.Attributes["onclick"] = string.Format("openAOR('{0}'); return false;", id1);
                break;
        }

        return lb;
    }

    private TextBox CreateTextBox(string AORMeeting_ID, string type, string value, bool isNumber)
    {
        string txtValue = Server.HtmlDecode(value).Trim();
        TextBox txt = new TextBox();

        txt.Text = txtValue;
        txt.MaxLength = 50;
        txt.Width = new Unit(type == "Sort" ? 90 : 95, UnitType.Percentage);
        txt.Attributes["class"] = "saveable";
        txt.Attributes["onkeyup"] = "input_change(this);";
        txt.Attributes["onpaste"] = "input_change(this);";
        txt.Attributes["onblur"] = "txtBox_blur(this);";
        txt.Attributes.Add("aormeeting_id", AORMeeting_ID);
        txt.Attributes.Add("field", type);
        txt.Attributes.Add("original_value", txtValue);

        if (isNumber)
        {
            txt.MaxLength = 5;
            txt.Style["text-align"] = "center";
        }

        return txt;
    }
    #endregion

    #region AJAX
    [WebMethod()]
    public static string DeleteAORMeeting(string aormeeting)
    {
        Dictionary<string, string> result = new Dictionary<string, string>() { { "deleted", "" }, { "error", "" } };
        bool deleted = false;
        string errorMsg = string.Empty;

        try
        {
            int AORMeeting_ID = 0;
            int.TryParse(aormeeting, out AORMeeting_ID);

            deleted = AOR.AORMeeting_Delete(AORMeetingID: AORMeeting_ID);
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);

            deleted = false;
            errorMsg = ex.Message;
        }

        result["deleted"] = deleted.ToString();
        result["error"] = errorMsg;

        return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
    }

    [WebMethod()]
    public static string DeleteAORMeetingInstance(string aorMeetingInstance)
    {
        Dictionary<string, string> result = new Dictionary<string, string>() { { "deleted", "" }, { "error", "" } };
        bool deleted = false;
        string errorMsg = string.Empty;

        try
        {
            int AORMeetingInstance_ID = 0;
            int.TryParse(aorMeetingInstance, out AORMeetingInstance_ID);

            deleted = AOR.AORMeetingInstance_Delete(AORMeetingInstanceID: AORMeetingInstance_ID);
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);

            deleted = false;
            errorMsg = ex.Message;
        }

        result["deleted"] = deleted.ToString();
        result["error"] = errorMsg;

        return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
    }

    [WebMethod()]
    public static string SaveChanges(string changes)
    {
        Dictionary<string, string> result = new Dictionary<string, string>() { { "saved", "" }, { "error", "" } };
        bool saved = false;
        string errorMsg = string.Empty;

        try
        {
            XmlDocument docChanges = (XmlDocument)JsonConvert.DeserializeXmlNode(changes, "changes");

            saved = AOR.AORMeeting_Update(Changes: docChanges);
        }
        catch (Exception ex)
        {
            LogUtility.LogException(ex);

            saved = false;
            errorMsg = ex.Message;
        }

        result["saved"] = saved.ToString();
        result["error"] = errorMsg;

        return JsonConvert.SerializeObject(result, Newtonsoft.Json.Formatting.None);
    }
    #endregion
}